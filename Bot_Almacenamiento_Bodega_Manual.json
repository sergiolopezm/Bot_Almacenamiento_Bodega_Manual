{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "b53e7f9a-75f6-4090-a956-97c8fa707895",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -55744,
        -6736
      ],
      "id": "2b369df9-bee8-4dce-a95f-cb72c56d5237",
      "name": "Mensaje Entrada",
      "webhookId": "b53e7f9a-75f6-4090-a956-97c8fa707895"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42be7c60-3517-4559-9891-c6e774f76888",
              "name": "message.id",
              "value": "={{ $json.body.data.key.id }}",
              "type": "string"
            },
            {
              "id": "4379efd4-3f5c-418c-8126-c3ce1e18b7a3",
              "name": "message.contenido",
              "value": "={{ $json.body.data.message.conversation }}",
              "type": "string"
            },
            {
              "id": "08d830cc-5846-41e2-b2f5-d2e6dbbb37e2",
              "name": "message.date",
              "value": "={{ new Date(Date.now() - 5*60*60*1000).toISOString() }}",
              "type": "string"
            },
            {
              "id": "51f87c32-fe22-430b-9a43-04f45e9cc969",
              "name": "message.chat.id",
              "value": "={{ $json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "18719256-6e5b-4a97-91c3-9a4e9c440997",
              "name": "message.chat.instance",
              "value": "={{ $json.body.instance }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -55552,
        -6736
      ],
      "id": "569ec883-27a6-4e7b-85c8-7e1e3dacd158",
      "name": "Parametrización"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO MensajesWhatsApp (message_id, contenido, fecha, chat_id, instance)\nVALUES ('{{ $json.message.id }}',\n        '{{ $json.message.contenido }}',\n        FORMAT(CONVERT(datetime, '{{ $json.message.date }}', 127), 'yyyy-MM-dd HH:mm:ss'),\n        '{{ $json[\"message\"][\"chat\"][\"id\"] }}',\n        '{{ $json[\"message\"][\"chat\"][\"instance\"] }}');\n"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -55344,
        -6736
      ],
      "id": "86c700ab-f280-45e3-af3a-2c9dac1acf30",
      "name": "Guarda el mensaje en SQL",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM MensajesWhatsApp\nWHERE chat_id = '{{ $('Parametrización').item.json.message.chat.id }}'\n   OR (chat_id = 'agenteAI' AND message_id IN (\n       SELECT message_id \n       FROM MensajesWhatsApp \n       WHERE chat_id = '{{ $('Parametrización').item.json.message.chat.id }}'\n   ))\nORDER BY fecha ASC;\n"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -55104,
        -6736
      ],
      "id": "f7b42852-a088-4ea3-a7b7-8b9070c89624",
      "name": "Recupera todos los mensajes",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener los mensajes del input\nconst mensajes = $('Recupera todos los mensajes').all();\n\n// Asegurar que haya mensajes antes de continuar\nif (mensajes.length === 0) {\n  return [{ mensajeCount: 0, tiempoUltimoMensaje: null }];\n}\n\n// Obtener la fecha del último mensaje\nconst fechaMensajeStr = mensajes[mensajes.length - 1].json.fecha; // Asegúrate de que 'fecha' es el nombre correcto\nconst fechaMensajeDate = new Date(fechaMensajeStr); // Convertir a Date\n\n// Obtener la fecha y hora actual\nconst fechaActual = new Date();\n\n// Calcular la diferencia en segundos\nconst diferenciaSegundos = Math.floor((fechaActual.getTime() - fechaMensajeDate.getTime()) / 1000);\n\n// Retornar datos para el nodo Switch\nreturn [{\n  mensajeCount: mensajes.length,\n  tiempoUltimoMensaje: diferenciaSegundos\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -54912,
        -6352
      ],
      "id": "7aa9225e-3fba-4384-a671-daa1788d50bc",
      "name": "Count y Tiempo Último Mensaje"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "81c77bfb-8151-4c31-9380-784ae2c20f02",
              "leftValue": "={{ $json.mensajeCount }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "e049aa85-8cb2-483a-814e-0b17613927a5",
              "leftValue": "={{ $json.tiempoUltimoMensaje }}",
              "rightValue": 5,
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -54688,
        -6528
      ],
      "id": "4ec832a9-d4b7-4e12-8303-6964c3fae8e9",
      "name": "If (Salida 0 - No hacer nada)"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e327003b-210e-4d36-a17d-6550957ca66c",
              "leftValue": "={{ $json.tiempoUltimoMensaje }}",
              "rightValue": 5,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "de6f6e64-1e10-434c-8bc5-303d98bdb3ac",
              "leftValue": "={{ $json.tiempoUltimoMensaje }}",
              "rightValue": 15,
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -54464,
        -6416
      ],
      "id": "8cc2e227-f829-466e-be3d-a214179e6bbf",
      "name": "If (Salida 1 - Esperar)"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "143c51ad-50d4-44ee-a050-61e4ffcf2eb3",
              "leftValue": "={{ $json.tiempoUltimoMensaje }}",
              "rightValue": 15,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -54272,
        -6240
      ],
      "id": "65147457-5ca6-48ed-a496-3725d8fd9812",
      "name": "If (Salida 2 - Seguir)"
    },
    {
      "parameters": {
        "amount": "={{$json[\"tiempoUltimoMensaje\"]}}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -53600,
        -6176
      ],
      "id": "04343adb-1f3a-4e09-8fc1-0792bb3d1ea8",
      "name": "Espera X segundos",
      "webhookId": "9c8f7481-324f-499e-9136-938ad85f693c"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -54464,
        -6608
      ],
      "id": "8871a36e-5253-48da-abc0-4f48a0d5eb5a",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -54032,
        -6176
      ],
      "id": "be8f729b-944b-433e-a745-b419c60431e0",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8086b05f-a632-494c-a9c3-d1b74bc1a244",
              "name": "infoMensaje.chat_id",
              "value": "={{ $node[\"Recupera todos los mensajes\"].json.chat_id }}",
              "type": "string"
            },
            {
              "id": "5d101db7-b90d-4464-8da5-68b82779fc85",
              "name": "infoMensaje.historialMensajes",
              "value": "={{ $node[\"Organización y estructuracion de mensajes\"].json.historialMensajes }}",
              "type": "string"
            },
            {
              "id": "5c95d18f-1470-4096-83a5-f0a55234d1e5",
              "name": "infoMensaje.count",
              "value": "={{ $('If (Salida 2 - Seguir)').first().json.mensajeCount }}",
              "type": "string"
            },
            {
              "id": "0c776e32-ba1b-41b2-86f4-33f19d7c06dc",
              "name": "infoMensaje.tiempoUltimoMensaje",
              "value": "={{ $('If (Salida 2 - Seguir)').first().json.tiempoUltimoMensaje }}",
              "type": "string"
            },
            {
              "id": "d86a9164-3da9-4e08-872b-c05816a4ef92",
              "name": "infoMensaje.mensajeActual",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.message.conversation }}",
              "type": "string"
            },
            {
              "id": "530fe022-b6aa-4e79-adbb-c4f32edd8ccb",
              "name": "infoMensaje.fechaMensajeActual",
              "value": "={{ $('Parametrización').first().json.message.date.split('T')[0] }}",
              "type": "string"
            },
            {
              "id": "c51a7336-1fd0-40aa-a1b6-7afab57af93c",
              "name": "infoMensaje.horaMensajeActual",
              "value": "={{ \n  new Date($('Parametrización').first().json.message.date)\n    .toLocaleTimeString(\"es-CO\", { \n      hour: '2-digit', \n      minute: '2-digit', \n      hour12: true,\n      timeZone: 'UTC' \n    }) \n}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -53344,
        -6400
      ],
      "id": "1291899b-93ba-48e3-b688-40db013bdf1c",
      "name": "Organiza el Mensaje"
    },
    {
      "parameters": {
        "jsCode": "// Obtener todos los datos de entrada\nconst datosEntrada = $(\"Recupera todos los mensajes\").all();\n\n// Filtrar solo los objetos que contienen un mensaje, descartando estadísticas\nconst mensajes = datosEntrada.filter(item => item.json.message_id);\n\n// Función para convertir la fecha a formato Colombia (UTC-5) en formato de 12 horas\nfunction convertirHoraColombia(fechaUTC) {\n    if (!fechaUTC) return \"[Hora no encontrada]\";\n    let fecha = new Date(fechaUTC);\n    fecha.setHours(fecha.getHours()); // Convertir a UTC-5\n    return fecha.toLocaleTimeString('es-CO', { hour: '2-digit', minute: '2-digit', hour12: true });\n}\n\n// Función para dar formato de fecha en español sin hora\nfunction formatearFecha(fechaUTC) {\n    if (!fechaUTC) return \"[Fecha no encontrada]\";\n    let fecha = new Date(fechaUTC);\n    return fecha.toLocaleDateString('es-CO', { year: 'numeric', month: 'long', day: 'numeric' });\n}\n\n// Estructurar los mensajes en un formato claro para el agente IA\nconst mensajesEstructurados = mensajes.map((mensaje, index) => {\n    let fecha = mensaje.json.fecha ? formatearFecha(mensaje.json.fecha) : \"[Fecha no encontrada]\";\n    let hora = mensaje.json.fecha ? convertirHoraColombia(mensaje.json.fecha) : \"[Hora no encontrada]\";\n    let contenido = mensaje.json.contenido || \"[Sin contenido]\";\n    \n    // Determinar si el mensaje es del usuario o del agente IA\n    let remitente = mensaje.json.chat_id === 'agenteAI' ? 'El Agente ChatBot IA dice:' : 'El usuario dice:';\n    \n    return `Mensaje ${index + 1} enviado el ${fecha} a las ${hora}.\\n${remitente} \"${contenido}\".`;\n});\n\n// Unir todos los mensajes en un solo texto estructurado\nconst historialMensajes = mensajesEstructurados.join('\\n\\n');\n\n// Retornar los datos estructurados\nreturn [{ historialMensajes }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -53600,
        -6400
      ],
      "id": "8e131030-26e5-4a2c-a831-4ce5dc3012e4",
      "name": "Organización y estructuracion de mensajes"
    },
    {
      "parameters": {
        "content": "# 📩 Agrupa todos los mensajes del usuario\n\n## 🔹 Este flujo se encarga de recibir y almacenar los mensajes enviados por el usuario, recuperar el historial completo de la conversación, estructurar la información de manera clara y organizada, y enviarla al siguiente proceso para su interpretación y respuesta.\n",
        "height": 1000,
        "width": 3480,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -55840,
        -6928
      ],
      "typeVersion": 1,
      "id": "5a8662d4-b1ac-4bcb-aff4-b7e643ec31fe",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT DISTINCT * FROM CitasRecepcion\nWHERE chat_id = '{{ $('Parametrización').first().json.message.chat.id }}'\nAND (estado = 'PROGRAMADA' OR estado = 'REPROGRAMADA')\nORDER BY fecha_creacion ASC;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -53744,
        -6720
      ],
      "id": "fa219f4c-3b2a-4993-b652-98dcb72299c7",
      "name": "Recuperar historial Citas",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -54032,
        -6720
      ],
      "id": "e6d7f0d6-d963-4a2d-a649-436547adfae7",
      "name": "Merge de Datos"
    },
    {
      "parameters": {
        "jsCode": "// Obtener todos los elementos del historial de citas\nconst historialCitas = $input.all();\n\n// Verificar si hay datos\nif (!historialCitas || historialCitas.length === 0) {\n  return [{ historialCitasFormateado: \"No hay historial de citas disponible\" }];\n}\n\n// Función para obtener valor seguro\nfunction getValorSeguro(objeto, propiedad) {\n  try {\n    // Intenta acceder directamente\n    if (objeto && objeto[propiedad] !== undefined && objeto[propiedad] !== null) {\n      return objeto[propiedad];\n    }\n    \n    // Intenta acceder a través de json\n    if (objeto && objeto.json && objeto.json[propiedad] !== undefined && objeto.json[propiedad] !== null) {\n      return objeto.json[propiedad];\n    }\n    \n    return 'N/A';\n  } catch (error) {\n    return 'N/A';\n  }\n}\n\n// Función para formatear fecha\nfunction formatearFecha(fechaStr) {\n  if (!fechaStr || fechaStr === 'N/A') return 'N/A';\n  \n  try {\n    const fecha = new Date(fechaStr);\n    return fecha.toLocaleDateString('es-CO', { year: 'numeric', month: 'long', day: 'numeric' });\n  } catch (error) {\n    return fechaStr;\n  }\n}\n\n// Estructurar las citas en un formato claro\nconst citasEstructuradas = historialCitas.map((cita, index) => {\n  // Obtener valores de forma segura\n  const id = getValorSeguro(cita, 'id');\n  const chatId = getValorSeguro(cita, 'chat_id');\n  const nombre = getValorSeguro(cita, 'nombre');\n  const ordenCompra = getValorSeguro(cita, 'orden_compra');\n  const peso = getValorSeguro(cita, 'peso');\n  const unidades = getValorSeguro(cita, 'unidades');\n  const fechaCita = formatearFecha(getValorSeguro(cita, 'fecha_cita'));\n  const estado = getValorSeguro(cita, 'estado');\n  const fechaCreacion = formatearFecha(getValorSeguro(cita, 'fecha_creacion'));\n  const chatHistorial = getValorSeguro(cita, 'chat_historial');\n  \n  // Crear texto estructurado para esta cita\n  let citaTexto = `CITA #${index + 1}\\n`;\n  citaTexto += `ID: ${id}\\n`;\n  citaTexto += `Chat ID: ${chatId}\\n`;\n  citaTexto += `Nombre: ${nombre}\\n`;\n  citaTexto += `Orden de compra: ${ordenCompra}\\n`;\n  citaTexto += `Peso: ${peso}\\n`;\n  citaTexto += `Unidades: ${unidades}\\n`;\n  citaTexto += `Fecha de cita: ${fechaCita}\\n`;\n  citaTexto += `Estado: ${estado}\\n`;\n  citaTexto += `Fecha de creación: ${fechaCreacion}\\n`;\n  \n  // Agregar historial de chat si existe\n  if (chatHistorial && chatHistorial !== 'N/A') {\n    citaTexto += `Chat: ${chatHistorial}\\n`;\n  }\n  \n  return citaTexto;\n});\n\n// Unir todas las citas en un solo texto estructurado\nconst historialCitasFormateado = citasEstructuradas.join('\\n\\n');\n\n// Retornar un objeto simple con el texto formateado\nreturn [{ historialCitasFormateado }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -53312,
        -6720
      ],
      "id": "2d24dff6-5734-464a-bb74-fc71b6a63361",
      "name": "Organización y estructuracion historial citas"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        -53520,
        -6720
      ],
      "id": "d33d33bd-62bd-4452-8596-307345faa525",
      "name": "Remueve registros de citas duplicados"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "51f49645-ea1d-4717-8195-837dbb674f73",
              "name": "infoMensajecita.chat_id",
              "value": "={{ $('Remueve registros de citas duplicados').first().json.chat_id }}",
              "type": "string"
            },
            {
              "id": "ae0619ec-87bc-47d7-9b8a-d7b629bbea4a",
              "name": "infoMensajecita.historialCitas",
              "value": "={{ $json.historialCitasFormateado }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -53088,
        -6720
      ],
      "id": "5aea9211-010f-4cee-94cd-6843f24bbff1",
      "name": "Organiza el historial de citas"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -52784,
        -6496
      ],
      "id": "61b94870-a5d6-4f71-82de-5a06ff4d5727",
      "name": "Merge de Datos para session ID"
    },
    {
      "parameters": {
        "jsCode": "// ====================================================================\n// UNIFICACIÓN Y CONSISTENCIA DE DATOS - VERSIÓN CORREGIDA\n// ====================================================================\n\nconst output = {};\n\n// Inicializar estructuras con valores por defecto\noutput.infoMensajecita = { \n    chat_id: \"\", \n    historialCitas: \"\" \n};\n\noutput.infoMensaje = { \n    chat_id: null, \n    historialMensajes: \"\", \n    count: null, \n    tiempoUltimoMensaje: null, \n    mensajeActual: \"\", \n    fechaMensajeActual: \"\", \n    horaMensajeActual: \"\" \n};\n\n// ====================================================================\n// SOLUCIÓN 1: OBTENER DATOS DEL NODO \"Organiza el Mensaje\"\n// ====================================================================\ntry {\n    const nodoMensaje = $node[\"Organiza el Mensaje\"];\n    \n    if (nodoMensaje && nodoMensaje.json) {\n        console.log('Datos disponibles en Organiza el Mensaje:', Object.keys(nodoMensaje.json));\n        \n        // Extraer datos usando las claves correctas con fallbacks múltiples\n        output.infoMensaje = {\n            chat_id: nodoMensaje.json[\"infoMensaje.chat_id\"] || \n                     $('Parametrización').first().json[\"message\"][\"chat\"][\"id\"] || \n                     null,\n            historialMensajes: nodoMensaje.json[\"infoMensaje.historialMensajes\"] || \n                              $('Organización y estructuracion de mensajes').first().json.historialMensajes || \n                              \"\",\n            count: nodoMensaje.json[\"infoMensaje.count\"] || \n                   $('If (Salida 2 - Seguir)').first().json.mensajeCount || \n                   null,\n            tiempoUltimoMensaje: nodoMensaje.json[\"infoMensaje.tiempoUltimoMensaje\"] || \n                                $('If (Salida 2 - Seguir)').first().json.tiempoUltimoMensaje || \n                                null,\n            mensajeActual: nodoMensaje.json[\"infoMensaje.mensajeActual\"] || \n                          $('Mensaje Entrada').first().json.body.data.message.conversation || \n                          \"\",\n            fechaMensajeActual: nodoMensaje.json[\"infoMensaje.fechaMensajeActual\"] || \n                               ($('Parametrización').first().json.message.date ? \n                                $('Parametrización').first().json.message.date.split('T')[0] : \"\") ||\n                               \"\",\n            horaMensajeActual: nodoMensaje.json[\"infoMensaje.horaMensajeActual\"] || \n                              ($('Parametrización').first().json.message.date ? \n                               new Date($('Parametrización').first().json.message.date)\n                                 .toLocaleTimeString(\"es-CO\", { \n                                   hour: '2-digit', \n                                   minute: '2-digit', \n                                   hour12: true,\n                                   timeZone: 'UTC' \n                                 }) : \"\") ||\n                              \"\"\n        };\n    }\n} catch (error) {\n    console.log('Error al obtener datos del nodo \"Organiza el Mensaje\":', error.message);\n    \n    // FALLBACK DIRECTO: Si el nodo falla, tomar datos directamente de fuentes originales\n    try {\n        output.infoMensaje = {\n            chat_id: $('Parametrización').first().json.message.chat.id || null,\n            historialMensajes: $('Organización y estructuracion de mensajes').first().json.historialMensajes || \"\",\n            count: $('If (Salida 2 - Seguir)').first().json.mensajeCount || null,\n            tiempoUltimoMensaje: $('If (Salida 2 - Seguir)').first().json.tiempoUltimoMensaje || null,\n            mensajeActual: $('Mensaje Entrada').first().json.body.data.message.conversation || \"\",\n            fechaMensajeActual: $('Parametrización').first().json.message.date.split('T')[0] || \"\",\n            horaMensajeActual: new Date($('Parametrización').first().json.message.date)\n                .toLocaleTimeString(\"es-CO\", { \n                    hour: '2-digit', \n                    minute: '2-digit', \n                    hour12: true,\n                    timeZone: 'UTC' \n                }) || \"\"\n        };\n    } catch (fallbackError) {\n        console.log('Error en fallback directo para infoMensaje:', fallbackError.message);\n    }\n}\n\n// ====================================================================\n// SOLUCIÓN 2: OBTENER DATOS DEL NODO \"Organiza el historial de citas\"\n// ====================================================================\ntry {\n    const nodoCitas = $node[\"Organiza el historial de citas\"];\n    \n    if (nodoCitas && nodoCitas.json) {\n        console.log('Datos disponibles en Organiza el historial de citas:', Object.keys(nodoCitas.json));\n        \n        // Extraer datos usando las claves correctas con fallbacks múltiples\n        output.infoMensajecita = {\n            chat_id: nodoCitas.json[\"infoMensajecita.chat_id\"] || \n                     $('Parametrización').first().json.message.chat.id || \n                     \"\",\n            historialCitas: nodoCitas.json[\"infoMensajecita.historialCitas\"] || \n                           $('Organización y estructuracion historial citas').first().json.historialCitasFormateado || \n                           \"\"\n        };\n    }\n} catch (error) {\n    console.log('Error al obtener datos del nodo \"Organiza el historial de citas\":', error.message);\n    \n    // FALLBACK DIRECTO: Si el nodo falla, tomar datos directamente\n    try {\n        output.infoMensajecita = {\n            chat_id: $('Parametrización').first().json.message.chat.id || \"\",\n            historialCitas: $('Organización y estructuracion historial citas').first().json.historialCitasFormateado || \"\"\n        };\n    } catch (fallbackError) {\n        console.log('Error en fallback directo para infoMensajecita:', fallbackError.message);\n    }\n}\n\n// ====================================================================\n// GENERAR SESSION ID Y DATOS COMPLEMENTARIOS\n// ====================================================================\n// Priorizar chat_id de infoMensajecita, luego infoMensaje\noutput.sessionId = output.infoMensajecita.chat_id || output.infoMensaje.chat_id || null;\n\n// Calcular la semana actual\nconst fechaActual = new Date();\nconst inicioAno = new Date(fechaActual.getFullYear(), 0, 1);\nconst diff = fechaActual - inicioAno;\nconst diasDesdeInicio = Math.floor(diff / (1000 * 60 * 60 * 24));\nconst numeroSemana = Math.ceil((diasDesdeInicio + inicioAno.getDay()) / 7);\noutput.hojaSeleccionada = `SEMANA ${numeroSemana}`;\n\n// ====================================================================\n// LOGGING PARA DEBUGGING\n// ====================================================================\nconsole.log('=== DEBUGGING UNIFICACIÓN DE DATOS ===');\nconsole.log('sessionId:', output.sessionId);\nconsole.log('hojaSeleccionada:', output.hojaSeleccionada);\nconsole.log('infoMensaje.chat_id:', output.infoMensaje.chat_id);\nconsole.log('infoMensaje.historialMensajes length:', output.infoMensaje.historialMensajes.length);\nconsole.log('infoMensajecita.chat_id:', output.infoMensajecita.chat_id);\nconsole.log('infoMensajecita.historialCitas length:', output.infoMensajecita.historialCitas.length);\nconsole.log('======================================');\n\n// Retornar el resultado unificado\nreturn [{ json: output }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -52544,
        -6496
      ],
      "id": "aea0c22b-515a-4030-b0f8-3aa13d1c6be3",
      "name": "Unificación y consistencia de datos"
    },
    {
      "parameters": {
        "url": "https://graph.microsoft.com/v1.0/sites/a592f886-4560-4e62-9646-1eee7add7abe/drives/b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8/items/01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME/content",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "ExcelMallaRecibido2025"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -42752,
        -10576
      ],
      "id": "545dabd2-b217-4d70-be36-37a5f0ff6d7e",
      "name": "HTTP Request MALLA DE RECIBO 2025",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "ExcelMallaRecibido2025",
        "options": {
          "sheetName": "={{ $('Unificación y consistencia de datos').item.json.hojaSeleccionada }}"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -42496,
        -10688
      ],
      "id": "23a31e4d-c445-4cdc-a5e1-7b028ea59e31",
      "name": "Extract MALLA DE RECIBO 2025"
    },
    {
      "parameters": {
        "url": "https://graph.microsoft.com/v1.0/drives/b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8/items/01PPLUUYTWY3753ZJ6ERAZ6LQBYUR2JOTY/content",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "MallaFija"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -42752,
        -10192
      ],
      "id": "8c3fb5cd-541a-4466-9b27-5dc671187cae",
      "name": "HTTP Request Malla Fija",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "MallaFija",
        "options": {
          "sheetName": "DatosProveedor"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -42496,
        -10336
      ],
      "id": "e70ee842-1cc9-4b23-a384-850486ac9d8a",
      "name": "Extract Datos Proveedor"
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del Excel\nconst excelData = $input.all();\nconst hojaSeleccionada = $('Unificación y consistencia de datos').first().json.hojaSeleccionada;\n\n// Obtener hora local en Bogotá\nconst ahora = new Date(new Date().toLocaleString(\"en-US\", { timeZone: \"America/Bogota\" }));\nconst diaSemanaActual = ahora.getDay(); // 0=domingo, 1=lunes, ..., 5=viernes\nconst horaActual = ahora.getHours();\nconst minutosActual = ahora.getMinutes();\n// Determinar si es después de las 16:30\nconst pasoLimiteDia = horaActual > 16 || (horaActual === 16 && minutosActual >= 30);\n\n// Definir estructura de la semana y los días\nconst diasSemana = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes'];\n\n// Mapeo para saber qué días incluir si hoy es x día y pasó el límite\n/**\n * Dado el día de la semana actual (0=domingo ... 6=sábado),\n * devuelve qué días de la semana actual deben incluirse según si pasó el límite.\n */\nfunction diasValidosSemanaActual(diaSemanaActual, pasoLimite) {\n  const mapa = {\n    1: ['martes', 'miércoles', 'jueves', 'viernes'],   // lunes\n    2: ['miércoles', 'jueves', 'viernes'],             // martes\n    3: ['jueves', 'viernes'],                          // miércoles\n    4: ['viernes'],                                     // jueves\n    5: []                                               // viernes (muy tarde para sábado)\n  };\n  if (diaSemanaActual < 1 || diaSemanaActual > 5) {\n    return []; // sábado o domingo no se agendan en semana actual\n  }\n  if (!pasoLimite) {\n    // aún está antes de las 4:30 p.m., se puede incluir el día siguiente\n    const siguiente = diasSemana[diaSemanaActual];\n    return [siguiente, ...mapa[diaSemanaActual]];\n  }\n  return mapa[diaSemanaActual];\n}\n\n// Objeto para almacenar la malla estructurada\nconst mallaEstructurada = {\n  titulo: \"\",\n  año: \"\",\n  semana: \"\",\n  rangoDias: \"\",\n  franjas: [],\n  dias: {}\n};\n\n// Tabla de meses y días. Ajusta si necesitas contemplar bisiestos, etc.\nconst meses = {\n  \"enero\": 1,\n  \"febrero\": 2,\n  \"marzo\": 3,\n  \"abril\": 4,\n  \"mayo\": 5,\n  \"junio\": 6,\n  \"julio\": 7,\n  \"agosto\": 8,\n  \"septiembre\": 9,\n  \"octubre\": 10,\n  \"noviembre\": 11,\n  \"diciembre\": 12\n};\n\nconst nombreMes = {\n  1: \"enero\",\n  2: \"febrero\",\n  3: \"marzo\",\n  4: \"abril\",\n  5: \"mayo\",\n  6: \"junio\",\n  7: \"julio\",\n  8: \"agosto\",\n  9: \"septiembre\",\n  10: \"octubre\",\n  11: \"noviembre\",\n  12: \"diciembre\"\n};\n\n/**\n * Función para determinar si un año es bisiesto\n * Un año es bisiesto si es divisible por 4, excepto aquellos divisibles por 100 \n * que no son divisibles por 400\n */\nfunction esBisiesto(year) {\n  return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n}\n\n/**\n * Función para obtener el número de días en un mes, considerando años bisiestos\n */\nfunction getDiasMes(mes, año) {\n  const diasPorMes = {\n    1: 31, // enero\n    2: esBisiesto(año) ? 29 : 28, // febrero - ajustado para año bisiesto\n    3: 31, // marzo\n    4: 30, // abril\n    5: 31, // mayo\n    6: 30, // junio\n    7: 31, // julio\n    8: 31, // agosto\n    9: 30, // septiembre\n    10: 31, // octubre\n    11: 30, // noviembre\n    12: 31  // diciembre\n  };\n  \n  return diasPorMes[mes];\n}\n\n/**\n * Función para eliminar acentos y pasar a minúsculas (para buscar palabras clave sin importar tildes ni mayúsculas).\n */\nfunction normalizarTexto(texto) {\n  if (typeof texto !== 'string') return \"\";\n  // Normaliza (NFD) y elimina diacríticos, luego pasa a minúsculas.\n  return texto\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\") // quita acentos\n    .toLowerCase();\n}\n\n/**\n * Dada la información de proveedor, ordenCompra, peso, categoría y unidades,\n * revisa si existe la palabra 'fuera de servicio', 'cancelado' o 'reagendado'\n * en cualquiera de esos campos. De ser así, retorna ese estado especial;\n * de lo contrario, retorna 'ocupado'.\n * \n * Se ignoran mayúsculas, minúsculas y tildes.\n */\nfunction determinarEstadoOcupado(proveedor, ordenCompra, peso, categoria, unidades) {\n  const conjunto = `${proveedor} ${ordenCompra} ${peso} ${categoria} ${unidades}`;\n  const texto = normalizarTexto(conjunto);\n\n  if (texto.includes(\"fuera de servicio\")) {\n    return \"fuera de servicio\";\n  }\n  if (texto.includes(\"cancelado\")) {\n    return \"cancelado\";\n  }\n  if (texto.includes(\"reagendado\")) {\n    return \"reagendado\";\n  }\n  return \"ocupado\";  \n}\n\n// -------------------------------------------------------------\n// 1) PROCESAR DATOS (Cabecera, Horas, Muelles, etc.)\n// -------------------------------------------------------------\nfunction procesarDatos(excelData) {\n  const datos = excelData.map(item => item.json);\n  \n  // A) Cabecera (Título, Año, Rango)\n  datos.forEach((dato, index) => {\n    // Buscar título\n    if (dato.__EMPTY_2 === \"MALLA DE RECIBO CEDI KONFIE IA\") {\n      mallaEstructurada.titulo = dato.__EMPTY_2;\n      \n      // En la siguiente fila puede estar año, semana, rango\n      if (index + 1 < datos.length) {\n        const datoSiguiente = datos[index + 1];\n        if (datoSiguiente) {\n          // Año\n          if (datoSiguiente.__EMPTY_2 && !isNaN(datoSiguiente.__EMPTY_2)) {\n            mallaEstructurada.año = datoSiguiente.__EMPTY_2;\n          }\n          // Semana\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"SEMANA\")) {\n              mallaEstructurada.semana = v;\n            }\n          });\n          // Rango: p.ej. \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"LUNES\") && v.includes(\"VIERNES\")) {\n              mallaEstructurada.rangoDias = v;\n            }\n          });\n        }\n      }\n    }\n  });\n  \n  // B) Detectar franjas horarias (.__EMPTY = fracción de día)\n  const franjasHorarias = [];\n  datos.forEach(dato => {\n    if (\n      dato.__EMPTY !== undefined &&\n      typeof dato.__EMPTY === 'number' &&\n      dato.__EMPTY > 0 &&\n      dato.__EMPTY < 1\n    ) {\n      const totalMin = Math.round(dato.__EMPTY * 24 * 60);\n      const hh = Math.floor(totalMin / 60);\n      const mm = totalMin % 60;\n      \n      let periodo = \"AM\";\n      let hora12 = hh;\n      if (hh >= 12) {\n        periodo = \"PM\";\n        hora12 = (hh === 12 ? 12 : hh - 12);\n      }\n      if (hh === 0) {\n        hora12 = 12;\n      }\n      \n      const horaStr = `${hora12}:${String(mm).padStart(2, '0')} ${periodo}`;\n      franjasHorarias.push({\n        hora: horaStr,\n        indice: datos.indexOf(dato) // fila base\n      });\n    }\n  });\n  franjasHorarias.sort((a, b) => a.indice - b.indice);\n  mallaEstructurada.franjas = franjasHorarias;\n  \n  // C) Detectar muelles (col)\n  const muellesInfo = {};\n  datos.forEach(dato => {\n    Object.entries(dato).forEach(([key, value]) => {\n      if (value === \"MUELLE 01\" || value === \"MUELLE 02\") {\n        const col = parseInt(key.replace(\"__EMPTY_\", \"\"), 10);\n        const muelleKey = (value === \"MUELLE 01\") ? 'muelle1' : 'muelle2';\n        if (!muellesInfo[muelleKey]) {\n          muellesInfo[muelleKey] = [];\n        }\n        muellesInfo[muelleKey].push(col);\n      }\n    });\n  });\n  if (muellesInfo.muelle1) muellesInfo.muelle1.sort((a, b) => a - b);\n  if (muellesInfo.muelle2) muellesInfo.muelle2.sort((a, b) => a - b);\n  \n  // D) Generar los 5 días (lunes-viernes) con su fecha\n  parsearRangoDias();\n  \n  // E) Extraer Citas\n  extraerCitas(datos, muellesInfo);\n  \n  return mallaEstructurada;\n}\n\n/**\n * Parsea la cadena \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n * (o \"LUNES 31 AL VIERNES 04 DE ABRIL\") y maneja el cruce de mes.\n * Ej.: si dayStart=31 y dayEnd=4, la 1ª fecha es 31 de MARZO,\n * luego 1,2,3,4 de ABRIL, en vez de 32,33, etc.\n */\nfunction parsearRangoDias() {\n  const texto = mallaEstructurada.rangoDias;\n  // Regex simple: p.ej. \"31 AL ... 4 DE ABRIL\"\n  // Captura: dayStart, dayEnd, mesFin\n  // Ojo: si dice \"LUNES 31 DE MARZO AL VIERNES 4 DE ABRIL\",\n  // quedará: dayStart=31, dayEnd=4, month=ABRIL (al final).\n  const regex = /(\\d+)\\s+AL\\s+\\D+(\\d+)\\s+DE\\s+(\\w+)/i;\n  const match = regex.exec(texto);\n  \n  // Por defecto, creamos 5 días vacíos sin fecha\n  diasSemana.forEach(d => {\n    mallaEstructurada.dias[d] = {\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  if (!match) {\n    // Sin coincidencia, dejamos los días sin fecha\n    return;\n  }\n  \n  const dayStart = parseInt(match[1], 10); // 31\n  const dayEnd   = parseInt(match[2], 10); // 4\n  const finalMonthName = match[3].toLowerCase(); // \"abril\"\n  \n  // Convertimos a número\n  const finalMonth = meses[finalMonthName] || 3; // fallback marzo\n  const yearNum = parseInt(mallaEstructurada.año, 10) || 2025;\n  \n  // Función para obtener la fecha formateada\n  function fechaFormateada(d, m, y) {\n    return `${d} de ${nombreMes[m]} de ${y}`;\n  }\n  \n  // Comprobamos cuántos días tiene el mes final, considerando bisiestos\n  const diasMesFinal = getDiasMes(finalMonth, yearNum);\n  // y del mes previo\n  const monthPrev = (finalMonth === 1) ? 12 : finalMonth - 1;\n  const yearPrev = (finalMonth === 1) ? yearNum - 1 : yearNum;\n  \n  // Arreglo final con 5 fechas\n  const fechasDias = [];\n  \n  if (dayStart <= dayEnd) {\n    // Caso \"normal\": todo en el mismo mes\n    let d = dayStart;\n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: finalMonth,\n        yearNum: yearNum\n      });\n      d++;\n      if (d > diasMesFinal) {\n        d = 1;\n        const nextMonth = finalMonth % 12 + 1;\n        const nextYear = (nextMonth === 1) ? yearNum + 1 : yearNum;\n        fechasDias[fechasDias.length - 1].mesNum = nextMonth;\n        fechasDias[fechasDias.length - 1].yearNum = nextYear;\n      }\n    }\n  } else {\n    // Caso \"cruza de mes\": dayStart > dayEnd\n    let d = dayStart;\n    let m = monthPrev;\n    let y = yearPrev;\n    \n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: m,\n        yearNum: y\n      });\n      d++;\n      if (d > getDiasMes(m, y)) {\n        d = 1;\n        m = m % 12 + 1;\n        if (m === 1) {\n          y++;\n        }\n      }\n    }\n  }\n  \n  // Ahora volcamos esas 5 fechas en la estructura\n  fechasDias.forEach(fd => {\n    const { diaSem, diaNum, mesNum, yearNum } = fd;\n    mallaEstructurada.dias[diaSem] = {\n      fechaDia: fechaFormateada(diaNum, mesNum, yearNum),\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  // Inicializamos las franjas a 'disponible'\n  if (mallaEstructurada.franjas.length > 0) {\n    diasSemana.forEach(d => {\n      mallaEstructurada.franjas.forEach(f => {\n        mallaEstructurada.dias[d].muelle1[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n        mallaEstructurada.dias[d].muelle2[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n      });\n    });\n  }\n}\n\n/**\n * Función auxiliar: decide a qué día pertenece una columna,\n * corrigiendo 2 columnas de offset (porque 'Extract from XLSX'\n * deja todo desplazado).\n */\nfunction getDayForColumn(colNumber) {\n  // Ajuste de offset +2\n  const realCol = colNumber + 2;\n\n  // Rangos:\n  //  Lunes:      3..8\n  //  Martes:     9..14\n  //  Miércoles: 15..20\n  //  Jueves:    21..26\n  //  Viernes:   27..32\n  if (realCol >= 3 && realCol <= 8) {\n    return \"lunes\";\n  }\n  if (realCol >= 9 && realCol <= 14) {\n    return \"martes\";\n  }\n  if (realCol >= 15 && realCol <= 20) {\n    return \"miércoles\";\n  }\n  if (realCol >= 21 && realCol <= 26) {\n    return \"jueves\";\n  }\n  if (realCol >= 27 && realCol <= 32) {\n    return \"viernes\";\n  }\n  // Si nada coincide, devolvemos null\n  return null;\n}\n\n/**\n * Extraer las citas para cada franja:\n * - Para cada franja, miramos 3 filas:\n *    - Fila base => proveedor\n *    - Fila base+1 => orden\n *    - Fila base+2 => peso, categoría, unidades\n */\nfunction extraerCitas(datos, muellesInfo) {\n  mallaEstructurada.franjas.forEach(franja => {\n    const indiceBase = franja.indice;\n    if (indiceBase < 0 || indiceBase + 2 >= datos.length) {\n      return; // no hay suficientes filas\n    }\n    \n    // Recorremos muelle1, muelle2 y sus columnas\n    const asignarCita = (muelleKey, cols) => {\n      cols.forEach(col => {\n        const provKey = `__EMPTY_${col}`;\n        const filaProv = datos[indiceBase];\n        \n        // Si en esta fila hay un proveedor o algún texto\n        if (\n          filaProv &&\n          typeof filaProv[provKey] === 'string' &&\n          filaProv[provKey].length > 2\n        ) {\n          // Determinar el día real\n          const diaOk = getDayForColumn(col);\n          if (!diaOk || !mallaEstructurada.dias[diaOk]) {\n            return; // si no coincide con ninguno, saltamos\n          }\n          \n          // Recuperar valores para proveedor, ordenCompra y demás\n          const filaOrden = datos[indiceBase + 1];\n          const filaDet = datos[indiceBase + 2];\n          \n          const proveedor = filaProv[provKey] || \"\";\n          const ordenCompra = filaOrden && filaOrden[provKey] ? filaOrden[provKey] : \"\";\n          const peso = filaDet && filaDet[provKey] ? filaDet[provKey] : \"\";\n          const cat  = filaDet && filaDet[`__EMPTY_${col + 1}`] ? filaDet[`__EMPTY_${col + 1}`] : \"\";\n          const und  = filaDet && filaDet[`__EMPTY_${col + 2}`] ? filaDet[`__EMPTY_${col + 2}`] : \"\";\n          \n          // Antes poníamos estado=\"ocupado\" directamente\n          // Ahora verificamos si el texto contiene \"reagendado\", \"cancelado\" o \"fuera de servicio\".\n          const nuevoEstado = determinarEstadoOcupado(proveedor, ordenCompra, peso, cat, und);\n          \n          // Asignamos los datos\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].estado = nuevoEstado;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].proveedor = proveedor;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].ordenCompra = ordenCompra;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].peso = peso;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].categoria = cat;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].unidades = und;\n        }\n      });\n    };\n    \n    if (muellesInfo.muelle1) {\n      asignarCita('muelle1', muellesInfo.muelle1);\n    }\n    if (muellesInfo.muelle2) {\n      asignarCita('muelle2', muellesInfo.muelle2);\n    }\n  });\n}\n\n// -------------------------------------------------------------\n// 2) FUNCIONES PARA CONSULTAR LA MALLA\n// -------------------------------------------------------------\nfunction buscarFranjasDisponibles(categoria, duracionHoras) {\n  const muelle = \"muelle1\"; // Ajusta si usas \"categoria -> muelle\" real\n  \n  const franjasDisponibles = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const libres = [];\n    for (let i = 0; i <= mallaEstructurada.franjas.length - duracionHoras; i++) {\n      let disponible = true;\n      for (let h = 0; h < duracionHoras; h++) {\n        const idxF = i + h;\n        const horaAct = mallaEstructurada.franjas[idxF].hora;\n        if (\n          mallaEstructurada.dias[dia][muelle][horaAct].estado !== 'disponible'\n        ) {\n          disponible = false;\n          break;\n        }\n      }\n      if (disponible) {\n        libres.push({\n          horaInicio: mallaEstructurada.franjas[i].hora,\n          duracion: duracionHoras\n        });\n      }\n    }\n    if (libres.length > 0) {\n      franjasDisponibles.push({ dia, franjas: libres });\n    }\n  });\n  return franjasDisponibles;\n}\n\nfunction buscarCitasProveedor(nombreProveedor) {\n  const citas = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const muelle1 = mallaEstructurada.dias[dia].muelle1;\n    const muelle2 = mallaEstructurada.dias[dia].muelle2;\n    mallaEstructurada.franjas.forEach(f => {\n      const hora = f.hora;\n      // muelle1\n      if (normalizarTexto(muelle1[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 01\",\n          ordenCompra: muelle1[hora].ordenCompra,\n          peso: muelle1[hora].peso,\n          categoria: muelle1[hora].categoria,\n          unidades: muelle1[hora].unidades,\n          estado: muelle1[hora].estado\n        });\n      }\n      // muelle2\n      if (normalizarTexto(muelle2[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 02\",\n          ordenCompra: muelle2[hora].ordenCompra,\n          peso: muelle2[hora].peso,\n          categoria: muelle2[hora].categoria,\n          unidades: muelle2[hora].unidades,\n          estado: muelle2[hora].estado\n        });\n      }\n    });\n  });\n  return citas;\n}\n\nfunction consultarFranjasDisponibles(categoria, duracionHoras) {\n  return buscarFranjasDisponibles(categoria, duracionHoras);\n}\n\nfunction consultarCitasProveedor(nombreProveedor) {\n  return buscarCitasProveedor(nombreProveedor);\n}\n\nfunction obtenerInfoMalla() {\n  return {\n    titulo: mallaEstructurada.titulo,\n    año: mallaEstructurada.año,\n    semana: mallaEstructurada.semana,\n    rangoDias: mallaEstructurada.rangoDias,\n    franjas: mallaEstructurada.franjas.map(f => f.hora)\n  };\n}\n\nfunction estaDisponible(dia, hora, muelle) {\n  const info = mallaEstructurada.dias[dia]?.[muelle]?.[hora];\n  return info ? (info.estado === 'disponible') : false;\n}\n\nfunction obtenerCoordenadasCita(dia, hora, muelle) {\n  // Ajustar con tu mapeo de celdas en Excel\n  return {\n    proveedor: `${dia}_${hora}_${muelle}_proveedor`,\n    ordenCompra: `${dia}_${hora}_${muelle}_ordenCompra`,\n    peso: `${dia}_${hora}_${muelle}_peso`,\n    categoria: `${dia}_${hora}_${muelle}_categoria`,\n    unidades: `${dia}_${hora}_${muelle}_unidades`\n  };\n}\n\n// -------------------------------------------------------------\n// 3) EJECUTAR TODO Y RETORNAR\n// -------------------------------------------------------------\n// Procesar todos los datos\nconst malla = procesarDatos(excelData);\n\n// Aplicar el filtro de días válidos según la hora actual\nconst diasPermitidos = diasValidosSemanaActual(diaSemanaActual, pasoLimiteDia);\nObject.keys(malla.dias).forEach(dia => {\n  if (!diasPermitidos.includes(dia)) {\n    delete malla.dias[dia]; // eliminar días no válidos\n  }\n});\n\nconst resultado = {\n  datosMalla: malla,\n  funciones: {\n    consultarFranjasDisponibles,\n    consultarCitasProveedor,\n    obtenerInfoMalla,\n    estaDisponible,\n    obtenerCoordenadasCita\n  }\n};\n\nreturn [resultado];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -42256,
        -10688
      ],
      "id": "e93d1efc-febe-4aef-97da-085a49c881d8",
      "name": "Estructuración, Datos, Consulta, Citas"
    },
    {
      "parameters": {
        "jsCode": "// Obtener todos los items de la entrada\nconst items = $input.all();\nconst datosProveedores = [];\n\n// Recorrer cada ítem de la entrada\nfor (const item of items) {\n  // Ahora sabemos exactamente cómo se llaman los campos en el JSON original\n  const originalData = item.json;\n  \n  // Crear objeto con los campos normalizados\n  const nuevoObjeto = {\n    // Los campos principales que siempre deben estar presentes\n    proveedor: originalData.PROVEEDOR || \"\",\n    rotacion: originalData.ROTACION || \"\",\n    unidadesPorHora: originalData[\"UNIDADES X HORA\"] || 0,\n    \n    // Los campos que tienen espacios al final en los nombres\n    // Nota: \"Tipo de Proveedor \" tiene un espacio al final\n    tipoProveedor: originalData[\"Tipo de Proveedor \"] || \"\",\n    \n    // \"Dia \" también tiene un espacio al final\n    dia: originalData[\"Dia \"] || \"\",\n    \n    // Este campo tiene un espacio en medio y otro al final\n    numeroDia: originalData[\"Dia _1\"] || 0,\n    \n    // Este campo no tiene espacios extras\n    hora: originalData.Hora || 0,\n    \n    // Campos adicionales que podrían ser útiles\n    cantidadSedes: originalData[\"Cantidad de Sedes\"] || 0\n  };\n  \n  // Añadir el nuevo objeto al array de resultados\n  datosProveedores.push(nuevoObjeto);\n}\n\n// Retornar un único objeto que contiene el array de datos de proveedores\n// dentro de un parámetro global llamado \"datosproveedor\"\nreturn [\n  {\n    json: {\n      datosproveedor: datosProveedores\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -42256,
        -10336
      ],
      "id": "2a15b856-2051-4081-96b8-7e05d2ee0fb5",
      "name": "Estructuración, Consulta, Datos Proveedor"
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -41936,
        -10416
      ],
      "id": "859a8427-be71-415e-9e8d-f870f0f098e0",
      "name": "Merge datos Excel"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "MallaFija",
        "options": {
          "sheetName": "Categorias"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -42496,
        -10112
      ],
      "id": "d1d0b977-e697-423e-bf49-2dc164f5226e",
      "name": "Extract from Categorias"
    },
    {
      "parameters": {
        "jsCode": "// Obtener todos los items de la entrada\nconst items = $input.all();\nconst categorias = [];\n\n// Mapa para verificar categorías duplicadas\nconst categoriasMap = new Map();\n\n// Recorrer cada ítem de la entrada de categorías\nfor (const item of items) {\n  // Obtener los datos originales\n  const originalData = item.json;\n  \n  // Extraer categoría y muelle\n  const categoria = originalData.CATEGORIA || \"\";\n  const muelle = originalData.MUELLE || \"\";\n  \n  // Solo procesar si tanto la categoría como el muelle tienen valor\n  if (categoria && muelle) {\n    // Verificar si esta categoría ya existe en nuestro mapa\n    if (categoriasMap.has(categoria)) {\n      console.log(`Advertencia: La categoría \"${categoria}\" está duplicada. Se ignorará la segunda aparición.`);\n      continue; // Saltar este elemento\n    }\n    \n    // Agregar al mapa para control de duplicados\n    categoriasMap.set(categoria, muelle);\n    \n    // Agregar el objeto al array de categorías\n    categorias.push({\n      \"CATEGORIA\": categoria,\n      \"MUELLE\": muelle\n    });\n  } else {\n    console.log(`Advertencia: Elemento ignorado por falta de categoría o muelle: ${JSON.stringify(originalData)}`);\n  }\n}\n\n// Retornar un único objeto que contiene el array de categorías\n// dentro de un parámetro global llamado \"datoscategorias\"\nreturn [\n  {\n    json: {\n      datoscategorias: categorias\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -42256,
        -10112
      ],
      "id": "e4c90b21-36a1-4f0f-8f6a-e83df9fb3882",
      "name": "Estructuración, Consulta, Datos Categorias"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    datosMalla: $items(\"Merge datos Excel\")[0].json.datosMalla,\n    datosMallaProxSemana: $items(\"Merge datos Excel\")[1].json.datosMallaProxSemana,\n    datosproveedor: $items(\"Merge datos Excel\")[2].json.datosproveedor,\n    datoscategorias: $items(\"Merge datos Excel\")[3].json.datoscategorias,\n    hojaSeleccionada: $items(\"Merge datos Excel\")[0].json.datosMalla.semana\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -41680,
        -10384
      ],
      "id": "0a464e02-6d9a-4fc3-b827-49efc196d64a",
      "name": "Unificación y consistencia de datos1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -52288,
        -6320
      ],
      "id": "311faefa-d3a0-4f8c-b5fc-fc1a2558bee5",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=# SISTEMA\nEres un asistente especializado en logística y gestión de citas en bodega. Tu tarea es clasificar la intención principal del mensaje recibido por un proveedor que se comunica por WhatsApp, con base en el mensaje actual y el historial completo.\nEste modelo no valida datos, solo detecta la intención principal del mensaje, considerando el contexto previo.\n\n## REGLA DE PRIORIDAD MÁXIMA\n**SI EL MENSAJE CONTIENE LA PALABRA EXACTA \"ELIMINAR_MENSAJES\" EN MAYÚSCULAS, LA INTENCIÓN ES SIEMPRE \"ELIMINAR_MENSAJES\", SIN IMPORTAR CUALQUIER OTRO CONTENIDO.**\n\n## POSIBLES INTENCIONES (en orden de prioridad)\n1.  **ELIMINAR_MENSAJES** → Cuando el mensaje contiene exactamente la palabra \"ELIMINAR_MENSAJES\" en mayúsculas.\n2.  **RESPUESTA_FUERA_CONTEXTO** → Cuando el mensaje es completamente irrelevante al contexto de logística/citas (ej: \"quiero que seas mi esposa\", \"cuéntame un chiste\", \"¿cómo está el clima?\", conversaciones personales, temas románticos, etc.).\n3.  **SALUDO** → Cuando el proveedor dice \"Hola\", \"Buenos días\", etc. sin contexto adicional.\n4.  **CREAR_CITA** → Cuando desea agendar una cita de entrega o está proporcionando datos para una nueva cita, **incluso si cambia de opinión sobre los datos varias veces.**\n5.  **EDITAR_CITA** → Cuando quiere modificar una cita que **ya tiene programada** usando palabras clave como reagendar, reprogramar, posponer, aplazar, modificar fecha/cita/entrega, cambiar fecha/hora, O menciona su ID específico.\n6.  **CANCELAR_CITA** → Cuando quiere anular una cita **agendada y menciona su ID de cita**.\n7.  **CONSULTAR_MALLA** → Cuando pregunta por disponibilidad de horarios o franjas.\n8.  **PREGUNTA_GENERAL** → Cuando hace una pregunta relacionada con el negocio pero no sobre citas específicas.\n9.  **CONFIRMACION_CITA** → Cuando selecciona una franja horaria específica de opciones previamente ofrecidas.\n\n## DATOS DE ENTRADA\n**Mensaje actual del proveedor:**\n```\n{{ $json.infoMensaje.mensajeActual }}\n```\n\n**Historial completo de conversación:**\n```\n{{ $json.infoMensaje.historialMensajes }}\n```\n\n**Historial de citas del proveedor (si aplica):**\n```\n{{ $json.infoMensajecita.historialCitas }}\n\n## INSTRUCCIONES DE CLASIFICACIÓN\n\n### PASO 1: VERIFICACIÓN DE ELIMINAR_MENSAJES\nBusca PRIMERO si el mensaje actual contiene exactamente \"ELIMINAR_MENSAJES\" en mayúsculas.\n- Si la encuentra → INTENCIÓN: ELIMINAR_MENSAJES (termina aquí)\n- Si no la encuentra → continúa con el PASO 2\n\n### PASO 2: VERIFICACIÓN DE CONTEXTO EMPRESARIAL\nAntes de clasificar, verifica si el mensaje está relacionado con:\n- Logística, entregas, citas, horarios, proveedores\n- Consultas sobre disponibilidad, fechas, productos\n- Confirmaciones, cancelaciones, modificaciones de citas\n- Preguntas sobre el servicio de bodega\n\n**Si el mensaje NO está relacionado con estos temas empresariales:**\n- Ejemplos: \"quiero que seas mi esposa\", \"cuéntame un chiste\", \"¿te gusta la música?\", \"hablemos de deportes\", \"eres bonita\", conversaciones románticas o personales\n- → INTENCIÓN: RESPUESTA_FUERA_CONTEXTO (termina aquí)\n\n### PASO 3: ANÁLISIS CONTEXTUAL INTELIGENTE\n1. Lee TODO el historial de conversación para establecer el contexto.\n2. **Diferencia clave:** ¿El usuario ha mencionado un ID de cita existente (ej: \"cita 12345\") O usa palabras clave de reagendamiento/modificación?\n   - **Si SÍ ha mencionado un ID:** El contexto es `EDITAR_CITA` o `CANCELAR_CITA`.\n   - **Si usa palabras clave de reagendamiento** (reagendar, reprogramar, posponer, aplazar, modificar fecha/cita/entrega, cambiar fecha/hora, nueva fecha/hora) **Y existe historial de citas:** El contexto es `EDITAR_CITA`.\n   - **Si NO ha mencionado un ID ni palabras clave de reagendamiento:** El contexto es `CREAR_CITA`, incluso si cambia de opinión sobre la fecha/hora.\n\n### CRITERIOS ESPECÍFICOS POR INTENCIÓN\n\n<!-- CAMBIO CLAVE: Se redefine CREAR_CITA para ser más tolerante a los cambios de opinión. -->\n**CREAR_CITA:**\n- Expresa deseo de agendar una cita nueva (sin mencionar ID de cita existente).\n- Proporciona datos iniciales (nombre, categoría, peso).\n- **Cambia de opinión sobre la fecha, hora o cualquier otro dato durante el proceso de creación.** Mientras no se haya confirmado una cita y generado un ID, sigue siendo parte del flujo de CREACIÓN.\n- Completa información faltante para una nueva cita.\n\n**EDITAR_CITA:**\n- **PALABRAS CLAVE PRINCIPALES:** reagendar, reprogramar, posponer, aplazar, modificar fecha, modificar entrega, modificar cita, cambiar fecha, cambiar hora, nueva fecha, nueva hora, proponer fecha para cita existente, reagendamiento, reprogramación.\n- **REQUISITO:** El usuario menciona un ID de cita existente O usa palabras clave de modificación/reagendamiento junto con historial de citas existentes.\n- Proveedor solicita reprogramar/modificar una cita ya confirmada.\n- Proporciona nuevos datos (fecha/hora) para una cita existente.\n- Responde a solicitudes del sistema para la reprogramación de una cita específica.\n- **IMPORTANTE:** Si el usuario usa palabras como \"reagendar\", \"reprogramar\", \"posponer\", \"aplazar\", \"modificar fecha/hora/cita\" y existe historial de citas, SIEMPRE clasificar como EDITAR_CITA.\n\n**CONFIRMACION_CITA:**\n- SOLO cuando el sistema presentó una lista numerada de horarios o una única opción para confirmar.\n- El mensaje del proveedor es una elección clara de esas opciones (ej: \"la 2\", \"confirmo\", \"sí, esa está bien\").\n- **NO es una confirmación si el usuario propone una fecha/hora completamente nueva.**\n\n**CANCELAR_CITA:**\n- **REQUISITO INDISPENSABLE: El usuario debe mencionar un ID de cita existente.**\n- Solicita explícitamente cancelar/anular una cita.\n- Menciona que no podrá asistir a una cita programada, haciendo referencia a ella.\n\n**CONSULTAR_MALLA:**\n- Pregunta por disponibilidad sin datos específicos.\n- Solicita ver horarios disponibles.\n\n**RESPUESTA_FUERA_CONTEXTO:**\n- Mensajes románticos o personales (\"quiero que seas mi esposa\", \"eres hermosa\")\n- Solicitudes de entretenimiento (\"cuéntame un chiste\", \"canta una canción\")\n- Temas completamente ajenos al negocio (deportes, política, clima personal)\n- Conversaciones filosóficas o existenciales\n- Cualquier mensaje que no tenga relación con logística, citas o el servicio de bodega\n\n**PREGUNTA_GENERAL:**\n- Preguntas sobre ubicación, teléfono, otros procesos relacionados con el negocio.\n- Cualquier tema relacionado con el servicio pero no sobre citas específicas.\n\n**SALUDO:**\n- Saludos sin contexto adicional.\n- Primera interacción sin más información.\n\n## REGLAS IMPORTANTES\n1. La palabra \"ELIMINAR_MENSAJES\" tiene prioridad absoluta.\n2. **RESPUESTA_FUERA_CONTEXTO tiene segunda prioridad** - siempre clasifica así los mensajes no relacionados con el negocio.\n3. **DETECCIÓN DE REAGENDAMIENTO:** Si el usuario usa palabras como \"reagendar\", \"reprogramar\", \"posponer\", \"aplazar\", \"modificar fecha/cita/entrega\", \"cambiar fecha/hora\" Y existe historial de citas, SIEMPRE clasificar como EDITAR_CITA.\n4. Si el mensaje es ambiguo, usa SIEMPRE el contexto del historial para determinar si ya se está trabajando sobre una cita con ID (EDITAR) o si es una nueva (CREAR).\n5. **Un cambio de fecha/hora SIN palabras de reagendamiento y sin mencionar un ID de cita es parte de `CREAR_CITA`.**\n6. Una vez establecido un contexto (ej. reprogramar la cita 12345), mantén ese contexto hasta cambio explícito de tema.\n7. Solo clasifica, no valides ni interpretes emociones.\n\n## FORMATO DE RESPUESTA\nEscribe ÚNICAMENTE la intención detectada en este formato:\nINTENCION: [NOMBRE_INTENCION]\n\n### EJEMPLOS\n\n**Ejemplo 1 - ELIMINAR_MENSAJES**\nMensaje: \"Hola, necesito ELIMINAR_MENSAJES por favor\"\nRespuesta: INTENCION: ELIMINAR_MENSAJES\n\n**Ejemplo 2 - RESPUESTA_FUERA_CONTEXTO**\nMensaje: \"Quiero que seas mi esposa\"\nRespuesta: INTENCION: RESPUESTA_FUERA_CONTEXTO\n\n**Ejemplo 3 - RESPUESTA_FUERA_CONTEXTO**\nMensaje: \"Cuéntame un chiste\"\nRespuesta: INTENCION: RESPUESTA_FUERA_CONTEXTO\n\n**Ejemplo 4 - EDITAR_CITA (Correcto)**\nHistorial: Usuario dijo \"quiero reprogramar mi cita 12345\"\nMensaje actual: \"Mi orden es ABC123\"\nRespuesta: INTENCION: EDITAR_CITA\n\n<!-- CAMBIO CLAVE: Se ajusta el ejemplo para reflejar la nueva lógica. -->\n**Ejemplo 3 - CREAR_CITA (con cambio de opinión)**\nHistorial: Bot ofrece alternativas para el 17 de julio.\nMensaje actual: \"No mejor quiero la cita para el 18 de julio\"\nAnálisis: No hay ID de cita. El usuario sigue definiendo los datos para una NUEVA cita.\nRespuesta: INTENCION: CREAR_CITA\n\n**Ejemplo 4 - CONFIRMACION_CITA**\nHistorial: Sistema ofreció \"1) 9:00 AM, 2) 10:00 AM, 3) 11:00 AM\"\nMensaje actual: \"La 2\"\nRespuesta: INTENCION: CONFIRMACION_CITA\n\n**Ejemplo 5 - SALUDO**\nMensaje: \"Buenos días\"\nRespuesta: INTENCION: SALUDO\n\n**Ejemplo 6 - EDITAR_CITA (Reagendar sin ID)**\nHistorial: Usuario tiene citas programadas\nMensaje actual: \"Necesito reagendar mi cita de entrega\"\nAnálisis: Usa palabra clave \"reagendar\" y existe historial de citas.\nRespuesta: INTENCION: EDITAR_CITA\n\n**Ejemplo 7 - EDITAR_CITA (Reprogramar sin ID)**\nHistorial: Usuario tiene citas programadas\nMensaje actual: \"Quiero reprogramar para el viernes\"\nAnálisis: Usa palabra clave \"reprogramar\" y existe historial de citas.\nRespuesta: INTENCION: EDITAR_CITA\n\n**Ejemplo 8 - EDITAR_CITA (Posponer sin ID)**\nHistorial: Usuario tiene citas programadas\nMensaje actual: \"Necesito posponer mi entrega\"\nAnálisis: Usa palabra clave \"posponer\" y existe historial de citas.\nRespuesta: INTENCION: EDITAR_CITA\n\n**Ejemplo 9 - EDITAR_CITA (Modificar fecha sin ID)**\nHistorial: Usuario tiene citas programadas\nMensaje actual: \"Quiero modificar la fecha de entrega\"\nAnálisis: Usa palabras clave \"modificar fecha\" y existe historial de citas.\nRespuesta: INTENCION: EDITAR_CITA\n\n## RECORDATORIO FINAL\n1. Busca PRIMERO \"ELIMINAR_MENSAJES\" en mayúsculas.\n2. Luego verifica si es RESPUESTA_FUERA_CONTEXTO (no relacionado con el negocio).\n3. **PRIORIDAD ALTA:** Si detectas palabras clave de reagendamiento (reagendar, reprogramar, posponer, aplazar, modificar fecha/cita/entrega, cambiar fecha/hora) Y existe historial de citas, SIEMPRE clasificar como EDITAR_CITA.\n4. Si está relacionado con el negocio, analiza el contexto completo. **La presencia de un ID de cita O palabras clave de reagendamiento son factores decisivos para EDITAR_CITA.**\n5. Clasifica según el flujo en curso, permitiendo cambios de opinión dentro del flujo de `CREAR_CITA`.\n6. Responde SOLO con el formato indicado."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -52192,
        -6528
      ],
      "id": "d1400ebe-b322-40b2-a3b2-4c402a507581",
      "name": "Basic LLM CLASIFICADOR"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "SALUDO",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "9dcab097-7554-4462-a979-fdf8536d0486"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "SALUDO"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e006f52b-8954-4501-a9bb-a1afd0d9ded9",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "CREAR_CITA",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CREAR_CITA"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2d70e739-97ca-4370-90d6-a54d59aa360e",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "CONFIRMACION_CITA",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CONFIRMACION_CITA"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "73fa4c42-bcd5-4680-87bd-b90baa1c4fce",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "EDITAR_CITA",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "EDITAR_CITA"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "029fb8dc-7e9f-4dfa-bec0-a933c7d06c53",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "CANCELAR_CITA",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CANCELAR_CITA"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e38bba1f-bf89-4389-b6dc-b8093dc344e1",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "CONSULTAR_MALLA",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CONSULTAR_MALLA"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e6ea3bd9-d425-42e2-8f6b-69342b093cff",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "PREGUNTA_GENERAL",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PREGUNTA_GENERAL"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "63eae036-bb70-4b9a-a67a-7fe6e2886456",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "ELIMINAR_MENSAJES",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ELIMINAR_MENSAJES"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "RESPUESTA_FUERA_CONTEXTO",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "RESPUESTA_FUERA_CONTEXTO"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -51584,
        -6640
      ],
      "id": "9ad420d8-d8ed-4bc5-b0ac-4e56d0070411",
      "name": "Switch basado en intención"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -42960,
        -11424
      ],
      "id": "4fc000b2-08a5-487e-b7b3-968df2a96ed5",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    intencionDetectada: $json.text ? $json.text.replace(\"INTENCION: \", \"\").trim() : \"\"\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -51808,
        -6528
      ],
      "id": "0657fbd2-3d58-4a6b-a1bb-46db7d5a5b74",
      "name": "Almacenar la intención detectada"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=### SISTEMA - COMUNICACIÓN WHATSAPP UX\n\nEres un asistente especializado en logística de bodegas para **Konfíe IA Logistics**, experto en comunicación WhatsApp profesional. Tu función es generar mensajes de saludo con excelente UX: formato visual claro, emojis estratégicos, y tono formal pero humano.\n\n**OBLIGATORIO aplicar formato WhatsApp:**\n- *Negrita* para información importante\n- Emojis profesionales para guiar la vista\n- Estructura visual clara\n- Tono cordial sin exagerar\n\nTu tarea es responder cuando el proveedor inicia la conversación con un saludo.\n\n---\n\n### REGLAS DE RESPUESTA\n\n1.  **Saludo por Hora:** Usa la hora del mensaje actual ({{ $('Unificación y consistencia de datos').item.json.infoMensaje.horaMensajeActual }}) para el saludo:\n    -   06:00 a 11:59 → \"Buenos días\"\n    -   12:00 a 17:59 → \"Buenas tardes\"\n    -   18:00 a 05:59 → \"Buenas noches\"\n\n2.  **Verificación de Citas Activas:** Revisa el `HISTORIAL DE CITAS DEL PROVEEDOR`.\n    -   **SI el historial contiene información de citas (es decir, NO está vacío o no dice 'Sin citas')**, entonces debes añadir esta frase a tu saludo: \"Veo que ya tienes citas agendadas con nosotros. Si deseas hacer algún ajuste o consultar algo, estoy para ayudarte.\"\n    -   **SI el historial está VACÍO o dice 'Sin citas', NO menciones NADA sobre citas existentes.** Simplemente preséntate y ofrece las opciones generales.\n\n3.  **Capacidades del Asistente:** Siempre explica que puedes ayudar a:\n    -   Agendar una nueva cita para descarga.\n    -   Consultar disponibilidad de franjas.\n    -   Editar una cita ya programada.\n    -   Cancelar una entrega programada.\n\n4.  **No solicitar datos:** En este primer mensaje, no solicites ninguna información. Mantén la conversación abierta.\n\n---\n\n### 🧾 MENSAJE ACTUAL DEL PROVEEDOR:\n{{ $('Unificación y consistencia de datos').first().json.infoMensaje.mensajeActual }}\n\n---\n\n### 🗂️ HISTORIAL DE MENSAJES:\n{{ $node[\"Unificación y consistencia de datos\"].json[\"infoMensaje\"][\"historialMensajes\"] }}\n\n---\n\n### 📆 HISTORIAL DE CITAS DEL PROVEEDOR:\n{{ $node[\"Unificación y consistencia de datos\"].json[\"infoMensajecita\"][\"historialCitas\"] }}\n\n---\n\n### 🧠 FORMATO DE RESPUESTA (JSON válido)\n\n**EJEMPLO DE SALUDO CON FORMATO UX:**\n```\n🌅 *¡Buenos días!* \n\nSoy el asistente virtual de *Konfíe IA Logistics* 🏢\n\n👋 Estoy aquí para ayudarte con:\n• 📅 *Agendar* una nueva cita de descarga\n• 🔍 *Consultar* disponibilidad de franjas\n• ✏️ *Modificar* una cita programada  \n• ❌ *Cancelar* una entrega\n\n💬 ¿En qué puedo asistirte hoy?\n```\n\n**Respuesta JSON:**\n{\n  \"mensajeSistema\": \"Mensaje de saludo aplicando OBLIGATORIAMENTE el formato WhatsApp con *negritas*, emojis estratégicos, estructura visual clara y tono profesional cordial.\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -42880,
        -11632
      ],
      "id": "763e1f78-8ef4-405d-a0ed-aeb3012f9fc3",
      "name": "Basic LLM CONVERSACIÓN (SALUDO)"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=-- Actualizar estado a SALUDANDO después de procesar saludo\nUPDATE EstadoConversacional \nSET estado_actual = 'SALUDANDO', \n    contexto_proceso = '{\"descripcion\": \"Procesando saludo del usuario\", \"accion_completada\": \"saludo_procesado\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $('Parametrización').first().json.message.chat.id }}';\n\n-- Si no existe el registro, crear uno nuevo\nIF @@ROWCOUNT = 0\nBEGIN\n    INSERT INTO EstadoConversacional (chat_id, estado_actual, contexto_proceso, fecha_creacion, fecha_actualizacion)\n    VALUES (\n        '{{ $('Parametrización').first().json.message.chat.id }}', \n        'SALUDANDO', \n        '{\"descripcion\": \"Procesando saludo del usuario\", \"accion_completada\": \"saludo_procesado\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n        GETDATE(),\n        GETDATE()\n    );\nEND\n\n-- Confirmar actualización\nSELECT \n  'SALUDANDO' as nuevo_estado,\n  'SALUDO_PROCESADO' as tipo_actualizacion,\n  '{{ $('Parametrización').first().json.message.chat.id }}' as chat_id,\n  GETDATE() as timestamp_actualizacion;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -42496,
        -11632
      ],
      "id": "745dd235-ab77-4eee-a076-d0a368812b7f",
      "name": "Estado SQL - SALUDANDO",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -40864,
        -10208
      ],
      "id": "53ccc394-60f8-49af-b417-1eab7deab67c",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=# Prompt para el Asistente de Logística de Bodegas\n\n## SISTEMA\nEres un asistente experto en logística de bodegas, especializado en comunicar información sobre citas de descarga de mercancía. Tu función ahora es:\n\n1. **Interpretar los resultados de la validación** que ya fue realizada por el nodo de código JavaScript.\n2. **Generar mensajes humanos, claros y amables** para comunicarse con los proveedores.\n3. **NO repetir el procesamiento de validación** ya que esto se hizo en el nodo de código anterior.\n4. **Mantener el formato de salida JSON** requerido por el sistema.\n\n## DETECCIÓN DE DATOS CONTRADICTORIOS\nSi detectas múltiples fechas/horas diferentes en el historial que contradicen el mensaje actual:\n- Identifica inconsistencias en los datos proporcionados\n- Prioriza SIEMPRE la información más reciente del usuario  \n- Si hay confusión excesiva (3+ cambios de fecha), marca como \"datos_contradictorios\"\n\n---\n### 📊 RESULTADOS DE LA VALIDACIÓN:\n```json\n{{ JSON.stringify($node[\"Code RECOLECCIÓN\"].json, null, 2) }}\n```\n\n### 📋 CATEGORÍAS DISPONIBLES (USAR SOLO ESTAS):\n```json\n{{ $items(\"Estructuración, Consulta, Datos Categorias\")[0].json.datoscategorias.map(cat => cat.CATEGORIA) }}\n```\n\n### 🧾 MENSAJE ACTUAL DEL PROVEEDOR:\n{{ $('Unificación y consistencia de datos').first().json.infoMensaje.mensajeActual }}\n\n### 🕓 FECHA Y HORA ACTUAL (BOGOTÁ, COLOMBIA):\n{{ new Date().toLocaleString(\"es-CO\", { timeZone: \"America/Bogota\", hour12: true }) }}\n\n### 📝 INSTRUCCIONES PARA GENERAR RESPUESTAS:\n\n**REGLA CRÍTICA PARA NOMBRES DE PROVEEDORES:**\n- Al mencionar el nombre del proveedor en el mensajeSistema, NUNCA agregues puntos, comas o signos de puntuación adicionales al final del nombre\n- El nombre del proveedor debe aparecer exactamente como está en la base de datos, sin modificaciones de puntuación\n- Ejemplo correcto: \"SPB COLOMBIA S.A.S\" (sin punto adicional)\n- Ejemplo incorrecto: \"SPB COLOMBIA S.A.S.\" (con punto adicional)\n\n#### 1. SI TODO ESTÁ CORRECTO (`todoCorrecto: true`):\n- Genera un mensaje confirmando que la cita ha sido registrada exitosamente.\n- Incluye todos los detalles identificados: proveedor completo, fecha, hora, categoría, peso, unidades, número de orden.\n- Usa un tono profesional y amable, agradeciendo por la información completa.\n- Ejemplo: \"He registrado tu cita para SPB COLOMBIA S.A.S el día 14 de abril a las 10:00 AM, categoría ARENAS, 300 kilos, 900 unidades con número de orden ARGM47896. Tu cita ha sido registrada con éxito.\"\n- IMPORTANTE: NO solicites confirmaciones innecesarias cuando todos los datos estén correctos.\n\n#### 2. SI HAY DATOS PREVIAMENTE CONFIRMADOS (`datosPreviamenteConfirmados: true`):\n- Genera un mensaje final confirmando que la cita ha sido registrada con éxito.\n- Incluye todos los detalles ya confirmados: proveedor, fecha, hora, etc.\n- Usa un tono de cierre, agradeciendo por la confirmación.\n- Ejemplo: \"¡Perfecto! He confirmado tu cita para SPB COLOMBIA S.A.S el día 14 de abril a las 10:00 AM. Tu cita ha sido registrada con éxito.\"\n\n#### 3. SI HAY PROVEEDORES SIMILARES QUE REQUIEREN CONFIRMACIÓN:\n- Cuando `proveedoresSimilares` no esté vacío, genera un mensaje pidiendo confirmación específica del proveedor.\n- Lista las opciones de proveedores de forma clara y ordenada.\n- Incluye los demás datos ya confirmados (fecha, hora, categoría, etc.).\n- Ejemplo: \"He identificado varios proveedores que coinciden con tu solicitud. Por favor, confirma cuál deseas usar:\\n- SPB COLOMBIA S.A.S\\n- SOPORTE PRODUCTIVO S.A.S.\\nLos demás datos de tu cita (14 de abril a las 10:00 AM, categoría ARENAS, 300 kilos, 900 unidades) ya están registrados.\"\n\n#### 4. SI HAY CATEGORÍAS SIMILARES QUE REQUIEREN CONFIRMACIÓN:\n- Cuando `categoriasSimilares` no esté vacío, genera un mensaje pidiendo confirmación específica de la categoría.\n- Lista las opciones de categorías de forma clara y ordenada.\n- Incluye los demás datos ya confirmados (proveedor, fecha, hora, etc.).\n\n#### 5. SI FALTAN CAMPOS OBLIGATORIOS:\n- Cuando `camposFaltantes` no esté vacío, genera un mensaje solicitando específicamente los campos faltantes.\n- **USA EL FORMATO AMIGABLE Y ESTRUCTURADO** con lista para cada campo faltante.\n- **IMPORTANTE: SIEMPRE usa las categorías del nodo de datos, NUNCA uses ejemplos hardcodeados**.\n- Proporciona ejemplos claros para cada campo.\n- Template de respuesta:\n```\nGracias por tu solicitud. Para poder agendar tu cita de entrega, necesito que me proporciones la siguiente información:\n[SI FALTA PROVEEDOR] • El nombre del proveedor (proporcionar el nombre lo más completo posible)\n[SI FALTA CATEGORÍA] • La categoría del material (los cuales pueden ser: {{ $items(\"Estructuración, Consulta, Datos Categorias\")[0].json.datoscategorias.map(cat => cat.CATEGORIA).map(cat => cat.toUpperCase()).join(', ') }})\n[SI FALTA FECHA] • La fecha de entrega (ejemplo: 25 de junio)\n[SI FALTA HORA] • La hora de entrega (ejemplo: 9:00 AM)\n[SI FALTA PESO] • El peso de la mercancía (ejemplo: 300 kilos)\n[SI FALTA UNIDADES] • La cantidad de unidades a descargar (ejemplo: 600 unidades)\n[SI FALTA ORDEN] • El número de orden de compra (ejemplo: ARGM47896)\n\nPor favor, proporciona estos datos para completar tu solicitud.\n```\n\n#### 6. NUEVAS VERIFICACIONES DE FECHA Y HORA:\n- Si `fechaValida` es `false` o `horaValida` es `false`, debes comunicar al usuario el problema específico.\n- Utiliza el mensaje que viene en `mensajeValidacionTemporal` para explicar el motivo del rechazo.\n- Solicita al usuario que proporcione una fecha u hora válida según corresponda.\n\n#### 7. SI LA FECHA SOLICITADA ES PARA UN DÍA NO HÁBIL:\n- Si `diaHabil` es `false`, debes informar al usuario que solo se pueden agendar citas en días hábiles (lunes a viernes).\n- Sugiere al usuario que elija una fecha en día hábil cercano.\n\n#### 8. SI EL NODO DE VALIDACIÓN DETECTÓ UNA FECHA \"MAÑANA\" PERO LA INTERPRETÓ INCORRECTAMENTE:\n- Si el mensaje actual contiene la palabra \"mañana\" pero la fecha validada no corresponde al día siguiente, debes corregirlo.\n- Verifica que, si el usuario dice \"mañana\", la fecha debe ser el día siguiente al actual.\n\n### ⚠️ REGLAS CRÍTICAS SOBRE CATEGORÍAS:\n\n1. **NUNCA uses categorías de ejemplo o hardcodeadas**. SIEMPRE obtén las categorías del nodo: {{ $items(\"Estructuración, Consulta, Datos Categorias\")[0].json.datoscategorias.map(cat => cat.CATEGORIA) }}\n\n2. **Para mostrar categorías en negrilla sin asteriscos visibles**, usa uno de estos formatos:\n   - En texto plano: simplemente lista las categorías en MAYÚSCULAS separadas por comas\n   - Con viñetas: usa el símbolo • antes de cada elemento\n\n3. **Elimina TODOS los ejemplos de categorías hardcodeadas** del prompt. Solo usa las categorías dinámicas.\n\n### ⚠️ OTRAS REGLAS IMPORTANTES:\n\n1. **NUNCA pidas confirmación cuando el nodo de código ya determinó que todo está correcto** (`todoCorrecto: true`).\n\n2. **NUNCA pidas confirmación para datos que ya fueron correctamente identificados**.\n\n3. **Usa un lenguaje humano, amable y natural**, evitando tecnicismos.\n\n4. **No repitas datos innecesariamente** ni hagas preguntas redundantes.\n\n5. **No permitas citas para el mismo día con menos de 2 horas de anticipación**.\n\n6. **Rechaza explícitamente las citas para días no hábiles** (fines de semana).\n\n7. **SIEMPRE obtén las categorías disponibles del nodo correspondiente**.\n\n### 📋 EJEMPLOS DE RESPUESTAS (IMPORTANTE: NO uses las categorías de estos ejemplos):\n\n#### EJEMPLO 1 - TODO CORRECTO:\n```json\n{\n  \"todoCorrecto\": true,\n  \"datosPreviamenteConfirmados\": false,\n  \"camposFaltantes\": [],\n  \"proveedoresSimilares\": [],\n  \"categoriasSimilares\": [],\n  \"fechaSolicitada\": \"14 de abril de 2025\",\n  \"horaSolicitada\": \"10:00 AM\",\n  \"mensajeSistema\": \"He registrado tu cita para [PROVEEDOR] el día [FECHA] a las [HORA], categoría [CATEGORÍA REAL DEL NODO], con un peso de [PESO] kilos y [UNIDADES] unidades. Tu número de orden de compra [ORDEN] ha sido registrado. Tu cita ha sido confirmada exitosamente.\",\n  \"mensajeEstado\": \"datos_completos\",\n  \"motivoRechazo\": \"\"\n}\n```\n\n#### EJEMPLO 2 - FALTA INFORMACIÓN COMPLETA:\n```json\n{\n  \"todoCorrecto\": false,\n  \"datosPreviamenteConfirmados\": false,\n  \"camposFaltantes\": [\"proveedor\", \"categoría\", \"fecha\", \"hora\", \"peso\", \"unidades\", \"orden de compra\"],\n  \"proveedoresSimilares\": [],\n  \"categoriasSimilares\": [],\n  \"fechaSolicitada\": \"\",\n  \"horaSolicitada\": \"\",\n  \"mensajeSistema\": \"Gracias por tu solicitud. Para poder agendar tu cita de entrega, necesito que me proporciones la siguiente información:\\n• El nombre del proveedor (proporcionar el nombre lo más completo posible)\\n• La categoría del material (los cuales pueden ser: [USAR CATEGORÍAS REALES DEL NODO])\\n• La fecha y hora de entrega (ejemplo: 25 de junio a las 9:00 AM)\\n• El peso de la mercancía (ejemplo: 300 kilos)\\n• La cantidad de unidades a descargar (ejemplo: 600 unidades)\\n• El número de orden de compra (ejemplo: ARGM47896)\\n\\nPor favor, proporciona estos datos para completar tu solicitud.\",\n  \"mensajeEstado\": \"datos_incompletos\",\n  \"motivoRechazo\": \"\"\n}\n```\n\n#### EJEMPLO 3 - DATOS CONTRADICTORIOS:\n```json\n{\n  \"todoCorrecto\": false,\n  \"datosPreviamenteConfirmados\": false,\n  \"camposFaltantes\": [],\n  \"proveedoresSimilares\": [],\n  \"categoriasSimilares\": [],\n  \"fechaSolicitada\": \"\",\n  \"horaSolicitada\": \"\",\n  \"mensajeSistema\": \"He detectado múltiples cambios en las fechas solicitadas. Para evitar confusiones, por favor proporciona todos los datos completos en un solo mensaje.\",\n  \"mensajeEstado\": \"datos_contradictorios\",\n  \"motivoRechazo\": \"Usuario ha proporcionado fechas contradictorias múltiples veces\"\n}\n```\n\n### 📤 FORMATO DE TU RESPUESTA:\nIMPORTANTE: Debes responder EXCLUSIVAMENTE en formato JSON con la siguiente estructura:\n\n```json\n{\n  \"todoCorrecto\": true | false,\n  \"datosPreviamenteConfirmados\": true | false,\n  \"camposFaltantes\": [\"campo1\", \"campo2\", ...],\n  \"proveedoresSimilares\": [\"Proveedor 1\", \"Proveedor 2\", ...],\n  \"categoriasSimilares\": [\"Categoría 1\", \"Categoría 2\", ...],\n  \"fechaSolicitada\": \"Fecha exacta que el proveedor solicitó\",\n  \"horaSolicitada\": \"Hora exacta que el proveedor solicitó\",\n  \"mensajeSistema\": \"Texto humano, amable y claro para el proveedor\",\n  \"mensajeEstado\": \"datos_completos\" | \"datos_incompletos\" | \"datos_contradictorios\",\n  \"motivoRechazo\": \"Descripción del motivo si aplica\"\n}\n```\n\nLa respuesta NO debe incluir explicaciones, razonamientos o texto adicional fuera del objeto JSON."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -40784,
        -10416
      ],
      "id": "b8d893e0-bcd1-4659-9ec1-93a7794acd33",
      "name": "Basic LLM Chain RECOLECCIÓN"
    },
    {
      "parameters": {
        "jsCode": "const rawText = $json.text;\n\n// Eliminar bloques ```json y otros caracteres extra si existen\nconst clean = rawText\n  .replace(/```json/g, '')\n  .replace(/```/g, '')\n  .trim();\n\nlet parsed;\ntry {\n  parsed = JSON.parse(clean);\n} catch (e) {\n  parsed = {\n    todoCorrecto: false,\n    camposFaltantes: [\"error_json\"],\n    mensajeSistema: \"Hubo un error al interpretar los datos del modelo IA.\"\n  };\n}\n\n// Detectar retractaciones y forzar reset\nif (parsed.mensajeEstado === \"datos_contradictorios\") {\n  return [{ \n    json: { \n      forzarReset: true, \n      mensaje: \"🔄 **Múltiples cambios detectados**\\n\\nPara evitar errores, proporciona todos los datos en un solo mensaje completo.\" \n    } \n  }];\n}\n\nreturn [{ json: parsed }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40432,
        -10416
      ],
      "id": "35cfd28b-9d95-4627-a6ff-cf284d1baf21",
      "name": "Code (Formatear JSON RECOLECCIÓN)"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Actualizar estado a CREANDO_CITA cuando se está procesando la creación de nueva cita\nUPDATE EstadoConversacional \nSET estado_actual = 'CREANDO_CITA', \n    contexto_proceso = '{{ JSON.stringify({\n        descripcion: \"Procesando creación de nueva cita\",\n        datos_cita: {\n            proveedor: $(\"Code Datos Insert Cita\").first().json.proveedor,\n            orden_compra: $(\"Code Datos Insert Cita\").first().json.orden_compra,\n            fecha: $(\"Code Datos Insert Cita\").first().json.fecha_cita,\n            hora_inicio: $(\"Code Datos Insert Cita\").first().json.hora_inicio,\n            muelle: $(\"Code Datos Insert Cita\").first().json.muelle\n        },\n        accion: \"creacion_en_proceso\",\n        timestamp: new Date().toISOString()\n    }) }}',\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $(\"Parametrización\").first().json.message.chat.id }}';\n\n-- Si no existe el registro, crear uno nuevo\nIF @@ROWCOUNT = 0\nBEGIN\n    INSERT INTO EstadoConversacional (chat_id, estado_actual, contexto_proceso, fecha_creacion, fecha_actualizacion)\n    VALUES (\n        '{{ $(\"Parametrización\").first().json.message.chat.id }}', \n        'CREANDO_CITA', \n        '{{ JSON.stringify({\n            descripcion: \"Procesando creación de nueva cita\",\n            datos_cita: {\n                proveedor: $(\"Code Datos Insert Cita\").first().json.proveedor,\n                orden_compra: $(\"Code Datos Insert Cita\").first().json.orden_compra,\n                fecha: $(\"Code Datos Insert Cita\").first().json.fecha_cita,\n                hora_inicio: $(\"Code Datos Insert Cita\").first().json.hora_inicio,\n                muelle: $(\"Code Datos Insert Cita\").first().json.muelle\n            },\n            accion: \"creacion_en_proceso\",\n            timestamp: new Date().toISOString()\n        }) }}',\n        GETDATE(),\n        GETDATE()\n    );\nEND\n\n-- Confirmar actualización\nSELECT \n  'CREANDO_CITA' as nuevo_estado,\n  'CREACION_EN_PROCESO' as tipo_actualizacion,\n  '{{ $(\"Parametrización\").first().json.message.chat.id }}' as chat_id,\n  GETDATE() as timestamp_actualizacion;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -37536,
        -9344
      ],
      "id": "a872a675-f748-4a86-894f-7cc00956aaba",
      "name": "Estado SQL - CREANDO_CITA",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9fb4ec76-c88a-4b6e-ac86-10bd802e5e8a",
              "leftValue": "={{ $json.todoCorrecto }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -40208,
        -10416
      ],
      "id": "80f99098-7e82-447e-b7f4-9e168fe8462d",
      "name": "IF Datos Completos"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Actualizar estado a SOLICITANDO_DATOS_CREAR cuando faltan datos para crear cita\nUPDATE EstadoConversacional \nSET estado_actual = 'SOLICITANDO_DATOS_CREAR', \n    contexto_proceso = '{\"descripcion\": \"Solicitando datos faltantes para crear nueva cita\", \"datos_requeridos\": [\"nombre\", \"orden_compra\", \"peso\", \"unidades\", \"fecha\", \"hora\"], \"accion\": \"recopilacion_datos\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $('Parametrización').first().json.message.chat.id }}';\n\n-- Si no existe el registro, crear uno nuevo\nIF @@ROWCOUNT = 0\nBEGIN\n    INSERT INTO EstadoConversacional (chat_id, estado_actual, contexto_proceso, fecha_creacion, fecha_actualizacion)\n    VALUES (\n        '{{ $('Parametrización').first().json.message.chat.id }}', \n        'SOLICITANDO_DATOS_CREAR', \n        '{\"descripcion\": \"Solicitando datos faltantes para crear nueva cita\", \"datos_requeridos\": [\"nombre\", \"orden_compra\", \"peso\", \"unidades\", \"fecha\", \"hora\"], \"accion\": \"recopilacion_datos\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n        GETDATE(),\n        GETDATE()\n    );\nEND\n\n-- Confirmar actualización\nSELECT \n  'SOLICITANDO_DATOS_CREAR' as nuevo_estado,\n  'RECOPILACION_DATOS' as tipo_actualizacion,\n  '{{ $('Parametrización').first().json.message.chat.id }}' as chat_id,\n  GETDATE() as timestamp_actualizacion;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -39856,
        -10208
      ],
      "id": "3d85aaa0-38a3-452e-b51a-87efcaed5d02",
      "name": "Estado SQL - SOLICITANDO_DATOS_CREAR",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    text: $('Code (Formatear JSON RECOLECCIÓN)').first().json.mensajeSistema\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39616,
        -10208
      ],
      "id": "f97b0912-41aa-49b8-9ae9-a1293fc6fcf3",
      "name": "Code Respuesta Faltantes"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "07f5d304-964c-4736-94aa-a05d439dcf6e",
              "name": "estadoConversacion",
              "value": "RECOLECCIÓN",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -39344,
        -10208
      ],
      "id": "2cf41316-bba4-447c-b3d2-064041cb1a19",
      "name": "Setear estado conversacional"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('Code Respuesta Faltantes').item.json.text.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -37568,
        -10144
      ],
      "id": "2aada700-7e05-4a9a-91ee-5f8b09077695",
      "name": "Validación de longitud de caracteres"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -37264,
        -10144
      ],
      "id": "e7c70c02-c11e-4629-ba81-5ce67d8a105f",
      "name": "Organiza variables del mensaje"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"partes\": [\n    \"Primera parte del mensaje\",\n    \"Segunda parte del mensaje (si aplica)\",\n    \"Tercera parte del mensaje (si aplica)\",\n    \"Cuarta parte del mensaje (si aplica)\",\n    \"Quinta parte del mensaje (si aplica)\"\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -15648,
        -3168
      ],
      "id": "42e610ed-eab0-4eeb-971d-b160e1bccda3",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -15856,
        -3168
      ],
      "id": "e4460a10-ae52-421e-9c94-254d04163c08",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -37088,
        -10352
      ],
      "id": "4cd44bce-8cd1-4f51-b5a9-cf30bf21f060",
      "name": "No Operation, do nothing2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -37264,
        -10352
      ],
      "id": "2455bc79-049e-47c1-a739-e0e7753df19c",
      "name": "HTTP Request Enviar Mensaje por WhatsApp"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.mensaje.ia }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Divide inteligentemente mensajes largos para WhatsApp preservando coherencia y legibilidad.\n\nANÁLISIS PREVIO:\n1. Identifica el tipo de contenido: confirmación de cita, cancelación, información, etc.\n2. Detecta estructura: párrafos naturales, listas, citas del cliente, respuestas del sistema\n3. Respeta SIEMPRE los saltos de línea existentes (\\\\n)\n\nREGLAS ESTRICTAS:\n\n📏 LÍMITES:\n- Si ≤1500 caracteres → NO dividir, devuelve el texto completo\n- Cada parte: 800-1500 caracteres (preferir ~1200)\n- Máximo 5 partes\n\n✂️ DÓNDE CORTAR (orden de prioridad):\n1. Entre bloques temáticos diferentes (ej: solicitud del cliente / respuesta del sistema)\n2. Después de párrafos completos (busca \\\\n\\\\n o doble salto)\n3. Después de puntos finales de oraciones\n4. PROHIBIDO cortar: en medio de oraciones, datos importantes, citas\n\n🔗 MANTENER SIEMPRE JUNTOS:\n- Solicitud completa del cliente con TODOS sus datos\n- Confirmación del sistema con detalles del muelle y horario\n- Advertencias o recordatorios importantes completos\n- Datos relacionados: fecha+hora+lugar+cantidades\n\n📝 FORMATO:\n- Preserva emojis, negritas (**), saltos de línea\n- NO agregues texto extra como \"Parte 1:\" o números\n- Si una idea continúa, termina con \"...\"\n- Si es continuación, empieza naturalmente\n\nEJEMPLO REAL DE BUENA DIVISIÓN:\n\nInput: \"Hola, deseo agendar una cita de entrega para el jueves 19, el nombre del proveedor es spb, categoría arenas, con un peso de 300 kilos, a las 6 de la mañana, 600 unidades, el número de orden de compra es ARGM47896\\\\n\\\\n¡Genial! Viendo el cronograma me registra que sí hay espacio para agendar esta cita, sería para el 19 de junio de 2025, desde las 06:00 AM hasta las 08:00 AM, ya que por la cantidad de unidades y peso en promedio va a tardar 2 horas el descargue en el MUELLE 1. El sistema pide una confirmación de tu parte para que la cita se genere en el cronograma, por favor responde confirmando la cita y recuerda que el sistema nos da 5 minutos para confirmar la cita o de lo contrario no se puede garantizar el cupo solicitado en el cronograma.\"\n\nOutput correcto:\n{\n  \"partes\": [\n    \"Hola, deseo agendar una cita de entrega para el jueves 19, el nombre del proveedor es spb, categoría arenas, con un peso de 300 kilos, a las 6 de la mañana, 600 unidades, el número de orden de compra es ARGM47896\\\\n\\\\n¡Genial! Viendo el cronograma me registra que sí hay espacio para agendar esta cita, sería para el 19 de junio de 2025, desde las 06:00 AM hasta las 08:00 AM, ya que por la cantidad de unidades y peso en promedio va a tardar 2 horas el descargue en el MUELLE 1.\",\n    \"El sistema pide una confirmación de tu parte para que la cita se genere en el cronograma, por favor responde confirmando la cita y recuerda que el sistema nos da 5 minutos para confirmar la cita o de lo contrario no se puede garantizar el cupo solicitado en el cronograma.\"\n  ]\n}\n\nRESPONDE SOLO EL JSON, sin explicaciones:\n{\n  \"partes\": [\"texto de cada parte\"]\n}\n\nTexto a dividir:\n{{ $json.mensaje.ia }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -15792,
        -3376
      ],
      "id": "8e949bbc-711c-41b0-be3e-bf10fb1625cb",
      "name": "Basic LLM Separación de Mensaje"
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.partes",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -15328,
        -3376
      ],
      "id": "7a044fc9-7388-46ee-a774-1fdabfdf83df",
      "name": "Split Out Separa el Mensaje"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -14992,
        -3376
      ],
      "id": "e5cb7170-afe7-464d-968d-a45078d280c8",
      "name": "Loop Over Items Recorre las Partes"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7e24e44a-14df-4559-b8f0-5a714b4e28ee",
              "name": "Mensaje",
              "value": "={{ $json['output.partes'] }}",
              "type": "string"
            },
            {
              "id": "9a3b644f-ccc6-4f2a-ac00-909990c06524",
              "name": "longitud",
              "value": "={{ $json['output.partes'].length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -14208,
        -3024
      ],
      "id": "3c1e2668-5f10-4978-b567-0a696fb1f971",
      "name": "Recuento de Caracteres"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.longitud }}",
                    "rightValue": 121,
                    "operator": {
                      "type": "number",
                      "operation": "lt"
                    },
                    "id": "b5afcf0e-93bb-4d29-9b45-faa775511ba5"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Corto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ddc297e5-bff7-4b9d-812d-9131fc251995",
                    "leftValue": "={{ $json.longitud }}",
                    "rightValue": 181,
                    "operator": {
                      "type": "number",
                      "operation": "lt"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Medio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "35e399f9-47fb-4402-8e74-17602592c599",
                    "leftValue": "={{ $json.longitud }}",
                    "rightValue": 182,
                    "operator": {
                      "type": "number",
                      "operation": "gte"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Largo"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -14000,
        -3024
      ],
      "id": "c3934c40-94dc-4969-8d87-3b6f0499ed9e",
      "name": "Switch"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $json.Mensaje }}"
            },
            {
              "name": "delay",
              "value": "={{3000}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -13696,
        -3280
      ],
      "id": "32019233-9d01-4406-b4f7-a0f80b7b6995",
      "name": "HTTP Request Enviar Mensaje por WhatsApp1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $json.Mensaje }}"
            },
            {
              "name": "delay",
              "value": "={{ 4000 }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -13696,
        -3056
      ],
      "id": "22e6e210-41b1-4b7e-b97c-0ae172f0f7fd",
      "name": "HTTP Request Enviar Mensaje por WhatsApp2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $json.Mensaje }}"
            },
            {
              "name": "delay",
              "value": "={{ 6000 }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -13696,
        -2864
      ],
      "id": "cccc7c70-0073-49e3-b768-8308185122a0",
      "name": "HTTP Request Enviar Mensaje por WhatsApp3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO MensajesWhatsApp (message_id, contenido, fecha, chat_id, instance)\nVALUES (\n  '{{ $('Parametrización').first().json.message.id }}',\n  '{{ $json.message.conversation.replace(/'/g, \"''\") }}',\n  FORMAT(SWITCHOFFSET(GETDATE(), '-05:00'), 'yyyy-MM-dd HH:mm:ss'),\n  'agenteAI',\n  '{{ $('Parametrización').first().json.message.chat.instance }}'\n);"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -13392,
        -3056
      ],
      "id": "d065d2ab-70ef-4749-9a1f-1572aa8d0308",
      "name": "Microsoft SQL",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO MensajesWhatsApp (message_id, contenido, fecha, chat_id, instance)\nVALUES (\n  '{{ $('Parametrización').first().json.message.id }}',\n  '{{ $json.message.conversation.replace(/'/g, \"''\") }}',\n  FORMAT(SWITCHOFFSET(GETDATE(), '-05:00'), 'yyyy-MM-dd HH:mm:ss'),\n  'agenteAI',\n  '{{ $('Parametrización').first().json.message.chat.instance }}'\n);"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -13392,
        -3280
      ],
      "id": "7a6fa419-80e1-4107-8e76-6bab2e295101",
      "name": "Microsoft SQL1",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO MensajesWhatsApp (message_id, contenido, fecha, chat_id, instance)\nVALUES (\n  '{{ $('Parametrización').first().json.message.id }}',\n  '{{ $json.message.conversation.replace(/'/g, \"''\") }}',\n  FORMAT(SWITCHOFFSET(GETDATE(), '-05:00'), 'yyyy-MM-dd HH:mm:ss'),\n  'agenteAI',\n  '{{ $('Parametrización').first().json.message.chat.instance }}'\n);"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -13392,
        -2864
      ],
      "id": "f2a051fe-1afc-4ab4-b02f-6b0abc4f87b1",
      "name": "Microsoft SQL2",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "amount": 0
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -13072,
        -2816
      ],
      "id": "60d425e1-cb7f-4427-942c-c4ecb0f526ca",
      "name": "Wait",
      "webhookId": "2d0cc5ee-b809-403d-8de5-06a71a8a40e9"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "ExcelMallaRecibido2025",
        "options": {
          "sheetName": "={{    (function() {     const semanaActual = $('Unificación y consistencia de datos').item.json.hojaSeleccionada;     const numeroSemana = parseInt(semanaActual.replace(\"SEMANA \", \"\"));     return `SEMANA ${numeroSemana + 1}`;   })() }}"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -42496,
        -10496
      ],
      "id": "61235da2-92ac-4f6c-980d-f9c85b001bab",
      "name": "Extract MALLA DE RECIBO Semana Siguiente",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Si el nodo anterior no devolvió datos (por error al no existir la hoja), retornamos estructura vacía con mensaje\n// Obtener los datos del Excel\nconst excelData = $input.all();\n\n// Mejora en la detección de errores: verificar si hay error explícito o si los datos no son válidos\nconst hayError = excelData.some(item => item.json && item.json.error);\nconst datosInvalidos = !excelData || excelData.length === 0 || hayError;\n\nif (datosInvalidos) {\n  return [{\n    datosMallaProxSemana: {\n      titulo: \"⚠️ La malla de la próxima semana no existe en el archivo Excel o aún no ha sido creada.\",\n      año: \"\",\n      semana: \"\",\n      rangoDias: \"\",\n      franjas: [],\n      dias: {\n        lunes: { muelle1: {}, muelle2: {} },\n        martes: { muelle1: {}, muelle2: {} },\n        miércoles: { muelle1: {}, muelle2: {} },\n        jueves: { muelle1: {}, muelle2: {} },\n        viernes: { muelle1: {}, muelle2: {} }\n      }\n    },\n    funciones: {\n      consultarFranjasDisponibles: \"function not available\",\n      consultarCitasProveedor: \"function not available\",\n      obtenerInfoMalla: \"function not available\",\n      estaDisponible: \"function not available\",\n      obtenerCoordenadasCita: \"function not available\"\n    }\n  }];\n}\n\n// El resto del código permanece igual...\nconst hojaSeleccionada = $('Unificación y consistencia de datos').first().json.hojaSeleccionada;\n\n// Definir estructura de la semana y los días\nconst diasSemana = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes'];\n\n// Objeto para almacenar la malla estructurada\nconst mallaEstructurada = {\n  titulo: \"\",\n  año: \"\",\n  semana: \"\",\n  rangoDias: \"\",\n  franjas: [],\n  dias: {}\n};\n\n// Tabla de meses y días. Ajusta si necesitas contemplar bisiestos, etc.\nconst meses = {\n  \"enero\": 1,\n  \"febrero\": 2,\n  \"marzo\": 3,\n  \"abril\": 4,\n  \"mayo\": 5,\n  \"junio\": 6,\n  \"julio\": 7,\n  \"agosto\": 8,\n  \"septiembre\": 9,\n  \"octubre\": 10,\n  \"noviembre\": 11,\n  \"diciembre\": 12\n};\n\nconst nombreMes = {\n  1: \"enero\",\n  2: \"febrero\",\n  3: \"marzo\",\n  4: \"abril\",\n  5: \"mayo\",\n  6: \"junio\",\n  7: \"julio\",\n  8: \"agosto\",\n  9: \"septiembre\",\n  10: \"octubre\",\n  11: \"noviembre\",\n  12: \"diciembre\"\n};\n\n/**\n * Función para determinar si un año es bisiesto\n * Un año es bisiesto si es divisible por 4, excepto aquellos divisibles por 100 \n * que no son divisibles por 400\n */\nfunction esBisiesto(year) {\n  return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n}\n\n/**\n * Función para obtener el número de días en un mes, considerando años bisiestos\n */\nfunction getDiasMes(mes, año) {\n  const diasPorMes = {\n    1: 31, // enero\n    2: esBisiesto(año) ? 29 : 28, // febrero - ajustado para año bisiesto\n    3: 31, // marzo\n    4: 30, // abril\n    5: 31, // mayo\n    6: 30, // junio\n    7: 31, // julio\n    8: 31, // agosto\n    9: 30, // septiembre\n    10: 31, // octubre\n    11: 30, // noviembre\n    12: 31  // diciembre\n  };\n  \n  return diasPorMes[mes];\n}\n\n/**\n * Función para eliminar acentos y pasar a minúsculas (para buscar palabras clave sin importar tildes ni mayúsculas).\n */\nfunction normalizarTexto(texto) {\n  if (typeof texto !== 'string') return \"\";\n  // Normaliza (NFD) y elimina diacríticos, luego pasa a minúsculas.\n  return texto\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\") // quita acentos\n    .toLowerCase();\n}\n\n/**\n * Dada la información de proveedor, ordenCompra, peso, categoría y unidades,\n * revisa si existe la palabra 'fuera de servicio', 'cancelado' o 'reagendado'\n * en cualquiera de esos campos. De ser así, retorna ese estado especial;\n * de lo contrario, retorna 'ocupado'.\n * \n * Se ignoran mayúsculas, minúsculas y tildes.\n */\nfunction determinarEstadoOcupado(proveedor, ordenCompra, peso, categoria, unidades) {\n  const conjunto = `${proveedor} ${ordenCompra} ${peso} ${categoria} ${unidades}`;\n  const texto = normalizarTexto(conjunto);\n\n  if (texto.includes(\"fuera de servicio\")) {\n    return \"fuera de servicio\";\n  }\n  if (texto.includes(\"cancelado\")) {\n    return \"cancelado\";\n  }\n  if (texto.includes(\"reagendado\")) {\n    return \"reagendado\";\n  }\n  return \"ocupado\";  \n}\n\n// -------------------------------------------------------------\n// 1) PROCESAR DATOS (Cabecera, Horas, Muelles, etc.)\n// -------------------------------------------------------------\nfunction procesarDatos(excelData) {\n  // Verificación adicional de datos válidos\n  if (!excelData || !Array.isArray(excelData) || excelData.length === 0) {\n    return {\n      titulo: \"⚠️ La malla de la próxima semana no existe en el archivo Excel o aún no ha sido creada.\",\n      año: \"\",\n      semana: \"\",\n      rangoDias: \"\",\n      franjas: [],\n      dias: {\n        lunes: { muelle1: {}, muelle2: {} },\n        martes: { muelle1: {}, muelle2: {} },\n        miércoles: { muelle1: {}, muelle2: {} },\n        jueves: { muelle1: {}, muelle2: {} },\n        viernes: { muelle1: {}, muelle2: {} }\n      }\n    };\n  }\n  \n  // Intentar mapear datos, con manejo de errores para cada item\n  const datos = excelData.map(item => {\n    try {\n      return item.json || {};\n    } catch (e) {\n      return {};\n    }\n  });\n  \n  // A) Cabecera (Título, Año, Rango)\n  datos.forEach((dato, index) => {\n    // Buscar título\n    if (dato.__EMPTY_2 === \"MALLA DE RECIBO CEDI KONFIE IA\") {\n      mallaEstructurada.titulo = dato.__EMPTY_2;\n      \n      // En la siguiente fila puede estar año, semana, rango\n      if (index + 1 < datos.length) {\n        const datoSiguiente = datos[index + 1];\n        if (datoSiguiente) {\n          // Año\n          if (datoSiguiente.__EMPTY_2 && !isNaN(datoSiguiente.__EMPTY_2)) {\n            mallaEstructurada.año = datoSiguiente.__EMPTY_2;\n          }\n          // Semana\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"SEMANA\")) {\n              mallaEstructurada.semana = v;\n            }\n          });\n          // Rango: p.ej. \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"LUNES\") && v.includes(\"VIERNES\")) {\n              mallaEstructurada.rangoDias = v;\n            }\n          });\n        }\n      }\n    }\n  });\n  \n  // Si después de procesar no encontramos título, es que no hay malla válida\n  if (!mallaEstructurada.titulo) {\n    mallaEstructurada.titulo = \"⚠️ La malla de la próxima semana no existe en el archivo Excel o aún no ha sido creada.\";\n    return mallaEstructurada;\n  }\n  \n  // B) Detectar franjas horarias (.__EMPTY = fracción de día)\n  const franjasHorarias = [];\n  datos.forEach(dato => {\n    if (\n      dato.__EMPTY !== undefined &&\n      typeof dato.__EMPTY === 'number' &&\n      dato.__EMPTY > 0 &&\n      dato.__EMPTY < 1\n    ) {\n      const totalMin = Math.round(dato.__EMPTY * 24 * 60);\n      const hh = Math.floor(totalMin / 60);\n      const mm = totalMin % 60;\n      \n      let periodo = \"AM\";\n      let hora12 = hh;\n      if (hh >= 12) {\n        periodo = \"PM\";\n        hora12 = (hh === 12 ? 12 : hh - 12);\n      }\n      if (hh === 0) {\n        hora12 = 12;\n      }\n      \n      const horaStr = `${hora12}:${String(mm).padStart(2, '0')} ${periodo}`;\n      franjasHorarias.push({\n        hora: horaStr,\n        indice: datos.indexOf(dato) // fila base\n      });\n    }\n  });\n  franjasHorarias.sort((a, b) => a.indice - b.indice);\n  mallaEstructurada.franjas = franjasHorarias;\n  \n  // C) Detectar muelles (col)\n  const muellesInfo = {};\n  datos.forEach(dato => {\n    Object.entries(dato).forEach(([key, value]) => {\n      if (value === \"MUELLE 01\" || value === \"MUELLE 02\") {\n        const col = parseInt(key.replace(\"__EMPTY_\", \"\"), 10);\n        const muelleKey = (value === \"MUELLE 01\") ? 'muelle1' : 'muelle2';\n        if (!muellesInfo[muelleKey]) {\n          muellesInfo[muelleKey] = [];\n        }\n        muellesInfo[muelleKey].push(col);\n      }\n    });\n  });\n  if (muellesInfo.muelle1) muellesInfo.muelle1.sort((a, b) => a - b);\n  if (muellesInfo.muelle2) muellesInfo.muelle2.sort((a, b) => a - b);\n  \n  // D) Generar los 5 días (lunes-viernes) con su fecha\n  parsearRangoDias();\n  \n  // E) Extraer Citas\n  extraerCitas(datos, muellesInfo);\n  \n  return mallaEstructurada;\n}\n\n/**\n * Parsea la cadena \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n * (o \"LUNES 31 AL VIERNES 04 DE ABRIL\") y maneja el cruce de mes.\n * Ej.: si dayStart=31 y dayEnd=4, la 1ª fecha es 31 de MARZO,\n * luego 1,2,3,4 de ABRIL, en vez de 32,33, etc.\n */\nfunction parsearRangoDias() {\n  const texto = mallaEstructurada.rangoDias;\n  // Regex simple: p.ej. \"31 AL ... 4 DE ABRIL\"\n  // Captura: dayStart, dayEnd, mesFin\n  // Ojo: si dice \"LUNES 31 DE MARZO AL VIERNES 4 DE ABRIL\",\n  // quedará: dayStart=31, dayEnd=4, month=ABRIL (al final).\n  const regex = /(\\d+)\\s+AL\\s+\\D+(\\d+)\\s+DE\\s+(\\w+)/i;\n  const match = regex.exec(texto);\n  \n  // Por defecto, creamos 5 días vacíos sin fecha\n  diasSemana.forEach(d => {\n    mallaEstructurada.dias[d] = {\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  if (!match) {\n    // Sin coincidencia, dejamos los días sin fecha\n    return;\n  }\n  \n  const dayStart = parseInt(match[1], 10); // 31\n  const dayEnd   = parseInt(match[2], 10); // 4\n  const finalMonthName = match[3].toLowerCase(); // \"abril\"\n  \n  // Convertimos a número\n  const finalMonth = meses[finalMonthName] || 3; // fallback marzo\n  const yearNum = parseInt(mallaEstructurada.año, 10) || 2025;\n  \n  // Función para obtener la fecha formateada\n  function fechaFormateada(d, m, y) {\n    return `${d} de ${nombreMes[m]} de ${y}`;\n  }\n  \n  // Comprobamos cuántos días tiene el mes final, considerando bisiestos\n  const diasMesFinal = getDiasMes(finalMonth, yearNum);\n  // y del mes previo\n  const monthPrev = (finalMonth === 1) ? 12 : finalMonth - 1;\n  const yearPrev = (finalMonth === 1) ? yearNum - 1 : yearNum;\n  \n  // Arreglo final con 5 fechas\n  const fechasDias = [];\n  \n  if (dayStart <= dayEnd) {\n    // Caso \"normal\": todo en el mismo mes\n    let d = dayStart;\n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: finalMonth,\n        yearNum: yearNum\n      });\n      d++;\n      if (d > diasMesFinal) {\n        d = 1;\n        const nextMonth = finalMonth % 12 + 1;\n        const nextYear = (nextMonth === 1) ? yearNum + 1 : yearNum;\n        fechasDias[fechasDias.length - 1].mesNum = nextMonth;\n        fechasDias[fechasDias.length - 1].yearNum = nextYear;\n      }\n    }\n  } else {\n    // Caso \"cruza de mes\": dayStart > dayEnd\n    let d = dayStart;\n    let m = monthPrev;\n    let y = yearPrev;\n    \n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: m,\n        yearNum: y\n      });\n      d++;\n      if (d > getDiasMes(m, y)) {\n        d = 1;\n        m = m % 12 + 1;\n        if (m === 1) {\n          y++;\n        }\n      }\n    }\n  }\n  \n  // Ahora volcamos esas 5 fechas en la estructura\n  fechasDias.forEach(fd => {\n    const { diaSem, diaNum, mesNum, yearNum } = fd;\n    mallaEstructurada.dias[diaSem] = {\n      fechaDia: fechaFormateada(diaNum, mesNum, yearNum),\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  // Inicializamos las franjas a 'disponible'\n  if (mallaEstructurada.franjas.length > 0) {\n    diasSemana.forEach(d => {\n      mallaEstructurada.franjas.forEach(f => {\n        mallaEstructurada.dias[d].muelle1[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n        mallaEstructurada.dias[d].muelle2[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n      });\n    });\n  }\n}\n\n/**\n * Función auxiliar: decide a qué día pertenece una columna,\n * corrigiendo 2 columnas de offset (porque 'Extract from XLSX'\n * deja todo desplazado).\n */\nfunction getDayForColumn(colNumber) {\n  // Ajuste de offset +2\n  const realCol = colNumber + 2;\n\n  // Rangos:\n  //  Lunes:      3..8\n  //  Martes:     9..14\n  //  Miércoles: 15..20\n  //  Jueves:    21..26\n  //  Viernes:   27..32\n  if (realCol >= 3 && realCol <= 8) {\n    return \"lunes\";\n  }\n  if (realCol >= 9 && realCol <= 14) {\n    return \"martes\";\n  }\n  if (realCol >= 15 && realCol <= 20) {\n    return \"miércoles\";\n  }\n  if (realCol >= 21 && realCol <= 26) {\n    return \"jueves\";\n  }\n  if (realCol >= 27 && realCol <= 32) {\n    return \"viernes\";\n  }\n  // Si nada coincide, devolvemos null\n  return null;\n}\n\n/**\n * Extraer las citas para cada franja:\n * - Para cada franja, miramos 3 filas:\n *    - Fila base => proveedor\n *    - Fila base+1 => orden\n *    - Fila base+2 => peso, categoría, unidades\n */\nfunction extraerCitas(datos, muellesInfo) {\n  mallaEstructurada.franjas.forEach(franja => {\n    const indiceBase = franja.indice;\n    if (indiceBase < 0 || indiceBase + 2 >= datos.length) {\n      return; // no hay suficientes filas\n    }\n    \n    // Recorremos muelle1, muelle2 y sus columnas\n    const asignarCita = (muelleKey, cols) => {\n      cols.forEach(col => {\n        const provKey = `__EMPTY_${col}`;\n        const filaProv = datos[indiceBase];\n        \n        // Si en esta fila hay un proveedor o algún texto\n        if (\n          filaProv &&\n          typeof filaProv[provKey] === 'string' &&\n          filaProv[provKey].length > 2\n        ) {\n          // Determinar el día real\n          const diaOk = getDayForColumn(col);\n          if (!diaOk || !mallaEstructurada.dias[diaOk]) {\n            return; // si no coincide con ninguno, saltamos\n          }\n          \n          // Recuperar valores para proveedor, ordenCompra y demás\n          const filaOrden = datos[indiceBase + 1];\n          const filaDet = datos[indiceBase + 2];\n          \n          const proveedor = filaProv[provKey] || \"\";\n          const ordenCompra = filaOrden && filaOrden[provKey] ? filaOrden[provKey] : \"\";\n          const peso = filaDet && filaDet[provKey] ? filaDet[provKey] : \"\";\n          const cat  = filaDet && filaDet[`__EMPTY_${col + 1}`] ? filaDet[`__EMPTY_${col + 1}`] : \"\";\n          const und  = filaDet && filaDet[`__EMPTY_${col + 2}`] ? filaDet[`__EMPTY_${col + 2}`] : \"\";\n          \n          // Antes poníamos estado=\"ocupado\" directamente\n          // Ahora verificamos si el texto contiene \"reagendado\", \"cancelado\" o \"fuera de servicio\".\n          const nuevoEstado = determinarEstadoOcupado(proveedor, ordenCompra, peso, cat, und);\n          \n          // Asignamos los datos\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].estado = nuevoEstado;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].proveedor = proveedor;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].ordenCompra = ordenCompra;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].peso = peso;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].categoria = cat;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].unidades = und;\n        }\n      });\n    };\n    \n    if (muellesInfo.muelle1) {\n      asignarCita('muelle1', muellesInfo.muelle1);\n    }\n    if (muellesInfo.muelle2) {\n      asignarCita('muelle2', muellesInfo.muelle2);\n    }\n  });\n}\n\n// -------------------------------------------------------------\n// 2) FUNCIONES PARA CONSULTAR LA MALLA\n// -------------------------------------------------------------\nfunction buscarFranjasDisponibles(categoria, duracionHoras) {\n  const muelle = \"muelle1\"; // Ajusta si usas \"categoria -> muelle\" real\n  \n  const franjasDisponibles = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const libres = [];\n    for (let i = 0; i <= mallaEstructurada.franjas.length - duracionHoras; i++) {\n      let disponible = true;\n      for (let h = 0; h < duracionHoras; h++) {\n        const idxF = i + h;\n        const horaAct = mallaEstructurada.franjas[idxF].hora;\n        if (\n          mallaEstructurada.dias[dia][muelle][horaAct].estado !== 'disponible'\n        ) {\n          disponible = false;\n          break;\n        }\n      }\n      if (disponible) {\n        libres.push({\n          horaInicio: mallaEstructurada.franjas[i].hora,\n          duracion: duracionHoras\n        });\n      }\n    }\n    if (libres.length > 0) {\n      franjasDisponibles.push({ dia, franjas: libres });\n    }\n  });\n  return franjasDisponibles;\n}\n\nfunction buscarCitasProveedor(nombreProveedor) {\n  const citas = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const muelle1 = mallaEstructurada.dias[dia].muelle1;\n    const muelle2 = mallaEstructurada.dias[dia].muelle2;\n    mallaEstructurada.franjas.forEach(f => {\n      const hora = f.hora;\n      // muelle1\n      if (normalizarTexto(muelle1[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 01\",\n          ordenCompra: muelle1[hora].ordenCompra,\n          peso: muelle1[hora].peso,\n          categoria: muelle1[hora].categoria,\n          unidades: muelle1[hora].unidades,\n          estado: muelle1[hora].estado\n        });\n      }\n      // muelle2\n      if (normalizarTexto(muelle2[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 02\",\n          ordenCompra: muelle2[hora].ordenCompra,\n          peso: muelle2[hora].peso,\n          categoria: muelle2[hora].categoria,\n          unidades: muelle2[hora].unidades,\n          estado: muelle2[hora].estado\n        });\n      }\n    });\n  });\n  return citas;\n}\n\nfunction consultarFranjasDisponibles(categoria, duracionHoras) {\n  return buscarFranjasDisponibles(categoria, duracionHoras);\n}\n\nfunction consultarCitasProveedor(nombreProveedor) {\n  return buscarCitasProveedor(nombreProveedor);\n}\n\nfunction obtenerInfoMalla() {\n  return {\n    titulo: mallaEstructurada.titulo,\n    año: mallaEstructurada.año,\n    semana: mallaEstructurada.semana,\n    rangoDias: mallaEstructurada.rangoDias,\n    franjas: mallaEstructurada.franjas.map(f => f.hora)\n  };\n}\n\nfunction estaDisponible(dia, hora, muelle) {\n  const info = mallaEstructurada.dias[dia]?.[muelle]?.[hora];\n  return info ? (info.estado === 'disponible') : false;\n}\n\nfunction obtenerCoordenadasCita(dia, hora, muelle) {\n  // Ajustar con tu mapeo de celdas en Excel\n  return {\n    proveedor: `${dia}_${hora}_${muelle}_proveedor`,\n    ordenCompra: `${dia}_${hora}_${muelle}_ordenCompra`,\n    peso: `${dia}_${hora}_${muelle}_peso`,\n    categoria: `${dia}_${hora}_${muelle}_categoria`,\n    unidades: `${dia}_${hora}_${muelle}_unidades`\n  };\n}\n\n// -------------------------------------------------------------\n// 3) EJECUTAR TODO Y RETORNAR\n// -------------------------------------------------------------\nconst malla = procesarDatos(excelData);\n\nconst resultado = {\n  datosMallaProxSemana: malla,\n  funciones: {\n    consultarFranjasDisponibles,\n    consultarCitasProveedor,\n    obtenerInfoMalla,\n    estaDisponible,\n    obtenerCoordenadasCita\n  }\n};\n\nreturn [resultado];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -42256,
        -10496
      ],
      "id": "6ff023ae-5ac3-4ac9-8958-eb4d307943fd",
      "name": "Estructuración, Datos, Consulta, Citas Proxima Semana"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -40544,
        -2112
      ],
      "id": "80e0d709-0692-4ddc-a88f-9bab71b9fed6",
      "name": "OpenAI Chat Model6",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=### SISTEMA - EXPERTO EN UX WHATSAPP\nEres un asistente experto en logística de bodegas para **Konfíe IA Logistics**, especializado en comunicación WhatsApp profesional. Tu tarea es responder consultas de disponibilidad utilizando formato UX excelente: *negritas*, emojis estratégicos, estructura visual clara y tono cordial profesional.\n\nDebes revisar cuidadosamente:\n- El mensaje actual del proveedor.\n- El historial de mensajes recientes.\n- El historial de citas del proveedor (si lo hay).\n- **IMPORTANTE: El día y la hora actual de la consulta.**\n\nY con base en eso, generar una respuesta que sea:\n- **Amable, empática, clara y conversacional.**\n- **Breve pero informativa**, explicando correctamente la disponibilidad general **según el momento de la consulta**.\n- Que explique que para ofrecer opciones reales y exactas se requiere **información clave**.\n- Que **invite de forma cordial** a compartir los datos necesarios para avanzar.\n- Que **aclare al proveedor que si desea agendar la cita**, esos datos son obligatorios.\n\n**NUEVO: Considera el día y la hora actual para determinar la disponibilidad general:**\n- **Entradas Requeridas (provistas por el sistema externo):**\n    - Hoy es `{{ new Date().toLocaleDateString(\"es-CO\", { timeZone: \"America/Bogota\", weekday: \"long\" }) }}`: Día de la semana actual (Lunes, Martes, Miércoles, Jueves, Viernes, Sábado, Domingo).\n    -La hora actual es `{{ new Date().toLocaleTimeString(\"es-CO\", { timeZone: \"America/Bogota\", hour: \"numeric\", minute: \"2-digit\", hour12: true }) }}`: Hora actual en formato HHMM (ej. 0900 para 9:00 AM, 1630 para 4:30 PM).\n- **Reglas de Disponibilidad General:**\n    - **Regla 1:** Si es **Lunes, Martes, Miércoles** O (es **Jueves** Y la hora es **antes de 1630**): Hay disponibilidad general para la semana **actual y la próxima**.\n    - **Regla 2:** Si (es **Jueves** Y la hora es **1630 o posterior**) O es **Viernes**: La disponibilidad general es solo para la **próxima semana**.\n    - **Regla 3:** Si es **Sábado o Domingo**: La disponibilidad general es solo para la **próxima semana**.\n\n---\n### MENSAJE ACTUAL DEL PROVEEDOR:\n{{ $node[\"Unificación y consistencia de datos\"].json[\"infoMensaje\"][\"mensajeActual\"] }}\n---\n### HISTORIAL DE MENSAJES:\n{{ $node[\"Unificación y consistencia de datos\"].json[\"infoMensaje\"][\"historialMensajes\"] }}\n---\n### 📆 HISTORIAL DE CITAS DEL PROVEEDOR:\n{{ $node[\"Unificación y consistencia de datos\"].json[\"infoMensajecita\"][\"historialCitas\"] }}\n---\n### CATEGORÍAS:\n```json\n{{ JSON.stringify($json.datoscategorias, null, 2) }}\n```\n\n## 🎯 OBJETIVO\nGenera una respuesta siguiendo estos pasos:\n\n### Saluda amablemente y explica la disponibilidad general APLICANDO LAS REGLAS de día/hora:\n\n- **Si aplica la Regla 1** (Lunes-Miércoles, Jueves < 16:30): Usa una frase como:\n  > ¡Hola! Gracias por escribirnos 😊. Te confirmo que tenemos disponibilidad general para agendar entregas tanto en la semana actual como en la próxima. Para poder mostrarte los horarios específicos y ayudarte a programar tu cita, necesito que me confirmes algunos datos clave.\n\n- **Si aplica la Regla 2** (Jueves >= 16:30, Viernes): Usa una frase adaptada al día.\n  - Si es Jueves tarde:\n    > ¡Hola! Gracias por escribirnos 😊. Te comento que, por la hora, la disponibilidad de citas ya es para la próxima semana. Para poder mostrarte los horarios específicos y ayudarte a programar tu cita, necesito que me confirmes algunos datos clave.\n  - Si es Viernes:\n    > ¡Hola! Gracias por escribirnos 😊. Te comento que, al ser hoy viernes, la disponibilidad de citas ya es para la próxima semana. Para poder mostrarte los horarios específicos y ayudarte a programar tu cita, necesito que me confirmes algunos datos clave.\n\n- **Si aplica la Regla 3** (Sábado, Domingo): Usa una frase como:\n  > ¡Hola! Gracias por escribirnos 😊. Ya que nos contactas en fin de semana, la disponibilidad de citas es a partir de la próxima semana. Para poder mostrarte los horarios específicos y ayudarte a programar tu cita, necesito que me confirmes algunos datos clave.\n\n### Después de la frase de disponibilidad, muestra en forma de mini lista amigable estructurada los datos requeridos para agendar:\n\n> 📝 Por favor indícame la siguiente información:\n> • Nombre del proveedor (En lo posible nombre completo y legible)\n> • Fecha deseada para la entrega (ej. 16 de abril)\n> • Hora de entrega (ej. 9:00 AM, 10:00 AM)\n> • Categoría del producto (puedes elegir entre las siguientes disponibles: {{ $json.datoscategorias.map(cat => cat.CATEGORIA).join(', ') }})\n> • Peso estimado en kilos\n> • Número de unidades (en número entero)\n> • Número de orden de compra\n\n### Cierra el mensaje con una frase amable que motive a continuar:\n\n> Con esta información, el sistema podrá mostrarte las franjas disponibles y ayudarte a agendar tu cita rápidamente. Estoy aquí para ayudarte en todo el proceso. 💪\n---\n### 📌 FORMATO DE RESPUESTA UX WHATSAPP\n\n**EJEMPLO CON FORMATO UX MEJORADO:**\n```\n👋 *¡Hola!* Gracias por contactarnos 😊\n\n✅ *Disponibilidad confirmada* para esta semana y la próxima.\n\nPara mostrarte *horarios específicos* y proceder con tu cita, necesito algunos datos:\n\n📝 *Información requerida:*\n• 👤 *Nombre del proveedor*\n• 📅 *Fecha deseada* (ej. 16 de abril)\n• ⏰ *Hora preferida* (ej. 9:00 AM)\n• 📦 *Categoría del producto*\n• ⚖️ *Peso estimado* (en kilos)\n• 📊 *Número de unidades*\n• 🏷️ *Orden de compra*\n\n🚀 Con estos datos te mostraré las *franjas disponibles* al instante.\n\n💬 ¿Tienes esta información lista?\n```\n\n**Respuesta JSON:**\n```json\n{\n  \"mensajeSistema\": \"Mensaje aplicando OBLIGATORIAMENTE formato WhatsApp UX con *negritas*, emojis estratégicos, estructura visual clara y tono profesional cordial según las reglas de disponibilidad.\"\n}\n```"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -40464,
        -2304
      ],
      "id": "c8499d54-5aef-4237-8056-5d2b8ea2bf5a",
      "name": "Basic LLM CONSULTAR MALLA"
    },
    {
      "parameters": {
        "url": "https://graph.microsoft.com/v1.0/drives/b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8/items/01PPLUUYTWY3753ZJ6ERAZ6LQBYUR2JOTY/content",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "MallaFija"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -44304,
        -2304
      ],
      "id": "dcc21445-4f23-4e15-aebc-c353c9dda722",
      "name": "HTTP Request Malla Fija1",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "MallaFija",
        "options": {
          "sheetName": "Categorias"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -41024,
        -2304
      ],
      "id": "3462d73b-d62b-4078-98d1-b13d8ee124a1",
      "name": "Extract from Categorias1"
    },
    {
      "parameters": {
        "jsCode": "// Obtener todos los items de la entrada\nconst items = $input.all();\nconst categorias = [];\n\n// Mapa para verificar categorías duplicadas\nconst categoriasMap = new Map();\n\n// Recorrer cada ítem de la entrada de categorías\nfor (const item of items) {\n  // Obtener los datos originales\n  const originalData = item.json;\n  \n  // Extraer categoría y muelle\n  const categoria = originalData.CATEGORIA || \"\";\n  const muelle = originalData.MUELLE || \"\";\n  \n  // Solo procesar si tanto la categoría como el muelle tienen valor\n  if (categoria && muelle) {\n    // Verificar si esta categoría ya existe en nuestro mapa\n    if (categoriasMap.has(categoria)) {\n      console.log(`Advertencia: La categoría \"${categoria}\" está duplicada. Se ignorará la segunda aparición.`);\n      continue; // Saltar este elemento\n    }\n    \n    // Agregar al mapa para control de duplicados\n    categoriasMap.set(categoria, muelle);\n    \n    // Agregar el objeto al array de categorías\n    categorias.push({\n      \"CATEGORIA\": categoria,\n      \"MUELLE\": muelle\n    });\n  } else {\n    console.log(`Advertencia: Elemento ignorado por falta de categoría o muelle: ${JSON.stringify(originalData)}`);\n  }\n}\n\n// Retornar un único objeto que contiene el array de categorías\n// dentro de un parámetro global llamado \"datoscategorias\"\nreturn [\n  {\n    json: {\n      datoscategorias: categorias\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40784,
        -2304
      ],
      "id": "ed30f0f6-0121-46ed-bf47-9de027aaa791",
      "name": "Estructuración, Consulta, Datos Categorias1"
    },
    {
      "parameters": {
        "jsCode": "// Obtener la respuesta generada por el LLM\nconst entrada = $input.item.json;\n\ntry {\n  // Extraer el bloque de texto generado\n  const texto = entrada.text;\n\n  // Buscar el contenido entre los delimitadores de bloque ```json\n  const match = texto.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n\n  if (match && match[1]) {\n    const jsonParsed = JSON.parse(match[1]);\n\n    return [\n      {\n        json: {\n          mensaje: jsonParsed.mensajeSistema || \"No se pudo obtener el mensaje.\"\n        }\n      }\n    ];\n  } else {\n    throw new Error(\"No se encontró contenido JSON en el texto.\");\n  }\n} catch (error) {\n  return [\n    {\n      json: {\n        mensaje: \"Ocurrió un error al procesar la respuesta del asistente: \" + error.message\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39728,
        -2304
      ],
      "id": "ed91628b-0ac9-4706-b0c0-d390f7d5f36f",
      "name": "Consistencia de datos, intención consultar malla"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b2110549-dd58-46b3-9707-dbbe0a5004f2",
              "leftValue": "={{ $('Consistencia de datos, intención consultar malla').item.json.mensaje.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -39504,
        -2304
      ],
      "id": "0773178f-2759-4380-b9e1-2df4eecedcba",
      "name": "Validación de longitud de caracteres1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -38960,
        -2384
      ],
      "id": "e66769ba-1804-4379-9b63-fd81a117fca3",
      "name": "No Operation, do nothing3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Consistencia de datos, intención consultar malla').item.json.mensaje }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -39152,
        -2384
      ],
      "id": "530ff4cf-d0b5-4852-bbd9-2b2d305c797e",
      "name": "HTTP Request Enviar Mensaje por WhatsApp4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Consistencia de datos, intención consultar malla').item.json.mensaje }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Consistencia de datos, intención consultar malla').item.json.mensaje.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -39152,
        -2192
      ],
      "id": "c96a380a-7137-45d0-8d26-40371ce5e9d4",
      "name": "Organiza variables del mensaje1"
    },
    {
      "parameters": {
        "jsCode": "// Estructura el mensaje generado por el modelo LLM (SALUDO)\n// Este nodo espera que el campo `text` contenga un JSON válido con una clave `mensajeSistema`,\n// incluso si viene envuelto entre comillas invertidas y etiquetas de bloque tipo ```json ... ```\n\nconst items = $('Basic LLM CONVERSACIÓN (SALUDO)').all();\nconst output = [];\n\nfor (const item of items) {\n  try {\n    let raw = item.json.text.trim();\n\n    // Elimina etiquetas de bloque Markdown ```json y ```\n    raw = raw.replace(/```json\\s*|```/g, '');\n\n    // Intenta parsear el contenido limpio como JSON\n    const respuesta = JSON.parse(raw);\n\n    output.push({\n      json: {\n        mensajeParaEnviar: respuesta.mensajeSistema || \"¡Hola! Soy tu asistente para gestión de citas en la bodega. ¿En qué puedo ayudarte?\",\n        tipo: \"saludo\",\n        accion: \"conversacion\",\n        origen: \"intencionSaludo\"\n      }\n    });\n\n  } catch (error) {\n    output.push({\n      json: {\n        error: true,\n        mensaje: \"Error al interpretar la respuesta del modelo LLM\",\n        detalle: error.message,\n        contenidoOriginal: item.json.text\n      }\n    });\n  }\n}\n\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -42224,
        -11632
      ],
      "id": "00da9f16-4c46-4cf6-bdd6-d93416b39b49",
      "name": "Estructuración, Consulta, Datos Categorias2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b2110549-dd58-46b3-9707-dbbe0a5004f2",
              "leftValue": "={{ $('Estructuración, Consulta, Datos Categorias2').item.json.mensajeParaEnviar.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -41952,
        -11632
      ],
      "id": "89c04a48-8cb9-4641-ba6b-293fae89b464",
      "name": "Validación de longitud de caracteres2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -41392,
        -11776
      ],
      "id": "aee6ecd0-aa38-45f9-9842-682ad7af2e54",
      "name": "No Operation, do nothing4"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Estructuración, Consulta, Datos Categorias2').item.json.mensajeParaEnviar }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -41584,
        -11776
      ],
      "id": "c8f1cdf2-972d-4c9b-99c7-6c90099f9b7d",
      "name": "HTTP Request Enviar Mensaje por WhatsApp5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Estructuración, Consulta, Datos Categorias2').item.json.mensajeParaEnviar }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Estructuración, Consulta, Datos Categorias2').item.json.mensajeParaEnviar.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -37120,
        -11648
      ],
      "id": "535784f8-9ad5-432a-8252-e5924300db60",
      "name": "Organiza variables del mensaje2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -38752,
        -10576
      ],
      "id": "26fd61cb-7104-4603-a4c2-585403cf7b3b",
      "name": "OpenAI Chat Model7",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=# SISTEMA\n\nEres un asistente experto en logística de bodegas, especializado en verificar disponibilidad de franjas horarias para citas de descarga de mercancía. Tu función es:\n\n1. **Utilizar los datos estructurados** proporcionados por el nodo anterior.\n2. **Validar y corregir posibles inconsistencias** en los datos recibidos.\n3. **Analizar la información del proveedor y sus características** (rotación, unidades por hora, etc.).\n4. **Verificar las franjas disponibles** y alternativas presentadas.\n5. **Generar un mensaje claro, amable y conversacional** informando el resultado de la verificación.\n6. **Presentar la respuesta en una estructura JSON específica** que será procesada por el siguiente nodo.\n\n---\n\n## 📌 DATOS DE ENTRADA (YA PROCESADOS):\n\n```json\n{{JSON.stringify($node[\"Code MOSTRAR_FRANJAS\"].json.output, null, 2)}}\n```\n\n## 🕓 FECHA Y HORA ACTUAL (BOGOTÁ, COLOMBIA):\n\n```\n{{new Date().toLocaleString(\"es-CO\", { timeZone: \"America/Bogota\", hour12: true })}}\n```\n\n## CANTIDAD DE FRAJAS DE LA MALLA DE LA SEMANA ACTUAL:\n\n```\n{{ $('Unificación y consistencia de datos1').item.json.datosMalla.franjas.length }}\n```\n\n## CANTIDAD DE FRAJAS DE LA MALLA DE LA PROXIMA SEMANA:\n\n```\n{{ $('Unificación y consistencia de datos1').item.json.datosMallaProxSemana.franjas.length }}\n```\n\n---\n\n## 🧮 VALIDACIÓN Y CORRECCIÓN DE DATOS DE ENTRADA:\n\n**Validaciones Generales:**\n\n- **Validar disponibilidadConfirmada:** Debe ser un booleano (true/false). Si es nulo o no está definido, asume false.\n- **Validar fecha:** Debe tener formato \"DD de mes de YYYY\". Si hay un formato diferente, mantenlo tal cual, pero asegúrate de generar un mensaje coherente.\n- **Validar horas:** Deben tener formato \"H:MM AM/PM\". Si hay formatos diferentes o inconsistentes entre horaInicio y horaFin, mantenlos tal cual pero genera un mensaje coherente.\n- **Validar duracionHoras:** Debe ser un número entero positivo. Si es decimal, redondea hacia arriba. Si falta, calcula aproximadamente basándote en horaInicio y horaFin.\n- **Validar muelle:** Debe ser \"MUELLE X\" donde X es un número. Si tiene otro formato, mantenlo tal cual.\n- **Validar alternativasDisponibles:** Debe ser un array. Si es nulo, conviértelo en array vacío [].\n- **Validar restriccionHoraSuperada:** Debe ser un booleano. Si es nulo, asume false.\n\nSi detectas errores graves en los datos de entrada (datos completamente faltantes o corruptos), genera un mensaje informando del problema y solicitando intentar nuevamente.\n\nSi se incluyen datos del proveedor, utilízalos para personalizar el mensaje mencionando el nombre del proveedor y sus características relevantes.\n\n---\n\n## 🗣️ REGLAS PARA LA REDACCIÓN DEL MENSAJE:\n\n**IMPORTANTE:** Siempre comunica claramente que la cita NO está confirmada aún, sino que hay disponibilidad para agendarla pero requiere confirmación del usuario para que se genere oficialmente en el cronograma.\n\n### Para citas disponibles (disponibilidadConfirmada = true) - FORMATO UX WHATSAPP OBLIGATORIO:\n\n**APLICAR FORMATO VISUAL:**\n- ✅ Inicia con emoji y expresión positiva: \"✅ *¡Excelente! Hay espacio disponible*\"\n- Usa *negritas* para información crítica: fechas, horarios, tiempo límite\n- Estructura la información con emojis y formato jerárquico\n- 📅 **Fecha:** formato destacado con emoji\n- ⏰ **Horario:** formato destacado (ej: *9:00 AM - 10:00 AM*)\n- 🚩 **Muelle:** destacado apropiadamente\n- ⏱️ **Tiempo estimado:** si hay duración, mostrar tiempo de descargue\n- 🔔 Especifica que se *requiere confirmación* para generar oficialmente\n- ⚠️ **CRÍTICO:** Destaca la *urgencia de 5 minutos* con formato visual llamativo\n- 👉 Solicitud clara de acción: \"*¿Confirmas esta cita?*\"\n\n**ESTRUCTURA VISUAL OBLIGATORIA:**\n\"✅ *¡Excelente! Hay espacio disponible*\n\n📅 *Fecha:* [fecha]\n⏰ *Horario:* [hora inicio] - [hora fin]\n🚩 *Muelle:* [muelle]\n⏱️ *Tiempo estimado:* [duración] de descargue\n\n🔔 Para que tu cita se *genere oficialmente* en el cronograma, necesito tu confirmación.\n\n⚠️ *IMPORTANTE:* Tienes *5 minutos* para confirmar o no podremos garantizar este espacio.\n\n👉 *¿Confirmas esta cita?*\"\n\n### Para citas con restricción de hora (restriccionHoraSuperada = true):\n\n- Explica amablemente la restricción (no agendar para el día siguiente después de 4:30 PM)\n- Presenta todas las alternativas organizadas por día\n- **MODIFICADO:** Muestra cada alternativa en una línea separada, con emojis numéricos (1️⃣, 2️⃣, 3️⃣, etc.) para cada opción\n- Especifica horas y muelle para cada alternativa\n- Agrega un salto de línea doble después de listar todas las alternativas\n- Precede la solicitud de confirmación con el emoji ✏️\n- Aclara que se necesita confirmación para apartar el espacio en el cronograma\n- Recuerda el límite de 5 minutos para confirmar\n\n### Para citas con restricción de hora (restriccionHoraSuperada = true):\n\n- Explica amablemente la restricción (no agendar para el día siguiente después de 4:30 PM)\n- Presenta todas las alternativas organizadas por día\n- **MODIFICADO:** Muestra cada alternativa en una línea separada, con emojis numéricos (1️⃣, 2️⃣, 3️⃣, etc.) para cada opción\n- Especifica horas y muelle para cada alternativa\n- Agrega un salto de línea doble después de listar todas las alternativas\n- Precede la solicitud de confirmación con el emoji ✏️\n- Aclara que se necesita confirmación para apartar el espacio en el cronograma\n- Recuerda el límite de 5 minutos para confirmar\n\n### Para citas no disponibles (disponibilidadConfirmada = false, restriccionHoraSuperada = false):\n\n**VERIFICA PRIMERO si es descarga sobredimensionada:**\n- Revisa el campo `descargaSobredimensionada` del objeto de entrada\n- Si `descargaSobredimensionada = true`, aplica el mensaje de \"descarga sobredimensionada\" (ver abajo) y NO muestres alternativas\n- Si `descargaSobredimensionada = false`, procede normalmente con las alternativas\n\n**Para descarga sobredimensionada (cuando descargaSobredimensionada = true):**\n- Informa que la franja solicitada no está disponible\n- Explica: **\"ya que la cantidad de mercancía que se intenta descargar excede un día entero de descargue\"**\n- **NO ofrezcas alternativas**\n- Recomienda contactar directamente con el área de logística\n- `disponibilidadConfirmada = false` y `alternativasDisponibles = []`\n\n**Para proceso normal (cuando descargaSobredimensionada = false):**\n- Lamenta que la franja solicitada no esté disponible\n- Presenta las alternativas después de un salto de línea doble\n- **MODIFICADO:** Muestra cada alternativa en una línea separada, con emojis numéricos (1️⃣, 2️⃣, 3️⃣, etc.) para cada opción\n- **MODIFICADO:** El formato exacto para cada alternativa debe ser: \"[emoji numérico] [fecha], de [horaInicio] a [horaFin] en el [muelle]\"\n- Agrega un salto de línea doble después de listar todas las alternativas\n- Precede la solicitud de confirmación con el emoji ✏️\n- Aclara que se necesita confirmación para apartar el espacio en el cronograma\n- Recuerda el límite de 5 minutos para confirmar\n\n\n\n### Para citas sin alternativas disponibles:\n\n- Si no hay alternativas, informa claramente la situación\n- Recomienda contactar directamente con el área de logística\n- Sugiere intentar en otro momento\n- Puedes apoyarte en tu respuesta a partir de la respuesta de la recolección de datos \"{{ $('Code RECOLECCIÓN').item.json.mensajeSistema }}\"\n\n### Personalización del mensaje:\n\n- Si tienes datos del proveedor, menciona su nombre\n- Si tienes información sobre las unidades a entregar, inclúyela para explicar el tiempo asignado\n- Si conoces la categoría del producto, utilízala para contextualizar\n\n### Tono y estilo:\n\n- Usa un tono conversacional, humano y cercano\n- Incluye frases como \"viendo el cronograma me registra que...\", \"por la cantidad de unidades y peso en promedio va a tardar...\"\n- Evita frases formales o rígidas como \"Se ha encontrado una franja disponible\"\n- Estructura el mensaje para que fluya naturalmente como una conversación\n\n### MODIFICADO - EJEMPLO DE FORMATO PARA ALTERNATIVAS (cuando disponibilidadConfirmada = false):\n\n\"Lamentablemente, la franja solicitada para el 06 de mayo de 2025, de 08:00 AM a 10:00 AM en el MUELLE 1 no está disponible. Sin embargo, tengo algunas alternativas para ti:\n\n1️⃣ 06 de mayo de 2025, de 6:00 AM a 8:00 AM en el MUELLE 1\n2️⃣ 06 de mayo de 2025, de 10:00 AM a 12:00 PM en el MUELLE 1\n3️⃣ 06 de mayo de 2025, de 11:00 AM a 1:00 PM en el MUELLE 1\n4️⃣ 06 de mayo de 2025, de 12:00 PM a 2:00 PM en el MUELLE 1\n\n✏️ Necesito tu confirmación para apartar el espacio en el cronograma, y recuerda que el sistema nos da 5 minutos para confirmar la cita o de lo contrario no se puede garantizar el cupo solicitado.\"\n\n---\n\n## 🧾 ESTRUCTURA DE SALIDA REQUERIDA\n\nDebes devolver una estructura JSON con exactamente estos campos:\n\n```json\n{\n  \"disponibilidadConfirmada\": boolean,\n  \"fecha\": string,\n  \"horaInicio\": string,\n  \"horaFin\": string,\n  \"muelle\": string,\n  \"duracionHoras\": number,\n  \"restriccionHoraSuperada\": boolean,\n  \"descargaSobredimensionada\": boolean,\n  \"alternativasDisponibles\": array,\n  \"mensajeSistema\": string\n}\n```\n\n---\n\n## ✅ VALIDACIONES FINALES ANTES DE ENVIAR LA RESPUESTA:\n\n- Verifica que todos los campos obligatorios estén presentes en tu respuesta.\n- Asegúrate de que los tipos de datos sean correctos (boolean para booleanos, string para texto, number para números, array para arreglos).\n- Comprueba que la estructura JSON sea válida y esté correctamente formateada.\n- Verifica que el campo `mensajeSistema` sea coherente con los demás campos (ej: si disponibilidadConfirmada=true, el mensaje debe indicar que hay espacio disponible pero requiere confirmación, NO que la cita ya está programada).\n- Asegúrate de que `alternativasDisponibles` sea un array, incluso si está vacío.\n- **MODIFICADO:** Verifica que cuando existen alternativas, cada una aparezca en su propia línea con el emoji numérico correspondiente.\n- **MODIFICADO:** Verifica que la solicitud de confirmación aparezca después de un salto de línea doble y precedida por el emoji ✏️.\n- Si utilizas caracteres especiales o saltos de línea en `mensajeSistema`, verifica que estén correctamente escapados en el JSON.\n- Revisa que el mensaje comunique claramente que la cita NO está confirmada aún.\n\n---\n\n## IMPORTANTE:\n\n- **NO uses bloques de código markdown** como ```json.\n- **NO agregues ningún texto** antes ni después.\n- **SOLO responde con un objeto JSON plano.**\n- El contenido debe empezar directamente con `{` y terminar con `}`.\n- El JSON debe cumplir con el siguiente formato y campos obligatorios:\n\n```json\n{\n  \"disponibilidadConfirmada\": boolean,\n  \"fecha\": string,\n  \"horaInicio\": string,\n  \"horaFin\": string,\n  \"muelle\": string,\n  \"duracionHoras\": number,\n  \"restriccionHoraSuperada\": boolean,\n  \"descargaSobredimensionada\": boolean,\n  \"alternativasDisponibles\": array,\n  \"mensajeSistema\": string\n}\n```\n\n---\n\n## EJEMPLO DE MENSAJE IDEAL PARA DISPONIBILIDAD CONFIRMADA (FORMATO UX WHATSAPP):\n\n\"✅ *¡Excelente! Hay espacio disponible*\n\n📅 *Fecha:* 15 de abril de 2025\n⏰ *Horario:* 9:00 AM - 12:00 PM\n🚩 *Muelle:* MUELLE 1\n⏱️ *Tiempo estimado:* 3 horas de descargue\n\n🔔 Para que tu cita se *genere oficialmente* en el cronograma, necesito tu confirmación.\n\n⚠️ *IMPORTANTE:* Tienes *5 minutos* para confirmar o no podremos garantizar este espacio.\n\n👉 *¿Confirmas esta cita?*\""
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -38672,
        -10768
      ],
      "id": "1498fd6e-f48b-4cf7-8410-7f0ff9573c88",
      "name": "Basic LLM Chain MOSTRAR_FRANJAS"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=### SISTEMA\nEres un asistente especializado en extraer datos de citas de entrega de mercancía a partir del historial de conversaciones entre un proveedor y un sistema de agendamiento. Tu función es:\n1. **Analizar el historial completo de mensajes** entre el proveedor y el sistema.\n2. **Identificar y extraer los datos finales validados** para la cita de entrega.\n3. **Estructurar estos datos** en un formato JSON claro y consistente para su procesamiento posterior.\n---\n### 🗂️ HISTORIAL DE MENSAJES:\n{{ $node[\"Unificación y consistencia de datos\"].json[\"infoMensaje\"][\"historialMensajes\"] }}\n\n### 📩 MENSAJE DE CONFIRMACIÓN DEL SISTEMA:\n{{ $json.mensajeSistema }}\n\n### 🕓 FECHA Y HORA ACTUAL (BOGOTÁ, COLOMBIA):\n{{ new Date().toLocaleString(\"es-CO\", { timeZone: \"America/Bogota\", hour12: true }) }}\n---\n### ✅ DATOS A EXTRAER:\n\n**REGLA CRÍTICA PARA NOMBRES DE PROVEEDORES:**\n- Al mencionar el nombre del proveedor en el mensajeSistema, NUNCA agregues puntos, comas o signos de puntuación adicionales al final del nombre\n- El nombre del proveedor debe aparecer exactamente como está en la base de datos, sin modificaciones de puntuación\n- Ejemplo correcto: \"SPB COLOMBIA S.A.S\" (sin punto adicional)\n- Ejemplo incorrecto: \"SPB COLOMBIA S.A.S.\" (con punto adicional)\n\n- **Nombre del proveedor**: El nombre validado y confirmado (debe ser el nombre exacto que aparece en los registros).\n- **Fecha de la cita**: La fecha validada para la entrega (en formato \"DD de [mes] de YYYY\").\n- **Hora de la cita**: La hora validada para la entrega (en formato estándar, ej. \"10:00 AM\").\n- **Categoría del producto**: La categoría validada y confirmada.\n- **Peso estimado**: El peso en kilos.\n- **Número de unidades**: La cantidad de unidades a entregar.\n- **Número de orden de compra**: El número de referencia para la orden.\n\n### 🔍 JERARQUÍA DE FUENTES DE DATOS:\n1. **PRIORIDAD ALTA**: Usa siempre el mensaje de confirmación del sistema (mensajeSistema) como fuente principal, ya que contiene los datos completamente validados, normalizados y oficiales.\n2. **PRIORIDAD MEDIA**: Si algún dato específico no está en el mensaje de confirmación del sistema, búscalo en los últimos mensajes del historial de conversación.\n3. **PRIORIDAD BAJA**: Solo como último recurso, usa los datos iniciales proporcionados por el usuario.\n\n### 🔄 ALGORITMO DE EXTRACCIÓN:\n1. **Primero, analiza el mensaje de confirmación del sistema** (mensajeSistema) ya que contiene los datos más precisos y validados.\n2. **Extrae de allí todos los datos disponibles**, prestando especial atención a:\n   - El nombre completo y oficial del proveedor (no abreviaturas)\n   - La categoría normalizada del producto\n   - Datos numéricos validados como peso y unidades\n3. **Solo si algún dato no está disponible en el mensaje de confirmación**, revisa el historial completo de mensajes para encontrarlo.\n4. **Estructura todos los datos obtenidos** en el formato JSON requerido.\n\n### 📌 RESPUESTA (EN FORMATO JSON VÁLIDO):\n```json\n{\n  \"proveedor\": \"Nombre exacto del proveedor validado\",\n  \"fecha\": \"DD de [mes] de YYYY\",\n  \"hora\": \"HH:MM AM/PM\",\n  \"categoria\": \"Categoría validada\",\n  \"peso\": 000,\n  \"unidades\": 000,\n  \"ordenCompra\": \"Código de la orden de compra\"\n}\n```\n\n**REGLAS IMPORTANTES**:\n1. **SIEMPRE prioriza los datos del mensaje de confirmación del sistema** sobre los datos proporcionados inicialmente por el usuario.\n2. **Para el nombre del proveedor y la categoría**, usa SIEMPRE la versión completa y normalizada que aparece en el mensaje de confirmación del sistema, ya que este contiene los nombres oficiales como están registrados en la base de datos.\n3. **Convierte todas las expresiones temporales** a fechas específicas (ej. \"mañana\" → \"15 de abril de 2025\").\n4. **Convierte valores numéricos** (peso, unidades) a formato numérico sin unidades (ej. \"300 kilos\" → 300).\n5. **Estandariza el formato de hora** (ej. \"10 de la mañana\" → \"10:00 AM\").\n\n**EJEMPLO DE EXTRACCIÓN CORRECTO**:\n**Mensaje del usuario**:\n```\n\"Hola, deseo agendar una cita de entrega para mañana, el nombre del proveedor es spb, categoría arenas, con un peso de 300 kilos, a las 9 de la mañana, 900 unidades, el número de orden de compra es ARGM47896.\"\n```\n\n**Mensaje de confirmación del sistema**:\n```\n\"He registrado tu cita para SPB COLOMBIA S.A.S el día 14 de abril a las 09:00 AM, categoría ARENAS, con un peso de 300 kilos y 900 unidades. Tu número de orden de compra ARGM47896 ha sido registrado. Tu cita ha sido confirmada exitosamente.\"\n```\n\n**Respuesta esperada**:\n```json\n{\n  \"proveedor\": \"SPB COLOMBIA S.A.S\",\n  \"fecha\": \"14 de abril de 2025\",\n  \"hora\": \"09:00 AM\",\n  \"categoria\": \"ARENAS\",\n  \"peso\": 300,\n  \"unidades\": 900,\n  \"ordenCompra\": \"ARGM47896\"\n}\n```\n\nIMPORTANTE: Tu tarea es SOLO extraer y estructurar los datos validados. No agregues explicaciones fuera del JSON requerido. Estos datos serán utilizados por otro nodo para verificar disponibilidad en las mallas de recibo.",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -39792,
        -10768
      ],
      "id": "821cf261-ee8e-4838-b963-982bfcd453cc",
      "name": "Basic LLM Chain EXTRACCIÓN_DATOS_CITA"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -39808,
        -10576
      ],
      "id": "9d403925-0639-4047-aaf1-a19ff04afdfc",
      "name": "OpenAI Chat Model8",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"proveedor\": \"string\",\n  \"fecha\": \"string\",\n  \"hora\": \"string\",\n  \"categoria\": \"string\",\n  \"peso\": 0,\n  \"unidades\": 0,\n  \"ordenCompra\": \"string\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -39584,
        -10512
      ],
      "id": "5f52485f-0705-41fe-8524-8d458bdd2901",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO MensajesWhatsApp (message_id, contenido, fecha, chat_id, instance)\nVALUES (\n  '{{ $('Parametrización').first().json.message.id }}',\n  '{{ JSON.stringify($node[\"Basic LLM Chain EXTRACCIÓN_DATOS_CITA\"].json.output, null, 2).replace(/'/g, \"''\") }}',\n  FORMAT(SWITCHOFFSET(GETDATE(), '-05:00'), 'yyyy-MM-dd HH:mm:ss'),\n  'agenteAI',\n  '{{ $('Parametrización').first().json.message.chat.instance }}'\n); "
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -39312,
        -10768
      ],
      "id": "76df8eb6-822e-45d3-a2fd-ce4f67c18000",
      "name": "Microsoft SQL Guardar EXTRACCIÓN_DATOS_CITA",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extraer directamente el texto JSON desde el nodo LLM\nlet textoPlano = $node[\"Basic LLM Chain MOSTRAR_FRANJAS\"].json.text;\n\nlet llmResponse;\ntry {\n  llmResponse = JSON.parse(textoPlano.trim());\n} catch (error) {\n  throw new Error(\"❌ No se pudo parsear el JSON generado por el modelo. Revisa el formato.\\nTexto recibido:\\n\" + textoPlano);\n}\n\n// Convertir formato de fecha a ISO (YYYY-MM-DD)\nlet fechaFormateada = llmResponse.fecha;\nif (fechaFormateada && fechaFormateada.includes(\"de\")) {\n  const meses = {\n    \"enero\": \"01\", \"febrero\": \"02\", \"marzo\": \"03\", \"abril\": \"04\",\n    \"mayo\": \"05\", \"junio\": \"06\", \"julio\": \"07\", \"agosto\": \"08\",\n    \"septiembre\": \"09\", \"octubre\": \"10\", \"noviembre\": \"11\", \"diciembre\": \"12\"\n  };\n\n  const partes = fechaFormateada.split(\" de \");\n  if (partes.length === 3) {\n    const dia = partes[0].padStart(2, \"0\");\n    const mes = meses[partes[1].toLowerCase()];\n    const año = partes[2];\n    fechaFormateada = `${año}-${mes}-${dia}`;\n  }\n}\n\n// Preparar objeto estandarizado\nlet standardResponse = {\n  disponibilidadConfirmada: llmResponse.disponibilidadConfirmada,\n  fecha: llmResponse.fecha,\n  fechaFormateada: fechaFormateada,\n  horaInicio: llmResponse.horaInicio,\n  horaFin: llmResponse.horaFin,\n  muelle: llmResponse.muelle,\n  duracionHoras: llmResponse.duracionHoras,\n  alternativasDisponibles: Array.isArray(llmResponse.alternativasDisponibles) \n    ? llmResponse.alternativasDisponibles \n    : [],\n  mensajeSistema: llmResponse.mensajeSistema,\n  datosCita: {\n    proveedor: $node[\"Basic LLM Chain EXTRACCIÓN_DATOS_CITA\"].json.output.proveedor,\n    categoria: $node[\"Basic LLM Chain EXTRACCIÓN_DATOS_CITA\"].json.output.categoria,\n    peso: $node[\"Basic LLM Chain EXTRACCIÓN_DATOS_CITA\"].json.output.peso,\n    unidades: $node[\"Basic LLM Chain EXTRACCIÓN_DATOS_CITA\"].json.output.unidades,\n    ordenCompra: $node[\"Basic LLM Chain EXTRACCIÓN_DATOS_CITA\"].json.output.ordenCompra\n  },\n  timestamp: new Date().toISOString()\n};\n\n// Normalizar hora (por si empieza con cero innecesario)\nstandardResponse.horaInicio = standardResponse.horaInicio.replace(/^0(\\d:00 [AP]M)$/, \"$1\");\n\nreturn { standardResponse };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -38224,
        -10768
      ],
      "id": "8b56663d-0b1c-462b-8adc-dd9e538aa5d7",
      "name": "Code estandarizar respuestas MOSTRAR_FRANJAS"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO FranjasDisponiblesTemp \n(chat_id, franjas_json, timestamp_enviado, datos_cita_json, fecha_cita, hora_inicio, hora_fin) \nVALUES \n(\n    '{{$node[\"Organiza el Mensaje\"].json[\"infoMensaje\"][\"chat_id\"]}}', \n    '{{JSON.stringify($node[\"Code estandarizar respuestas MOSTRAR_FRANJAS\"].json.standardResponse).replace(/'/g, \"''\")}}', \n    GETDATE(), \n    '{{JSON.stringify($node[\"Code estandarizar respuestas MOSTRAR_FRANJAS\"].json.standardResponse.datosCita)}}', \n    CONVERT(DATETIME, '{{$node[\"Code estandarizar respuestas MOSTRAR_FRANJAS\"].json.standardResponse.fechaFormateada}}'), \n    FORMAT(CAST('{{$node[\"Code estandarizar respuestas MOSTRAR_FRANJAS\"].json.standardResponse.horaInicio}}' AS DATETIME), 'HH:mm'), \n    FORMAT(CAST('{{$node[\"Code estandarizar respuestas MOSTRAR_FRANJAS\"].json.standardResponse.horaFin}}' AS DATETIME), 'HH:mm')\n);"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -37952,
        -10768
      ],
      "id": "4b01e162-83c2-4506-83a7-2867bba523bc",
      "name": "Microsoft SQL Guardar MOSTRAR_FRANJAS",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-disponibilidad-confirmada",
              "leftValue": "={{ $('Code estandarizar respuestas MOSTRAR_FRANJAS').item.json.standardResponse.disponibilidadConfirmada }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -37728,
        -10768
      ],
      "id": "c3338208-11bf-44a6-9efa-e66fa778dfb2",
      "name": "IF Disponibilidad Confirmada"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE EstadoConversacional \nSET estado_actual = 'ESPERANDO_CONFIRMACION_CREAR', \n    contexto_proceso = '{{ JSON.stringify({\n        descripcion: \"Esperando confirmación del usuario para crear la cita\",\n        disponibilidad_encontrada: true,\n        fecha_cita: $(\"Code estandarizar respuestas MOSTRAR_FRANJAS\").item.json.standardResponse.fecha,\n        hora_cita: $(\"Code estandarizar respuestas MOSTRAR_FRANJAS\").item.json.standardResponse.horaInicio,\n        muelle: $(\"Code estandarizar respuestas MOSTRAR_FRANJAS\").item.json.standardResponse.muelle,\n        timestamp: new Date().toISOString()\n    }) }}',\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $(\"Parametrización\").first().json.message.chat.id }}';\n\n-- Si no existe el registro, crear uno nuevo\nIF @@ROWCOUNT = 0\nBEGIN\n    INSERT INTO EstadoConversacional (chat_id, estado_actual, contexto_proceso, fecha_creacion, fecha_actualizacion)\n    VALUES (\n        '{{ $(\"Parametrización\").first().json.message.chat.id }}', \n        'ESPERANDO_CONFIRMACION_CREAR', \n        '{{ JSON.stringify({\n            descripcion: \"Esperando confirmación del usuario para crear la cita\",\n            disponibilidad_encontrada: true,\n            fecha_cita: $(\"Code estandarizar respuestas MOSTRAR_FRANJAS\").item.json.standardResponse.fecha,\n            hora_cita: $(\"Code estandarizar respuestas MOSTRAR_FRANJAS\").item.json.standardResponse.horaInicio,\n            muelle: $(\"Code estandarizar respuestas MOSTRAR_FRANJAS\").item.json.standardResponse.muelle,\n            timestamp: new Date().toISOString()\n        }) }}',\n        GETDATE(),\n        GETDATE()\n    );\nEND\n\n-- Confirmar actualización\nSELECT \n  'ESPERANDO_CONFIRMACION_CREAR' as nuevo_estado,\n  'DISPONIBILIDAD_CONFIRMADA' as tipo_actualizacion,\n  '{{ $(\"Parametrización\").first().json.message.chat.id }}' as chat_id,\n  GETDATE() as timestamp_actualizacion;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -37376,
        -10896
      ],
      "id": "76c1f31c-5f5d-434c-9ee8-731c766e9f77",
      "name": "Estado SQL - ESPERANDO_CONFIRMACION_CREAR",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE EstadoConversacional \nSET estado_actual = 'CONFIRMANDO_CANCELACION',\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $node[\"Organiza el Mensaje\"].json[\"infoMensaje\"][\"chat_id\"] }}'"
      },
      "id": "439253ba-b5f2-43ef-8a50-5ca351f9792b",
      "name": "Estado SQL - CONFIRMANDO_CANCELACION",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -39584,
        -5616
      ],
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE EstadoConversacional \nSET estado_actual = 'SOLICITANDO_DATOS_EDITAR',\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $node[\"Organiza el Mensaje\"].json[\"infoMensaje\"][\"chat_id\"] }}'"
      },
      "id": "c341f3b1-fa5c-4ec0-8de4-fcc6ae8a3f12",
      "name": "Estado SQL - SOLICITANDO_DATOS_EDITAR",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -43744,
        -6704
      ],
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Actualizar estado a ESPERANDO_CONFIRMACION_EDITAR cuando se presentan opciones para editar\nUPDATE EstadoConversacional \nSET estado_actual = 'ESPERANDO_CONFIRMACION_EDITAR', \n    contexto_proceso = '{\"descripcion\": \"Esperando confirmación de reprogramación\", \"opciones_presentadas\": true, \"accion\": \"confirmacion_edicion\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $('Parametrización').first().json.message.chat.id }}';\n\n-- Si no existe el registro, crear uno nuevo\nIF @@ROWCOUNT = 0\nBEGIN\n    INSERT INTO EstadoConversacional (chat_id, estado_actual, contexto_proceso, fecha_creacion, fecha_actualizacion)\n    VALUES (\n        '{{ $('Parametrización').first().json.message.chat.id }}', \n        'ESPERANDO_CONFIRMACION_EDITAR', \n        '{\"descripcion\": \"Esperando confirmación de reprogramación\", \"opciones_presentadas\": true, \"accion\": \"confirmacion_edicion\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n        GETDATE(),\n        GETDATE()\n    );\nEND\n\n-- Confirmar actualización\nSELECT \n  'ESPERANDO_CONFIRMACION_EDITAR' as nuevo_estado,\n  'ESPERANDO_CONFIRMACION_EDICION' as tipo_actualizacion,\n  '{{ $('Parametrización').first().json.message.chat.id }}' as chat_id,\n  GETDATE() as timestamp_actualizacion;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -43280,
        -6704
      ],
      "id": "b61d94f6-1724-4e26-9ec3-6b80a41b32f8",
      "name": "Estado SQL - ESPERANDO_CONFIRMACION_EDITAR",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Actualizar estado a EDITANDO_CITA durante el procesamiento de edición\nUPDATE EstadoConversacional \nSET estado_actual = 'EDITANDO_CITA', \n    contexto_proceso = '{\"descripcion\": \"Procesando reprogramación de cita existente\", \"accion\": \"editando_cita\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $('Parametrización').first().json.message.chat.id }}';\n\n-- Si no existe el registro, crear uno nuevo\nIF @@ROWCOUNT = 0\nBEGIN\n    INSERT INTO EstadoConversacional (chat_id, estado_actual, contexto_proceso, fecha_creacion, fecha_actualizacion)\n    VALUES (\n        '{{ $('Parametrización').first().json.message.chat.id }}', \n        'EDITANDO_CITA', \n        '{\"descripcion\": \"Procesando reprogramación de cita existente\", \"accion\": \"editando_cita\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n        GETDATE(),\n        GETDATE()\n    );\nEND\n\n-- Confirmar actualización\nSELECT \n  'EDITANDO_CITA' as nuevo_estado,\n  'PROCESANDO_EDICION_CITA' as tipo_actualizacion,\n  '{{ $('Parametrización').first().json.message.chat.id }}' as chat_id,\n  GETDATE() as timestamp_actualizacion;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -37232,
        -7856
      ],
      "id": "c56c7bd4-bb0b-402f-bf55-ac37af4c9a72",
      "name": "Estado SQL - EDITANDO_CITA",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Actualizar estado a CONFIRMANDO_FRANJA cuando usuario selecciona opción de franjas\nUPDATE EstadoConversacional \nSET estado_actual = 'CONFIRMANDO_FRANJA', \n    contexto_proceso = '{\"descripcion\": \"Seleccionando franja de opciones disponibles\", \"alternativas_presentadas\": true, \"accion\": \"confirmacion_franja\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $('Parametrización').first().json.message.chat.id }}';\n\n-- Si no existe el registro, crear uno nuevo\nIF @@ROWCOUNT = 0\nBEGIN\n    INSERT INTO EstadoConversacional (chat_id, estado_actual, contexto_proceso, fecha_creacion, fecha_actualizacion)\n    VALUES (\n        '{{ $('Parametrización').first().json.message.chat.id }}', \n        'CONFIRMANDO_FRANJA', \n        '{\"descripcion\": \"Seleccionando franja de opciones disponibles\", \"alternativas_presentadas\": true, \"accion\": \"confirmacion_franja\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n        GETDATE(),\n        GETDATE()\n    );\nEND\n\n-- Confirmar actualización\nSELECT \n  'CONFIRMANDO_FRANJA' as nuevo_estado,\n  'SELECCIONANDO_FRANJA_ALTERNATIVA' as tipo_actualizacion,\n  '{{ $('Parametrización').first().json.message.chat.id }}' as chat_id,\n  GETDATE() as timestamp_actualizacion;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -43760,
        -8928
      ],
      "id": "48565169-1811-4890-b785-ee43ca72aa32",
      "name": "Estado SQL - CONFIRMANDO_FRANJA",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Actualizar estado a RESPONDIENDO_PREGUNTA cuando se maneja pregunta general\nUPDATE EstadoConversacional \nSET estado_actual = 'RESPONDIENDO_PREGUNTA', \n    contexto_proceso = '{\"descripcion\": \"Respondiendo pregunta general del usuario\", \"tipo_pregunta\": \"general\", \"accion\": \"respondiendo_pregunta\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $('Parametrización').first().json.message.chat.id }}';\n\n-- Si no existe el registro, crear uno nuevo\nIF @@ROWCOUNT = 0\nBEGIN\n    INSERT INTO EstadoConversacional (chat_id, estado_actual, contexto_proceso, fecha_creacion, fecha_actualizacion)\n    VALUES (\n        '{{ $('Parametrización').first().json.message.chat.id }}', \n        'RESPONDIENDO_PREGUNTA', \n        '{\"descripcion\": \"Respondiendo pregunta general del usuario\", \"tipo_pregunta\": \"general\", \"accion\": \"respondiendo_pregunta\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n        GETDATE(),\n        GETDATE()\n    );\nEND\n\n-- Confirmar actualización\nSELECT \n  'RESPONDIENDO_PREGUNTA' as nuevo_estado,\n  'PROCESANDO_PREGUNTA_GENERAL' as tipo_actualizacion,\n  '{{ $('Parametrización').first().json.message.chat.id }}' as chat_id,\n  GETDATE() as timestamp_actualizacion;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -42832,
        -1712
      ],
      "id": "d482313b-600f-4eb4-90aa-ad410f35f7bc",
      "name": "Estado SQL - RESPONDIENDO_PREGUNTA",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE EstadoConversacional \nSET estado_actual = 'CONSULTANDO_DISPONIBILIDAD',\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $node[\"Organiza el Mensaje\"].json[\"infoMensaje\"][\"chat_id\"] }}'"
      },
      "id": "7e28f808-c760-47aa-9cb1-a735260a333d",
      "name": "Estado SQL - CONSULTANDO_DISPONIBILIDAD",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -40000,
        -2304
      ],
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Código para verificar disponibilidad de franjas horarias en n8n\n// — versión corregida 2025-06-17 — Busca por fecha exacta en fechaDia\n\n// Función ejecutada por el nodo Code\nfunction procesarVerificacionFranjas(items, runIndex) {\n  try {\n    // 0. Entradas provenientes de los nodos anteriores\n    const datosCita            = $node[\"Basic LLM Chain EXTRACCIÓN_DATOS_CITA\"].json.output;     // datos de la cita\n    const datosMalla           = $node[\"Unificación y consistencia de datos1\"].json.datosMalla;   // malla semana actual\n    const datosMallaProxSemana = $node[\"Unificación y consistencia de datos1\"].json.datosMallaProxSemana;\n    const datoscategorias      = $node[\"Unificación y consistencia de datos1\"].json.datoscategorias;\n    const datosproveedor       = $node[\"Unificación y consistencia de datos1\"].json.datosproveedor;\n\n    // 1. Agrupamos todo en un solo objeto\n    const datosEntrada = {\n      datosCita,\n      datosMalla,\n      datosMallaProxSemana,\n      datoscategorias,\n      datosproveedor\n    };\n\n    // 2. Ejecutamos la verificación\n    const resultado = verificarDisponibilidadFranjas(datosEntrada);\n\n    // 3. Devolvemos la salida en el formato que n8n espera\n    return [{ json: resultado }];\n  } catch (error) {\n    console.error(\"Error en procesamiento principal:\", error);\n    return [{ json: { error: error.message || \"Error en el procesamiento\" } }];\n  }\n}\n\n/* ════════════════════════════════════════════════════════════════════════\n *  FUNCIÓN PRINCIPAL DE VERIFICACIÓN\n * ════════════════════════════════════════════════════════════════════════ */\nfunction verificarDisponibilidadFranjas(datosEntrada) {\n  try {\n    console.log(`🚀 ===== INICIANDO VERIFICACIÓN DE DISPONIBILIDAD =====`);\n    \n    /* ─────────────────────────── 1. DATOS BÁSICOS ─────────────────────────── */\n    const {\n      datosCita,\n      datosMalla:        mallaActual,\n      datosMallaProxSemana: mallaProxima,\n      datoscategorias:   categorias,\n      datosproveedor:    proveedores\n    } = datosEntrada;\n\n    const fechaHoraActual = new Date();\n\n    const proveedor       = datosCita.proveedor   || \"\";\n    const fechaSolicitada = datosCita.fecha       || \"\";\n    const horaSolicitada  = datosCita.hora        || \"\";\n    const categoria       = datosCita.categoria   || \"\";\n    const unidades        = Number.parseInt(String(datosCita.unidades || \"0\"), 10);\n    \n    console.log(`📋 DATOS EXTRAÍDOS DE LA CITA:`);\n    console.log(`  Proveedor: \"${proveedor}\"`);\n    console.log(`  Fecha solicitada: \"${fechaSolicitada}\"`);\n    console.log(`  Hora solicitada: \"${horaSolicitada}\"`);\n    console.log(`  Categoría: \"${categoria}\"`);\n    console.log(`  Unidades: ${unidades}`);\n\n    /* Validaciones mínimas */\n    if (!proveedor)       return { error: \"Proveedor no especificado\" };\n    if (!fechaSolicitada) return { error: \"Fecha no especificada\" };\n    if (!horaSolicitada)  return { error: \"Hora no especificada\" };\n    if (!categoria)       return { error: \"Categoría no especificada\" };\n    if (Number.isNaN(unidades) || unidades <= 0) return { error: \"Cantidad de unidades inválida\" };\n\n    /* ────────────────────────── 2. PROVEEDOR ─────────────────────────────── */\n    const datosProveedor = buscarProveedor(proveedores, proveedor);\n    if (!datosProveedor) {\n      return { error: `No se encontró el proveedor \"${proveedor}\" en la base de datos` };\n    }\n\n    const unidadesPorHora = datosProveedor.unidadesPorHora;\n    if (!unidadesPorHora || unidadesPorHora <= 0) {\n      return { error: `El proveedor \"${proveedor}\" no tiene definidas unidades por hora válidas` };\n    }\n\n    /* ────────────────────────── 3. CÁLCULOS BÁSICOS ───────────────────────── */\n    const horasNecesarias = Math.ceil(unidades / unidadesPorHora);\n    const restriccionHoraSuperada = verificarRestriccionHoraCitaManana(fechaHoraActual, fechaSolicitada);\n\n    /* ────────────────────────── 4. VALIDACIÓN DESCARGA SOBREDIMENSIONADA ─────────── */\n    // Determinar qué malla usar para obtener el número de franjas disponibles\n    let cantidadFranjasDiarias = 0;\n    \n    // Buscar en qué malla está la fecha solicitada para obtener el número de franjas\n    const resultadoBusquedaMalla = buscarDiaPorFechaExacta(fechaSolicitada, mallaActual, mallaProxima);\n    if (resultadoBusquedaMalla && resultadoBusquedaMalla.malla && resultadoBusquedaMalla.malla.franjas) {\n      cantidadFranjasDiarias = resultadoBusquedaMalla.malla.franjas.length;\n    } else {\n      // Fallback: usar la malla actual si no se puede determinar\n      cantidadFranjasDiarias = mallaActual.franjas ? mallaActual.franjas.length : 8;\n    }\n    \n    // Verificar si la descarga es sobredimensionada\n    const descargaSobredimensionada = horasNecesarias > cantidadFranjasDiarias;\n    console.log(`Validación descarga sobredimensionada: horasNecesarias=${horasNecesarias}, cantidadFranjasDiarias=${cantidadFranjasDiarias}, sobredimensionada=${descargaSobredimensionada}`);\n\n    /* ────────────────────────── 5. HORA NORMALIZADA ──────────────────────── */\n    const horaNormalizada = horaSolicitada.trim();\n\n    /* ────────────────────────── 5. MUELLE POR CATEGORÍA ──────────────────── */\n    const muelleAsignado = determinarMuellePorCategoria(categorias, categoria);\n    if (!muelleAsignado) {\n      return { error: `No se encontró un muelle asignado para la categoría \"${categoria}\"` };\n    }\n\n    /* ────────────────────────── 6. DISPONIBILIDAD / ALTERNATIVAS ─────────── */\n    let resultado;\n\n    if (restriccionHoraSuperada) {\n      // Caso: contactaron después de las 4:30 p.m. y la cita es para mañana\n      const alternativas = buscarAlternativasDesdeDosDiasDespues(\n        fechaHoraActual,\n        mallaActual,\n        mallaProxima,\n        muelleAsignado,\n        horasNecesarias\n      );\n\n      resultado = {\n        disponibilidadConfirmada: false,\n        fecha:           fechaSolicitada,\n        horaInicio:      horaNormalizada,\n        horaFin:         calcularHoraFin(horaNormalizada, horasNecesarias),\n        muelle:          muelleAsignado,\n        duracionHoras:   horasNecesarias,\n        restriccionHoraSuperada: true,\n        descargaSobredimensionada: descargaSobredimensionada,\n        alternativasDisponibles: alternativas.slice(0, 10)\n      };\n    } else {\n      const disponible = verificarDisponibilidadHoraSolicitada(\n        fechaSolicitada,\n        horaNormalizada,\n        muelleAsignado,\n        horasNecesarias,\n        mallaActual,\n        mallaProxima\n      );\n\n      if (disponible) {\n        resultado = {\n          disponibilidadConfirmada: true,\n          fecha:           fechaSolicitada,\n          horaInicio:      horaNormalizada,\n          horaFin:         calcularHoraFin(horaNormalizada, horasNecesarias),\n          muelle:          muelleAsignado,\n          duracionHoras:   horasNecesarias,\n          restriccionHoraSuperada: false,\n          descargaSobredimensionada: descargaSobredimensionada,\n          alternativasDisponibles: []\n        };\n      } else {\n        const alternativasMismoDia = buscarAlternativasMismoDia(\n          fechaSolicitada,\n          muelleAsignado,\n          horasNecesarias,\n          mallaActual,\n          mallaProxima\n        );\n\n        const todasAlternativas = alternativasMismoDia.length > 0\n          ? alternativasMismoDia\n          : buscarAlternativasDiasPeriores(\n              fechaSolicitada,\n              muelleAsignado,\n              horasNecesarias,\n              mallaActual,\n              mallaProxima\n            );\n\n        resultado = {\n          disponibilidadConfirmada: false,\n          fecha:           fechaSolicitada,\n          horaInicio:      horaNormalizada,\n          horaFin:         calcularHoraFin(horaNormalizada, horasNecesarias),\n          muelle:          muelleAsignado,\n          duracionHoras:   horasNecesarias,\n          restriccionHoraSuperada: false,\n          descargaSobredimensionada: descargaSobredimensionada,\n          alternativasDisponibles: todasAlternativas\n        };\n      }\n    }\n\n    /* ────────────────────────── 7. DATOS PROVEEDOR ───────────────────────── */\n    resultado.datosProveedorEncontrado = {\n      nombre:           datosProveedor.proveedor,\n      unidadesPorHora:  datosProveedor.unidadesPorHora,\n      rotacion:         datosProveedor.rotacion,\n      tipoProveedor:    datosProveedor.tipoProveedor\n    };\n\n    return { output: resultado };\n  } catch (error) {\n    console.error(\"Error en verificación de disponibilidad:\", error);\n    return { error: `Error en la verificación: ${error.message}` };\n  }\n}\n\n/* ════════════════════════════════════════════════════════════════════════\n *  FUNCIONES DE APOYO\n * ════════════════════════════════════════════════════════════════════════ */\n\n// (1) Búsqueda de proveedor\nfunction buscarProveedor(listaProveedores, nombreProveedor) {\n  if (!Array.isArray(listaProveedores) || listaProveedores.length === 0) return null;\n  if (!nombreProveedor) return null;\n\n  const nombreLower = nombreProveedor.toLowerCase();\n  const exacta  = listaProveedores.find(p => (p.proveedor || \"\").toLowerCase() === nombreLower);\n  if (exacta) return exacta;\n\n  return listaProveedores.find(p => (p.proveedor || \"\").toLowerCase().includes(nombreLower));\n}\n\n// (2) Normalizador de hora para comparaciones\nfunction limpiarHora(h) {\n  return h ? h.trim().replace(/^0+/, \"\").toUpperCase() : \"\";\n}\n\n// (3) Determinar muelle por categoría\nfunction determinarMuellePorCategoria(categorias, categoriaProducto) {\n  if (!Array.isArray(categorias) || categorias.length === 0) return null;\n  const catLower = categoriaProducto.toLowerCase();\n\n  const exacta = categorias.find(c => (c.CATEGORIA || \"\").toLowerCase() === catLower);\n  if (exacta) return exacta.MUELLE;\n\n  const parcial = categorias.find(c => (c.CATEGORIA || \"\").toLowerCase().includes(catLower));\n  return parcial ? parcial.MUELLE : null;\n}\n\n// (4) Calcular hora de fin\nfunction calcularHoraFin(horaInicio, horasNecesarias) {\n  if (!horaInicio) return \"\";\n  const [horaTxt, meridiano] = horaInicio.trim().split(\" \");\n  let hora = parseInt(horaTxt, 10);\n  if (meridiano === \"PM\" && hora < 12) hora += 12;\n  if (meridiano === \"AM\" && hora === 12) hora = 0;\n  hora += horasNecesarias;\n  let nuevoMeridiano = \"AM\";\n  if (hora >= 12) {\n    nuevoMeridiano = \"PM\";\n    if (hora > 12) hora -= 12;\n  }\n  if (hora === 0) { hora = 12; nuevoMeridiano = \"AM\"; }\n  return `${hora}:00 ${nuevoMeridiano}`;\n}\n\n// (5) Restricción 4:30 p.m. → cita mañana (CORREGIDO - ZONA HORARIA)\nfunction verificarRestriccionHoraCitaManana(fechaHoraActual, fechaSolicitada) {\n  // 1. Obtener la fecha y hora actual en la zona horaria de Bogotá.\n  //    Esto es CRUCIAL para que la comparación de las 4:30 PM funcione correctamente\n  //    independientemente de la zona horaria del servidor.\n  const ahoraEnBogota = new Date(new Date().toLocaleString(\"en-US\", { timeZone: \"America/Bogota\" }));\n\n  // 2. Verificar si la hora actual en Bogotá es después de las 4:30 PM.\n  const horaBogota = ahoraEnBogota.getHours();\n  const minutosBogota = ahoraEnBogota.getMinutes();\n  const esDespuesDe430PM = horaBogota > 16 || (horaBogota === 16 && minutosBogota >= 30);\n\n  // 3. Parsear la fecha que el usuario solicitó.\n  const fechaSolicitadaObj = parsearFechaEspanol(fechaSolicitada);\n  if (!fechaSolicitadaObj || isNaN(fechaSolicitadaObj.getTime())) {\n    console.error(\"Fecha solicitada inválida:\", fechaSolicitada);\n    return false;\n  }\n\n  // 4. Calcular la fecha de \"mañana\" basándose en la fecha actual de Bogotá.\n  const fechaManana = new Date(ahoraEnBogota);\n  fechaManana.setDate(fechaManana.getDate() + 1);\n  \n  // 5. Comparar si la fecha solicitada es efectivamente \"mañana\".\n  //    Se compara año, mes y día para evitar problemas con horas.\n  const esMañana = fechaSolicitadaObj.getFullYear() === fechaManana.getFullYear() &&\n                   fechaSolicitadaObj.getMonth() === fechaManana.getMonth() &&\n                   fechaSolicitadaObj.getDate() === fechaManana.getDate();\n\n  // 6. La restricción se aplica solo si AMBAS condiciones son verdaderas.\n  return esMañana && esDespuesDe430PM;\n}\n\n\n// (6) Parsear fecha \"30 de abril de 2025\"\nfunction parsearFechaEspanol(fechaTexto) {\n  const [dia, , mesTxt, , anio] = fechaTexto.split(\" \");\n  return new Date(Number(anio), obtenerNumeroMes(mesTxt), Number(dia));\n}\n\n// (7) Obtener número de mes\nfunction obtenerNumeroMes(nombreMes) {\n  const meses = [\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"];\n  return meses.indexOf(nombreMes.toLowerCase());\n}\n\n// (7.5) FUNCIÓN: Normalizar fecha flexible - Interpreta CUALQUIER formato de fecha\n// ===================== INICIO DE LA SECCIÓN CORREGIDA =====================\nfunction normalizarFechaFlexible(fechaInput) {\n  if (!fechaInput) return \"\";\n  \n  let fecha = fechaInput.toString().trim().toLowerCase();\n  \n  const mesesMap = {\n    \"enero\": \"enero\", \"ene\": \"enero\", \"1\": \"enero\",\n    \"febrero\": \"febrero\", \"feb\": \"febrero\", \"2\": \"febrero\", \n    \"marzo\": \"marzo\", \"mar\": \"marzo\", \"3\": \"marzo\",\n    \"abril\": \"abril\", \"abr\": \"abril\", \"4\": \"abril\",\n    \"mayo\": \"mayo\", \"may\": \"mayo\", \"5\": \"mayo\",\n    \"junio\": \"junio\", \"jun\": \"junio\", \"6\": \"junio\",\n    \"julio\": \"julio\", \"jul\": \"julio\", \"7\": \"julio\",\n    \"agosto\": \"agosto\", \"ago\": \"agosto\", \"8\": \"agosto\",\n    \"septiembre\": \"septiembre\", \"sep\": \"septiembre\", \"sept\": \"septiembre\", \"9\": \"septiembre\",\n    \"octubre\": \"octubre\", \"oct\": \"octubre\", \"10\": \"octubre\",\n    \"noviembre\": \"noviembre\", \"nov\": \"noviembre\", \"11\": \"noviembre\",\n    \"diciembre\": \"diciembre\", \"dic\": \"diciembre\", \"12\": \"diciembre\"\n  };\n  \n  let dia, mes, anio;\n  const anioActual = new Date().getFullYear();\n  \n  console.log(`🔧 Normalizando fecha flexible: \"${fechaInput}\" → entrada limpia: \"${fecha}\"`);\n  \n  // PATRÓN 1: \"05 de agosto de 2025\" o \"5 de agosto de 2025\"\n  let match = fecha.match(/(\\d{1,2})\\s*de\\s*(\\w+)\\s*de\\s*(\\d{4})/);\n  if (match) {\n    dia = parseInt(match[1]);\n    mes = mesesMap[match[2]] || match[2];\n    anio = parseInt(match[3]);\n    console.log(`✅ Patrón \"DD de MMMM de YYYY\": dia=${dia}, mes=${mes}, anio=${anio}`);\n    return `${dia} de ${mes} de ${anio}`;\n  }\n  \n  // PATRÓN 2: \"05 agosto 2025\" o \"5 agosto 2025\"\n  match = fecha.match(/(\\d{1,2})\\s+(\\w+)\\s+(\\d{4})/);\n  if (match) {\n    dia = parseInt(match[1]);\n    mes = mesesMap[match[2]] || match[2];\n    anio = parseInt(match[3]);\n    console.log(`✅ Patrón \"DD MMMM YYYY\": dia=${dia}, mes=${mes}, anio=${anio}`);\n    return `${dia} de ${mes} de ${anio}`;\n  }\n  \n  // PATRÓN 3: \"05 de agosto\" o \"5 de agosto\" (año actual)\n  match = fecha.match(/(\\d{1,2})\\s*de\\s*(\\w+)/);\n  if (match) {\n    dia = parseInt(match[1]);\n    mes = mesesMap[match[2]] || match[2];\n    anio = anioActual;\n    console.log(`✅ Patrón \"DD de MMMM\": dia=${dia}, mes=${mes}, anio=${anio} (año actual)`);\n    return `${dia} de ${mes} de ${anio}`;\n  }\n  \n  // PATRÓN 4: \"05 agosto\" o \"5 agosto\" (año actual)\n  match = fecha.match(/(\\d{1,2})\\s+(\\w+)/);\n  if (match && mesesMap[match[2]]) {\n    dia = parseInt(match[1]);\n    mes = mesesMap[match[2]];\n    anio = anioActual;\n    console.log(`✅ Patrón \"DD MMMM\": dia=${dia}, mes=${mes}, anio=${anio} (año actual)`);\n    return `${dia} de ${mes} de ${anio}`;\n  }\n  \n  // PATRÓN 5: \"05-08-2025\" o \"5-8-2025\"\n  match = fecha.match(/(\\d{1,2})-(\\d{1,2})-(\\d{4})/);\n  if (match) {\n    dia = parseInt(match[1]);\n    const numeroMes = parseInt(match[2]);\n    const mesesArray = [\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"];\n    mes = mesesArray[numeroMes - 1] || \"enero\";\n    anio = parseInt(match[3]);\n    console.log(`✅ Patrón \"DD-MM-YYYY\": dia=${dia}, mes=${mes}, anio=${anio}`);\n    return `${dia} de ${mes} de ${anio}`;\n  }\n  \n  // PATRÓN 6: \"05-08\" o \"5-8\" (año actual)\n  match = fecha.match(/(\\d{1,2})-(\\d{1,2})/);\n  if (match) {\n    dia = parseInt(match[1]);\n    const numeroMes = parseInt(match[2]);\n    const mesesArray = [\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"];\n    mes = mesesArray[numeroMes - 1] || \"enero\";\n    anio = anioActual;\n    console.log(`✅ Patrón \"DD-MM\": dia=${dia}, mes=${mes}, anio=${anio} (año actual)`);\n    return `${dia} de ${mes} de ${anio}`;\n  }\n  \n  // PATRÓN 7: \"05/08/2025\" o \"5/8/2025\"\n  match = fecha.match(/(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/);\n  if (match) {\n    dia = parseInt(match[1]);\n    const numeroMes = parseInt(match[2]);\n    const mesesArray = [\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"];\n    mes = mesesArray[numeroMes - 1] || \"enero\";\n    anio = parseInt(match[3]);\n    console.log(`✅ Patrón \"DD/MM/YYYY\": dia=${dia}, mes=${mes}, anio=${anio}`);\n    return `${dia} de ${mes} de ${anio}`;\n  }\n  \n  // PATRÓN 8: \"05/08\" o \"5/8\" (año actual)\n  match = fecha.match(/(\\d{1,2})\\/(\\d{1,2})/);\n  if (match) {\n    dia = parseInt(match[1]);\n    const numeroMes = parseInt(match[2]);\n    const mesesArray = [\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"];\n    mes = mesesArray[numeroMes - 1] || \"enero\";\n    anio = anioActual;\n    console.log(`✅ Patrón \"DD/MM\": dia=${dia}, mes=${mes}, anio=${anio} (año actual)`);\n    return `${dia} de ${mes} de ${anio}`;\n  }\n  \n  // PATRÓN 9: Solo número \"5\" (asumir mes actual)\n  match = fecha.match(/^(\\d{1,2})$/);\n  if (match) {\n    dia = parseInt(match[1]);\n    const mesActual = new Date().getMonth();\n    const mesesArray = [\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"];\n    mes = mesesArray[mesActual];\n    anio = anioActual;\n    console.log(`✅ Patrón \"DD solo\": dia=${dia}, mes=${mes} (mes actual), anio=${anio} (año actual)`);\n    return `${dia} de ${mes} de ${anio}`;\n  }\n  \n  console.log(`❌ No se pudo normalizar la fecha: \"${fechaInput}\"`);\n  return fechaInput;\n}\n// ===================== FIN DE LA SECCIÓN CORREGIDA =====================\n\n// (8) NUEVA FUNCIÓN: Buscar día por fecha exacta en todas las mallas\nfunction buscarDiaPorFechaExacta(fechaSolicitada, mallaActual, mallaProxima) {\n  console.log(`🔍 BUSCANDO FECHA EXACTA: \"${fechaSolicitada}\"`);\n  \n  const mallas = [\n    { malla: mallaActual, nombre: \"actual\" },\n    { malla: mallaProxima, nombre: \"proxima\" }\n  ];\n\n  for (const { malla, nombre } of mallas) {\n    console.log(`  📋 Revisando malla \"${nombre}\"`);\n    \n    if (!malla) {\n      console.log(`    ❌ Malla \"${nombre}\" es nula`);\n      continue;\n    }\n    \n    if (!malla.dias) {\n      console.log(`    ❌ Malla \"${nombre}\" no tiene días`);\n      continue;\n    }\n    \n    console.log(`    ✅ Malla \"${nombre}\" tiene ${Object.keys(malla.dias).length} días`);\n\n    // Recorrer todos los días de la malla\n    for (const [nombreDia, datosDia] of Object.entries(malla.dias)) {\n      if (!datosDia) {\n        console.log(`      ⚠️ Día \"${nombreDia}\" tiene datos nulos`);\n        continue;\n      }\n      \n      // NORMALIZAR AMBAS FECHAS PARA COMPARACIÓN FLEXIBLE\n      const fechaMallaNormalizada = normalizarFechaFlexible(datosDia.fechaDia || \"\");\n      const fechaSolicitadaNormalizada = normalizarFechaFlexible(fechaSolicitada);\n      \n      console.log(`      🗓️ Comparando día \"${nombreDia}\": fechaDia=\"${datosDia.fechaDia}\" (norm: \"${fechaMallaNormalizada}\") vs fechaSolicitada=\"${fechaSolicitada}\" (norm: \"${fechaSolicitadaNormalizada}\")`);\n      \n      if (fechaMallaNormalizada === fechaSolicitadaNormalizada) {\n        console.log(`      🎉 FECHA ENCONTRADA! Día \"${nombreDia}\" en malla \"${nombre}\"`);\n        return {\n          malla: malla,\n          nombreDia: nombreDia,\n          datosDia: datosDia,\n          mallaUsada: nombre\n        };\n      }\n    }\n    \n    console.log(`    ❌ Fecha \"${fechaSolicitada}\" NO encontrada en malla \"${nombre}\"`);\n  }\n\n  console.log(`❌ Fecha \"${fechaSolicitada}\" NO encontrada en NINGUNA malla`);\n  return null;\n}\n\n// (9) Verificar disponibilidad de la hora solicitada (NUEVA LÓGICA)\nfunction verificarDisponibilidadHoraSolicitada(\n  fechaSolicitada,\n  horaSolicitada,\n  muelle,\n  horasNecesarias,\n  mallaActual,\n  mallaProxima\n) {\n  try {\n    console.log(`🔍 INICIANDO VERIFICACIÓN DE DISPONIBILIDAD`);\n    console.log(`  Fecha solicitada: \"${fechaSolicitada}\"`);\n    console.log(`  Hora solicitada: \"${horaSolicitada}\"`);\n    console.log(`  Muelle: \"${muelle}\"`);\n    console.log(`  Horas necesarias: ${horasNecesarias}`);\n\n    /* ── Buscar el día por fecha exacta ── */\n    console.log(`🔍 Buscando fecha exacta: \"${fechaSolicitada}\"`);\n    const resultadoBusqueda = buscarDiaPorFechaExacta(fechaSolicitada, mallaActual, mallaProxima);\n    \n    if (!resultadoBusqueda) {\n      console.log(`❌ No se encontró la fecha \"${fechaSolicitada}\" en ninguna malla`);\n      return false;\n    }\n\n    const { malla, nombreDia, datosDia } = resultadoBusqueda;\n    console.log(`✅ Fecha encontrada en malla. Día: \"${nombreDia}\", fechaDia: \"${datosDia.fechaDia}\"`);\n\n    /* ── Verificar muelle ── */\n    const nombreMuelle = muelle.toLowerCase().replace(/\\s+/g, \"\"); // \"MUELLE 1\" → \"muelle1\"\n    console.log(`🔍 Transformando muelle: \"${muelle}\" → \"${nombreMuelle}\"`);\n    \n    if (!datosDia[nombreMuelle]) {\n      console.log(`❌ No se encontró el muelle \"${nombreMuelle}\" para el día ${nombreDia}`);\n      console.log(`  Muelles disponibles:`, Object.keys(datosDia).filter(k => k !== 'fechaDia'));\n      return false;\n    }\n    console.log(`✅ Muelle \"${nombreMuelle}\" encontrado`);\n\n    /* ── Verificar franjas ── */\n    if (!malla.franjas || !Array.isArray(malla.franjas) || malla.franjas.length === 0) {\n      console.log(`❌ No hay franjas definidas en la malla`);\n      return false;\n    }\n\n    const franjas = malla.franjas.map(f => f.hora);\n    console.log(`🔍 Franjas disponibles:`, franjas);\n    console.log(`🔍 Buscando hora \"${horaSolicitada}\" (limpia: \"${limpiarHora(horaSolicitada)}\")`);\n    \n    const indiceInicio = franjas.findIndex(h => {\n      const horaLimpia = limpiarHora(h);\n      const horaSolicitadaLimpia = limpiarHora(horaSolicitada);\n      console.log(`  Comparando: \"${h}\" (${horaLimpia}) vs \"${horaSolicitada}\" (${horaSolicitadaLimpia})`);\n      return horaLimpia === horaSolicitadaLimpia;\n    });\n    \n    if (indiceInicio === -1) {\n      console.log(`❌ No se encontró la hora \"${horaSolicitada}\" en las franjas disponibles`);\n      console.log(`  Franjas disponibles:`, franjas);\n      return false;\n    }\n    console.log(`✅ Hora encontrada en índice ${indiceInicio}`);\n    \n    if (indiceInicio + horasNecesarias > franjas.length) {\n      console.log(`❌ No hay suficientes franjas consecutivas disponibles (necesita ${horasNecesarias})`);\n      return false;\n    }\n\n    /* ── Verificar disponibilidad de todas las franjas necesarias ── */\n    console.log(`🔍 Verificando disponibilidad de ${horasNecesarias} franja(s) consecutiva(s)`);\n    for (let i = 0; i < horasNecesarias; i++) {\n      const horaFranja = franjas[indiceInicio + i];\n      const franja = datosDia[nombreMuelle][horaFranja];\n      \n      console.log(`  Revisando franja ${i + 1}/${horasNecesarias}: \"${horaFranja}\"`);\n      \n      if (!franja) {\n        console.log(`❌ No se encontró la franja \"${horaFranja}\" en \"${nombreMuelle}\"`);\n        return false;\n      }\n      \n      const estadoFranja = (franja.estado || \"\").toLowerCase().trim();\n      console.log(`    Estado: \"${franja.estado}\" → \"${estadoFranja}\"`);\n      \n      if (estadoFranja !== \"disponible\") {\n        console.log(`❌ La franja \"${horaFranja}\" no está disponible. Estado: \"${franja.estado}\"`);\n        return false;\n      }\n      console.log(`    ✅ Franja \"${horaFranja}\" está disponible`);\n    }\n    \n    console.log(`🎉 TODAS las franjas están disponibles para ${fechaSolicitada} ${horaSolicitada}`);\n    return true;\n  } catch (error) {\n    console.error(`❌ Error verificando disponibilidad: ${error.message}`);\n    console.error(error.stack);\n    return false;\n  }\n}\n\n// (10) Formatear fecha en formato español\nfunction formatearFechaEspanol(fecha) {\n  if (!fecha || !(fecha instanceof Date)) {\n    return \"\";\n  }\n  \n  const dia = fecha.getDate();\n  const meses = [\n    \"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\",\n    \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"\n  ];\n  const mes = meses[fecha.getMonth()];\n  const anio = fecha.getFullYear();\n  \n  return `${dia} de ${mes} de ${anio}`;\n}\n\n/* ───────────────────────────────────────────────────────────────────────── */\n/* FUNCIONES PARA BUSCAR ALTERNATIVAS                                        */\n/* ───────────────────────────────────────────────────────────────────────── */\n\n// Buscar alternativas desde dos días después\nfunction buscarAlternativasDesdeDosDiasDespues(\n  fechaActual,\n  mallaActual,\n  mallaProxima,\n  muelle,\n  horasNecesarias\n) {\n  try {\n    const fechaDosDiasDespues = new Date(fechaActual);\n    fechaDosDiasDespues.setDate(fechaDosDiasDespues.getDate() + 2);\n    \n    // Ajustar si cae en fin de semana\n    if (fechaDosDiasDespues.getDay() === 0) { // Domingo\n      fechaDosDiasDespues.setDate(fechaDosDiasDespues.getDate() + 1);\n    } else if (fechaDosDiasDespues.getDay() === 6) { // Sábado\n      fechaDosDiasDespues.setDate(fechaDosDiasDespues.getDate() + 2);\n    }\n    \n    const fechaDosDiasDespuesStr = formatearFechaEspanol(fechaDosDiasDespues);\n    const alternativas = buscarAlternativasParaDiaConFechaExacta(\n      fechaDosDiasDespuesStr,\n      muelle,\n      horasNecesarias,\n      mallaActual,\n      mallaProxima\n    );\n    \n    // Solo devolver máximo 10 alternativas de ese día\n    return alternativas.slice(0, 10);\n  } catch (error) {\n    console.error(`Error buscando alternativas: ${error.message}`);\n    return [];\n  }\n}\n\n// Buscar alternativas para un día específico usando fecha exacta\nfunction buscarAlternativasParaDiaConFechaExacta(\n  fechaTexto,\n  muelle,\n  horasNecesarias,\n  mallaActual,\n  mallaProxima\n) {\n  try {\n    const alternativas = [];\n    \n    const resultadoBusqueda = buscarDiaPorFechaExacta(fechaTexto, mallaActual, mallaProxima);\n    if (!resultadoBusqueda) {\n      return alternativas;\n    }\n\n    const { malla, datosDia } = resultadoBusqueda;\n    const nombreMuelle = muelle.toLowerCase().replace(/\\s+/g, \"\");\n    \n    if (!datosDia[nombreMuelle]) {\n      return alternativas;\n    }\n    \n    if (!malla.franjas || !Array.isArray(malla.franjas) || malla.franjas.length === 0) {\n      return alternativas;\n    }\n    \n    const franjasHorario = malla.franjas.map(f => f.hora);\n    \n    // Verificar cada posible hora de inicio\n    for (let i = 0; i <= franjasHorario.length - horasNecesarias; i++) {\n      const horaInicio = franjasHorario[i];\n      let todasDisponibles = true;\n      \n      // Verificar disponibilidad de todas las franjas consecutivas\n      for (let j = 0; j < horasNecesarias; j++) {\n        const horaActual = franjasHorario[i + j];\n        const franja = datosDia[nombreMuelle][horaActual];\n        \n        if (!franja || (franja.estado || \"\").toLowerCase().trim() !== \"disponible\") {\n          todasDisponibles = false;\n          break;\n        }\n      }\n      \n      // Si todas las franjas están disponibles, agregar como alternativa\n      if (todasDisponibles) {\n        const horaFin = calcularHoraFin(horaInicio, horasNecesarias);\n        alternativas.push({\n          fecha: fechaTexto,\n          horaInicio: horaInicio,\n          horaFin: horaFin,\n          muelle: muelle\n        });\n      }\n    }\n    \n    return alternativas;\n  } catch (error) {\n    console.error(`Error buscando alternativas para día: ${error.message}`);\n    return [];\n  }\n}\n\n// Buscar alternativas en el mismo día\nfunction buscarAlternativasMismoDia(\n  fechaSolicitada,\n  muelle,\n  horasNecesarias,\n  mallaActual,\n  mallaProxima\n) {\n  const alternativas = buscarAlternativasParaDiaConFechaExacta(\n    fechaSolicitada,\n    muelle,\n    horasNecesarias,\n    mallaActual,\n    mallaProxima\n  );\n  \n  // Limitar a máximo 8 alternativas del mismo día\n  return alternativas.slice(0, 8);\n}\n\n// Buscar alternativas en días posteriores\nfunction buscarAlternativasDiasPeriores(\n  fechaSolicitada,\n  muelle,\n  horasNecesarias,\n  mallaActual,\n  mallaProxima\n) {\n  try {\n    const fechaSolicitadaObj = parsearFechaEspanol(fechaSolicitada);\n    const fechaSiguiente = new Date(fechaSolicitadaObj);\n    fechaSiguiente.setDate(fechaSiguiente.getDate() + 1);\n    \n    // Solo buscar en el día siguiente\n    const fechaSiguienteStr = formatearFechaEspanol(fechaSiguiente);\n    const alternativasDiaSiguiente = buscarAlternativasParaDiaConFechaExacta(\n      fechaSiguienteStr,\n      muelle,\n      horasNecesarias,\n      mallaActual,\n      mallaProxima\n    );\n    \n    // Limitar a máximo 8 alternativas del día siguiente\n    return alternativasDiaSiguiente.slice(0, 8);\n  } catch (error) {\n    console.error(`Error buscando alternativas posteriores: ${error.message}`);\n    return [];\n  }\n}\n\n// Aseguramos que n8n ejecute la función principal\nreturn procesarVerificacionFranjas(items, 0);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -38992,
        -10768
      ],
      "id": "0b182cb2-3df1-4090-8bfe-616103ac09d2",
      "name": "Code MOSTRAR_FRANJAS"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Sistema de Validación de Datos para Citas de Logística\n * VERSIÓN 5.3 — 2025-04-25\n * - Aplana proveedores y categorías que vienen dentro de \"datosproveedor\" /\n *   \"datoscategorias\"\n * - Mantiene la lógica de coincidencias para abreviaturas (\"spb\") y variantes\n *   sing/plural (\"arena\"→\"ARENAS\")\n * - Incluye guard-rails para evitar undefined\n */\n\n/*────────────────────── UTILIDAD GENÉRICA ──────────────────────*/\nfunction getNodeItems(nodeName) {\n  try {\n    return $items(nodeName).map(i => i.json) || [];\n  } catch (e) {          // ← con (e) o (error)\n    return [];\n  }\n}\n\n/*────────────────────── CARGA Y APLANADO ───────────────────────*/\nfunction procesarValidacionCita() {\n  try {   \n// 🔄 Carga cruda\nlet proveedoresRaw  = getNodeItems(\"Estructuración, Consulta, Datos Proveedor\");\nlet categoriasRaw   = getNodeItems(\"Estructuración, Consulta, Datos Categorias\");\n\n// 🔄 Aplanar proveedores\nlet datosproveedor = [];\nfor (const itm of proveedoresRaw) {\n  if (Array.isArray(itm.datosproveedor))  datosproveedor.push(...itm.datosproveedor);\n  else if (itm.proveedor)                 datosproveedor.push(itm);\n}\n\n// 🔄 Aplanar categorías\nlet datoscategorias = [];\nfor (const itm of categoriasRaw) {\n  if (Array.isArray(itm.datoscategorias)) datoscategorias.push(...itm.datoscategorias);\n  else if (itm.CATEGORIA)                 datoscategorias.push(itm);\n}\n\n// Fallbacks (por compatibilidad con Merge datos Excel)\nif (!datosproveedor.length  && $node[\"Merge datos Excel\"]?.json?.datosproveedor)\n  datosproveedor  = $node[\"Merge datos Excel\"].json.datosproveedor;\nif (!datoscategorias.length && $node[\"Merge datos Excel\"]?.json?.datoscategorias)\n  datoscategorias = $node[\"Merge datos Excel\"].json.datoscategorias;\n\n/*──────────────────── DATOS DEL LLM Y CONTEXTO ─────────────────*/\nconst datosLLM          = $node[\"Basic LLM Chain RECOLECCIÓN1\"].json.output;\nconst mensajeActual     = $('Unificación y consistencia de datos').first().json.infoMensaje.mensajeActual;\nconst historialMensajes = $node[\"Unificación y consistencia de datos\"].json.infoMensaje.historialMensajes;\nconst mallaProximaSemana= $('Estructuración, Datos, Consulta, Citas Proxima Semana').first().json;\nconst mallaProximaNoExiste = verificarMallaProximaNoExiste(mallaProximaSemana);\nconst fechaActualObj    = new Date();\n    \n    // Inicializar el objeto de respuesta\n    const resultado = {\n      todoCorrecto: false,\n      datosPreviamenteConfirmados: false,\n      camposFaltantes: [],\n      proveedoresSimilares: [],\n      categoriasSimilares: [],\n      fechaSolicitada: \"\",\n      horaSolicitada: \"\",\n      proveedorIdentificado: \"\",\n      categoriaIdentificada: \"\",\n      pesoIdentificado: 0,\n      unidadesIdentificadas: 0,\n      ordenCompraIdentificada: \"\",\n      mensajeSistema: \"\",\n      mensajesCamposFaltantes: {},\n      mallaProximaDisponible: !mallaProximaNoExiste,\n      fechaValida: true,\n      horaValida: true,\n      diaHabil: true,\n      mensajeValidacionTemporal: \"\"\n    };\n\n    // Si la malla próxima no existe, agregar un mensaje informativo\n    if (mallaProximaNoExiste) {\n      resultado.mensajeSistema = \"Te informo que la malla de la próxima semana aún no ha sido creada o no está disponible. Solo puedo mostrarte disponibilidad para la semana actual.\";\n    }\n\n    // 1. VERIFICAR SI ES UNA CONFIRMACIÓN DIRECTA DE TODOS LOS DATOS\n    const confirmacionPrevia = verificarConfirmacionPrevia(historialMensajes, mensajeActual);\n    if (confirmacionPrevia.confirmado) {\n      resultado.datosPreviamenteConfirmados = true;\n      resultado.todoCorrecto = true;\n      resultado.proveedorIdentificado = confirmacionPrevia.proveedor;\n      resultado.fechaSolicitada = confirmacionPrevia.fecha;\n      resultado.horaSolicitada = confirmacionPrevia.hora;\n      resultado.categoriaIdentificada = confirmacionPrevia.categoria;\n      resultado.pesoIdentificado = confirmacionPrevia.peso;\n      resultado.unidadesIdentificadas = confirmacionPrevia.unidades;\n      resultado.ordenCompraIdentificada = confirmacionPrevia.ordenCompra;\n      \n      // Validar que la fecha y hora confirmadas no estén en el pasado\n      const validacionTemporal = validarFechaHora(resultado.fechaSolicitada, resultado.horaSolicitada, fechaActualObj);\n      resultado.fechaValida = validacionTemporal.fechaValida;\n      resultado.horaValida = validacionTemporal.horaValida;\n      resultado.diaHabil = validacionTemporal.diaHabil;\n      resultado.mensajeValidacionTemporal = validacionTemporal.mensaje;\n      \n      // Si hay problemas con la fecha/hora, la cita no está correcta\n      if (!validacionTemporal.fechaValida || !validacionTemporal.horaValida || !validacionTemporal.diaHabil) {\n        resultado.todoCorrecto = false;\n      }\n      \n      return resultado;\n    }\n\n    // 2. USAR DIRECTAMENTE LOS DATOS DEL LLM\n    // No intentar extraer datos del mensaje - confiar en lo que extrajo el LLM\n    resultado.fechaSolicitada = datosLLM.fecha || \"\";\n    resultado.horaSolicitada = datosLLM.hora || \"\";\n    resultado.pesoIdentificado = parseInt(datosLLM.peso) || 0;\n    resultado.unidadesIdentificadas = parseInt(datosLLM.unidades) || 0;\n    resultado.ordenCompraIdentificada = datosLLM.ordenCompra || \"\";\n\n    // 3. VALIDACIÓN DEL PROVEEDOR\n    if (datosLLM.proveedor) {\n      const resultadoProveedor = validarProveedor(datosLLM.proveedor, datosproveedor);\n      \n      if (resultadoProveedor.coincidenciaExacta) {\n        resultado.proveedorIdentificado = resultadoProveedor.nombreCompleto;\n      } else if (resultadoProveedor.coincidenciaParcialClara) {\n        resultado.proveedorIdentificado = resultadoProveedor.nombreCompleto;\n      } else if (resultadoProveedor.coincidenciasParciales && resultadoProveedor.coincidenciasParciales.length > 0) {\n        resultado.proveedoresSimilares = resultadoProveedor.coincidenciasParciales;\n      } else {\n        resultado.camposFaltantes.push(\"proveedor\");\n        resultado.mensajesCamposFaltantes[\"proveedor\"] = \"Por favor proporciona el nombre del proveedor ya que es necesario para buscarlo en nuestra base de datos y que el sistema pueda asociar la cita a ese nombre, trata de proporcionar el nombre lo más completo posible.\";\n      }\n    } else {\n      resultado.camposFaltantes.push(\"proveedor\");\n      resultado.mensajesCamposFaltantes[\"proveedor\"] = \"Por favor proporciona el nombre del proveedor ya que es necesario para buscarlo en nuestra base de datos y que el sistema pueda asociar la cita a ese nombre, trata de proporcionar el nombre lo más completo posible.\";\n    }\n\n    // 4. VALIDACIÓN DE LA CATEGORÍA\n    if (datosLLM.categoria) {\n      const resultadoCategoria = validarCategoria(datosLLM.categoria, datoscategorias);\n      if (resultadoCategoria.coincidenciaExacta) {\n        resultado.categoriaIdentificada = resultadoCategoria.nombreCompleto;\n      } else if (resultadoCategoria.coincidenciaSimilar) {\n        // Si es \"arena\" para \"ARENAS\", por ejemplo\n        resultado.categoriaIdentificada = resultadoCategoria.nombreCompleto;\n      } else if (resultadoCategoria.categoriasSimilares && resultadoCategoria.categoriasSimilares.length > 0) {\n        resultado.categoriasSimilares = resultadoCategoria.categoriasSimilares;\n      } else {\n        resultado.camposFaltantes.push(\"categoría\");\n        \n        // Preparar la lista de categorías disponibles para el mensaje\n        let categoriasDisponibles = datoscategorias.map(cat => cat.CATEGORIA).join(\", \");\n        if (categoriasDisponibles.length > 100) {\n          // Si hay muchas categorías, mostrar solo las primeras\n          const primerasCategorias = datoscategorias.slice(0, 5).map(cat => cat.CATEGORIA);\n          categoriasDisponibles = primerasCategorias.join(\", \") + \", entre otras...\";\n        }\n        \n        resultado.mensajesCamposFaltantes[\"categoría\"] = `Por favor indica la categoría del material. Las categorías disponibles incluyen: ${categoriasDisponibles}`;\n      }\n    } else {\n      resultado.camposFaltantes.push(\"categoría\");\n      \n      // Preparar la lista de categorías disponibles para el mensaje\n      let categoriasDisponibles = datoscategorias.map(cat => cat.CATEGORIA).join(\", \");\n      if (categoriasDisponibles.length > 100) {\n        // Si hay muchas categorías, mostrar solo las primeras\n        const primerasCategorias = datoscategorias.slice(0, 5).map(cat => cat.CATEGORIA);\n        categoriasDisponibles = primerasCategorias.join(\", \") + \", entre otras...\";\n      }\n      \n      resultado.mensajesCamposFaltantes[\"categoría\"] = `Por favor indica la categoría del material. Las categorías disponibles incluyen: ${categoriasDisponibles}`;\n    }\n\n    // 5. VERIFICACIÓN DE CAMPOS OBLIGATORIOS FALTANTES\n    if (!resultado.fechaSolicitada) {\n      resultado.camposFaltantes.push(\"fecha\");\n      resultado.mensajesCamposFaltantes[\"fecha\"] = \"Por favor es necesaria la fecha de entrega para que el sistema pueda revisar el cronograma y entregarte información precisa.\";\n    }\n    \n    if (!resultado.horaSolicitada) {\n      resultado.camposFaltantes.push(\"hora\");\n      resultado.mensajesCamposFaltantes[\"hora\"] = \"Por favor indica la hora preferida para la cita, es necesaria para verificar la disponibilidad en nuestro cronograma.\";\n    }\n    \n    if (!resultado.pesoIdentificado) {\n      resultado.camposFaltantes.push(\"peso\");\n      resultado.mensajesCamposFaltantes[\"peso\"] = \"Te falta el dato del peso de la mercancía. Por favor proporcionar este dato ojalá en kilos, es necesario para que el sistema calcule la duración del descargue de la mercancía.\";\n    }\n    \n    if (!resultado.unidadesIdentificadas) {\n      resultado.camposFaltantes.push(\"unidades\");\n      resultado.mensajesCamposFaltantes[\"unidades\"] = \"Te faltó el dato de la cantidad de unidades a descargar. Este dato es importante para que el sistema pueda calcular el tiempo que se necesita para el descargue.\";\n    }\n    \n    if (!resultado.ordenCompraIdentificada) {\n      resultado.camposFaltantes.push(\"orden de compra\");\n      resultado.mensajesCamposFaltantes[\"orden de compra\"] = \"Falta el número de la orden de compra. Por favor proporcionar este dato ya que es necesario para que la cita en el cronograma quede relacionada a esta orden de compra por temas de trazabilidad en la operación.\";\n    }\n\n    // 6. VALIDACIÓN: Verificar que la fecha y hora sean válidas\n    if (resultado.fechaSolicitada && resultado.horaSolicitada) {\n      const validacionTemporal = validarFechaHora(resultado.fechaSolicitada, resultado.horaSolicitada, fechaActualObj);\n      resultado.fechaValida = validacionTemporal.fechaValida;\n      resultado.horaValida = validacionTemporal.horaValida;\n      resultado.diaHabil = validacionTemporal.diaHabil;\n      resultado.mensajeValidacionTemporal = validacionTemporal.mensaje;\n      \n      // Si la fecha u hora no son válidas, añadir a campos faltantes\n      if (!validacionTemporal.fechaValida) {\n        if (!resultado.camposFaltantes.includes(\"fecha\")) {\n          resultado.camposFaltantes.push(\"fecha\");\n        }\n        resultado.mensajesCamposFaltantes[\"fecha\"] = validacionTemporal.mensaje;\n      }\n      \n      if (!validacionTemporal.horaValida) {\n        if (!resultado.camposFaltantes.includes(\"hora\")) {\n          resultado.camposFaltantes.push(\"hora\");\n        }\n        resultado.mensajesCamposFaltantes[\"hora\"] = validacionTemporal.mensaje;\n      }\n      \n      if (!validacionTemporal.diaHabil) {\n        if (!resultado.camposFaltantes.includes(\"fecha\")) {\n          resultado.camposFaltantes.push(\"fecha\");\n        }\n        resultado.mensajesCamposFaltantes[\"fecha\"] = validacionTemporal.mensaje;\n      }\n    }\n\n    // 7. DETERMINAR ESTADO FINAL\n    if (\n      resultado.camposFaltantes.length === 0 && \n      resultado.proveedoresSimilares.length === 0 && \n      resultado.categoriasSimilares.length === 0 &&\n      resultado.proveedorIdentificado && \n      resultado.categoriaIdentificada &&\n      resultado.fechaValida &&\n      resultado.horaValida &&\n      resultado.diaHabil\n    ) {\n      resultado.todoCorrecto = true;\n    }\n\n    return resultado;\n  } catch (e) {\n    console.error(\"Error en procesamiento de cita:\", e);\n    return {\n      error: e.message,\n      todoCorrecto: false,\n      mensajeSistema: \"Ocurrió un error durante el procesamiento de tu solicitud. Por favor, intenta nuevamente.\"\n    };\n  }\n}\n\n/**\n * Valida que la fecha y hora solicitadas sean válidas\n * (no en el pasado, día hábil, etc.)\n */\nfunction validarFechaHora(fechaStr, horaStr, fechaActualObj) {\n  const resultado = {\n    fechaValida: true,\n    horaValida: true,\n    diaHabil: true,\n    mensaje: \"\"\n  };\n  \n  try {\n    // Crear el objeto fecha a partir del string de fecha\n    let fechaSolicitadaObj = parsearFechaEspanol(fechaStr);\n    console.log(\"Fecha solicitada parseada:\", fechaSolicitadaObj);\n    \n    // Verificar si es un día hábil (L-V)\n    const diaSemana = fechaSolicitadaObj.getDay();\n    if (diaSemana === 0 || diaSemana === 6) { // 0 = domingo, 6 = sábado\n      resultado.diaHabil = false;\n      resultado.mensaje = \"La fecha solicitada cae en fin de semana. Por favor elige un día hábil (lunes a viernes).\";\n      return resultado;\n    }\n    \n    // Verificar si la fecha es hoy\n    const esHoy = esMismaFecha(fechaSolicitadaObj, fechaActualObj);\n    console.log(\"¿Es hoy?\", esHoy);\n    \n    // Si es hoy, verificar que la hora sea futura y con al menos 2 horas de anticipación\n    if (esHoy) {\n      // Convertir la hora solicitada a un objeto Date\n      const horaSolicitadaObj = parsearHora(horaStr, fechaSolicitadaObj);\n      console.log(\"Hora solicitada parseada:\", horaSolicitadaObj);\n      \n      // Verificar que sea futura\n      if (horaSolicitadaObj < fechaActualObj) {\n        resultado.horaValida = false;\n        resultado.mensaje = \"La hora solicitada ya pasó. Por favor elige una hora futura.\";\n        return resultado;\n      }\n      \n      // Verificar que haya al menos 2 horas de anticipación\n      const diferenciaMilis = horaSolicitadaObj - fechaActualObj;\n      const diferenciaHoras = diferenciaMilis / (1000 * 60 * 60);\n      console.log(\"Diferencia en horas:\", diferenciaHoras);\n      \n      if (diferenciaHoras < 2) {\n        resultado.horaValida = false;\n        resultado.mensaje = \"Necesitamos al menos 2 horas de anticipación para programar una cita. Por favor elige una hora posterior o una fecha futura.\";\n        return resultado;\n      }\n    }\n    \n    // Verificar que la fecha no sea pasada\n    if (fechaSolicitadaObj < fechaActualObj && !esHoy) {\n      resultado.fechaValida = false;\n      resultado.mensaje = \"La fecha solicitada ya pasó. Por favor elige una fecha futura.\";\n      return resultado;\n    }\n    \n    // NO HAY RESTRICCIÓN DE HORARIO DE OPERACIÓN\n    \n    return resultado;\n  } catch (e) {\n    console.error(\"Error en validación de fecha/hora:\", e);\n    resultado.fechaValida = false;\n    resultado.mensaje = \"Error al validar la fecha y hora. Por favor verifica el formato.\";\n    return resultado;\n  }\n}\n\n/**\n * Parsea una fecha en español a un objeto Date\n */\nfunction parsearFechaEspanol(fechaStr) {\n  try {\n    // Verificar que la fecha no esté vacía\n    if (!fechaStr || typeof fechaStr !== 'string' || fechaStr.trim() === '') {\n      throw new Error(\"Fecha vacía o no válida: \" + fechaStr);\n    }\n    \n    console.log(\"[DEBUG] Fecha recibida para parsear:\", fechaStr);\n    \n    // Normalizar la fecha (quitar \"de\", etc. y limpiar espacios extra)\n    const fechaNormalizada = fechaStr.toLowerCase()\n      .trim()\n      .replace(/\\s+de\\s+/g, \" \")\n      .replace(/\\s+del\\s+/g, \" \")\n      .replace(/\\s+/g, \" \"); // Normalizar espacios múltiples\n    \n    console.log(\"[DEBUG] Fecha normalizada:\", fechaNormalizada);\n    \n    // Mapeo de meses en español a números (incluir variaciones)\n    const meses = {\n      \"enero\": 0, \"febrero\": 1, \"marzo\": 2, \"abril\": 3, \"mayo\": 4, \"junio\": 5,\n      \"julio\": 6, \"agosto\": 7, \"septiembre\": 8, \"octubre\": 9, \"noviembre\": 10, \"diciembre\": 11,\n      // Variaciones comunes\n      \"ene\": 0, \"feb\": 1, \"mar\": 2, \"abr\": 3, \"may\": 4, \"jun\": 5,\n      \"jul\": 6, \"ago\": 7, \"sep\": 8, \"oct\": 9, \"nov\": 10, \"dic\": 11\n    };\n    \n    // Extraer día, mes, año\n    const partes = fechaNormalizada.split(/\\s+/).filter(p => p.length > 0);\n    console.log(\"[DEBUG] Partes de la fecha:\", partes);\n    \n    let dia, mes, año;\n    \n    // Intentar diferentes formatos\n    if (partes.length >= 3) {\n      // Formato \"15 abril 2025\" o \"15 de abril 2025\"\n      dia = parseInt(partes[0]);\n      \n      // Buscar el mes en las partes (puede estar en posición 1 o 2)\n      let mesEncontrado = false;\n      for (let i = 1; i < partes.length - 1; i++) {\n        if (meses.hasOwnProperty(partes[i])) {\n          mes = meses[partes[i]];\n          mesEncontrado = true;\n          break;\n        }\n      }\n      \n      if (!mesEncontrado) {\n        throw new Error(\"Mes no reconocido en: \" + fechaStr);\n      }\n      \n      año = parseInt(partes[partes.length - 1]);\n      \n    } else if (partes.length === 2) {\n      // Formato \"15 abril\" (asumimos año actual)\n      dia = parseInt(partes[0]);\n      \n      if (meses.hasOwnProperty(partes[1])) {\n        mes = meses[partes[1]];\n      } else {\n        throw new Error(\"Mes no reconocido: \" + partes[1]);\n      }\n      \n      año = new Date().getFullYear();\n      \n    } else if (partes.length === 1) {\n      // Intentar formato \"15/04/2025\" o \"15-04-2025\"\n      if (/^\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{2,4}$/.test(partes[0])) {\n        const partesNumero = partes[0].split(/[\\/\\-]/);\n        dia = parseInt(partesNumero[0]);\n        mes = parseInt(partesNumero[1]) - 1; // Restar 1 porque en JS los meses van de 0-11\n        año = parseInt(partesNumero[2]);\n        if (año < 100) año += 2000; // Ajustar años de 2 dígitos\n      } else {\n        throw new Error(\"Formato de fecha no reconocido: \" + fechaStr);\n      }\n    } else {\n      throw new Error(\"Formato de fecha no reconocido (partes insuficientes): \" + fechaStr);\n    }\n    \n    console.log(\"[DEBUG] Componentes extraídos - Día:\", dia, \"Mes:\", mes, \"Año:\", año);\n    \n    // Verificar que los valores sean válidos\n    if (isNaN(dia) || mes === undefined || isNaN(mes) || isNaN(año)) {\n      throw new Error(\"Componentes de fecha no válidos - Día: \" + dia + \", Mes: \" + mes + \", Año: \" + año + \" en: \" + fechaStr);\n    }\n    \n    // Validar rangos\n    if (dia < 1 || dia > 31) {\n      throw new Error(\"Día fuera de rango (1-31): \" + dia);\n    }\n    \n    if (mes < 0 || mes > 11) {\n      throw new Error(\"Mes fuera de rango (0-11): \" + mes);\n    }\n    \n    if (año < 1900 || año > 2100) {\n      throw new Error(\"Año fuera de rango (1900-2100): \" + año);\n    }\n    \n    // Crear el objeto Date\n    const fechaResultado = new Date(año, mes, dia);\n    \n    // Verificar que la fecha se creó correctamente\n    if (isNaN(fechaResultado.getTime())) {\n      throw new Error(\"Fecha inválida creada: \" + fechaResultado);\n    }\n    \n    console.log(\"[DEBUG] Fecha parseada exitosamente:\", fechaResultado);\n    return fechaResultado;\n    \n  } catch (e) {\n    console.error(\"[ERROR] Error al parsear fecha '\", fechaStr, \"':\", e.message);\n    throw e;\n  }\n}\n\n/**\n * Parsea una hora en formato español a un objeto Date\n */\nfunction parsearHora(horaStr, fechaBase) {\n  try {\n    // Normalizar la hora\n    const horaNormalizada = horaStr.toLowerCase().trim();\n    \n    // Extraer la hora y los minutos\n    let hora, minutos;\n    let esPM = false;\n    \n    // Verificar si es PM\n    if (horaNormalizada.includes(\"pm\") || \n        horaNormalizada.includes(\"p.m.\") || \n        horaNormalizada.includes(\"tarde\") ||\n        horaNormalizada.includes(\"noche\")) {\n      esPM = true;\n    }\n    \n    // Extraer la hora y minutos numéricos\n    const matchHora = horaNormalizada.match(/(\\d+)(?::(\\d+))?/);\n    if (matchHora) {\n      hora = parseInt(matchHora[1]);\n      minutos = matchHora[2] ? parseInt(matchHora[2]) : 0;\n      \n      // Convertir a formato 24 horas si es PM\n      if (esPM && hora < 12) {\n        hora += 12;\n      }\n      \n      // Convertir a formato 24 horas si es AM y son las 12\n      if (!esPM && hora === 12) {\n        hora = 0;\n      }\n    } else {\n      throw new Error(\"Formato de hora no reconocido: \" + horaStr);\n    }\n    \n    // Verificar que los valores sean válidos\n    if (isNaN(hora) || isNaN(minutos)) {\n      throw new Error(\"Formato de hora no reconocido: \" + horaStr);\n    }\n    \n    // Crear el objeto Date con la fecha base y la hora extraída\n    const resultado = new Date(fechaBase);\n    resultado.setHours(hora, minutos, 0, 0);\n    \n    return resultado;\n  } catch (e) {\n    console.error(\"Error al parsear hora:\", e);\n    throw e;\n  }\n}\n\n/**\n * Verifica si dos fechas corresponden al mismo día\n */\nfunction esMismaFecha(fecha1, fecha2) {\n  return fecha1.getDate() === fecha2.getDate() &&\n         fecha1.getMonth() === fecha2.getMonth() &&\n         fecha1.getFullYear() === fecha2.getFullYear();\n}\n\n/**\n * Verifica si la malla de la próxima semana no existe\n */\nfunction verificarMallaProximaNoExiste(mallaProximaSemana) {\n  // Verificar si la malla próxima semana existe y tiene datos\n  if (!mallaProximaSemana || !mallaProximaSemana.datosMallaProxSemana) {\n    return true;\n  }\n  \n  // Verificar si contiene el mensaje de error específico en el título\n  const titulo = mallaProximaSemana.datosMallaProxSemana.titulo;\n  if (titulo && (\n      titulo.includes(\"⚠️\") && \n      (titulo.includes(\"no existe\") || titulo.includes(\"aún no ha sido creada\"))\n    )) {\n    return true;\n  }\n  \n  return false;\n}\n\n/**\n * Verifica si ya hubo una confirmación previa en el historial\n */\nfunction verificarConfirmacionPrevia(historial, mensajeActual) {\n  // Si no hay historial, no puede haber confirmación previa\n  if (!historial) {\n    return { confirmado: false };\n  }\n\n  // Patrones para detectar solicitud de confirmación en historial\n  const patrones = [\n    /Por favor,?\\s?confirma/i,\n    /¿Confirmas/i,\n    /confirma si esta/i,\n    /deseas proceder/i\n  ];\n  \n  // Patrones para detectar confirmación en mensaje actual\n  const patronesConfirmacion = [\n    /\\bsi\\b/i,\n    /confirmo/i,\n    /exacto/i,\n    /\\bese\\b/i,\n    /correcto/i,\n    /afirmativo/i,\n    /ok\\b/i,\n    /está bien/i\n  ];\n\n  // Buscar si hay solicitud de confirmación en historial\n  let solicitudConfirmacionEncontrada = false;\n  let detalles = {\n    proveedor: \"\",\n    fecha: \"\",\n    hora: \"\",\n    categoria: \"\",\n    peso: 0,\n    unidades: 0,\n    ordenCompra: \"\"\n  };\n\n  // Buscar el último mensaje que pidió confirmación\n  const mensajes = historial.split(/\\n+/).filter(m => m.trim());\n  \n  for (let i = mensajes.length - 1; i >= 0; i--) {\n    const mensaje = mensajes[i];\n    \n    // Verificar si este mensaje pide confirmación\n    if (patrones.some(patron => patron.test(mensaje))) {\n      solicitudConfirmacionEncontrada = true;\n      \n      // Extraer proveedor\n      const matchProveedor = mensaje.match(/proveedor\\s+\\*?\\*?([^*\\n.]+)\\*?\\*?/i);\n      if (matchProveedor) {\n        detalles.proveedor = matchProveedor[1].trim();\n      }\n      \n      // Extraer fecha\n      const matchFecha = mensaje.match(/(el día|el|día)\\s+([^,]+?)(?=\\s+a las|\\s+con|\\s+en|\\s+y|$)/i);\n      if (matchFecha) {\n        detalles.fecha = matchFecha[2].trim();\n      }\n      \n      // Extraer hora\n      const matchHora = mensaje.match(/a las\\s+([^,]+?)(?=\\s+con|\\s+en|\\s+y|$)/i);\n      if (matchHora) {\n        detalles.hora = matchHora[1].trim();\n      }\n      \n      // Extraer categoría\n      const matchCategoria = mensaje.match(/categoría\\s+\\*?\\*?([^*\\n,]+)\\*?\\*?/i);\n      if (matchCategoria) {\n        detalles.categoria = matchCategoria[1].trim();\n      }\n      \n      // Extraer peso\n      const matchPeso = mensaje.match(/(\\d+)\\s+kilos/i);\n      if (matchPeso) {\n        detalles.peso = parseInt(matchPeso[1]);\n      }\n      \n      // Extraer unidades\n      const matchUnidades = mensaje.match(/(\\d+)\\s+unidades/i);\n      if (matchUnidades) {\n        detalles.unidades = parseInt(matchUnidades[1]);\n      }\n      \n      // Extraer orden de compra\n      const matchOrden = mensaje.match(/orden\\s+(?:de compra)?\\s*\\*?\\*?([^*\\n.]+)\\*?\\*?/i);\n      if (matchOrden) {\n        detalles.ordenCompra = matchOrden[1].trim();\n      }\n      \n      break;\n    }\n  }\n\n  // Si encontramos una solicitud de confirmación, verificar si el mensaje actual es una confirmación\n  if (solicitudConfirmacionEncontrada) {\n    const esConfirmacion = patronesConfirmacion.some(patron => patron.test(mensajeActual));\n    return {\n      confirmado: esConfirmacion,\n      proveedor: detalles.proveedor,\n      fecha: detalles.fecha,\n      hora: detalles.hora,\n      categoria: detalles.categoria,\n      peso: detalles.peso,\n      unidades: detalles.unidades,\n      ordenCompra: detalles.ordenCompra\n    };\n  }\n\n  return { confirmado: false };\n}\n\n/**\n * Valida el proveedor contra la lista de proveedores disponibles\n */\nfunction validarProveedor(proveedorInput, listaProveedores) {\n  if (!proveedorInput || !listaProveedores || listaProveedores.length === 0) {\n    return {\n      coincidenciaExacta: false,\n      coincidenciaParcialClara: false,\n      coincidenciasParciales: []\n    };\n  }\n\n  // Normalizar entrada (quitar puntos, comas, convertir a minúsculas)\n  const proveedorNormalizado = normalizarTexto(proveedorInput);\n  \n  // Si el input es demasiado corto y genérico (menos de 3 caracteres), exigir más información\n  if (proveedorNormalizado.length < 2) {\n    return {\n      coincidenciaExacta: false,\n      coincidenciaParcialClara: false,\n      coincidenciasParciales: []\n    };\n  }\n  \n  console.log(\"Proveedor normalizado:\", proveedorNormalizado);\n  \n  // Buscar coincidencia exacta (ignorando mayúsculas/minúsculas)\n  const coincidenciaExacta = listaProveedores.find(p => \n    normalizarTexto(p.proveedor) === proveedorNormalizado\n  );\n  \n  if (coincidenciaExacta) {\n    return {\n      coincidenciaExacta: true,\n      coincidenciaParcialClara: false,\n      coincidenciasParciales: [],\n      nombreCompleto: coincidenciaExacta.proveedor\n    };\n  }\n\n  // Buscar primero coincidencias donde el input es un prefijo exacto\n  const coincidenciasPrefijo = listaProveedores\n    .filter(p => {\n      const nombreNormalizado = normalizarTexto(p.proveedor);\n      // Verificar si el nombre del proveedor comienza con el input exacto\n      return nombreNormalizado.startsWith(proveedorNormalizado);\n    })\n    .map(p => p.proveedor);\n  \n  console.log(\"Coincidencias por prefijo:\", coincidenciasPrefijo);\n    \n  // Si solo hay una coincidencia por prefijo, es una coincidencia clara\n  if (coincidenciasPrefijo.length === 1) {\n    const proveedor = listaProveedores.find(p => p.proveedor === coincidenciasPrefijo[0]);\n    return {\n      coincidenciaExacta: false,\n      coincidenciaParcialClara: true,\n      coincidenciasParciales: [],\n      nombreCompleto: proveedor.proveedor\n    };\n  }\n  \n  // Si hay múltiples coincidencias por prefijo, solicitar clarificación específica\n  if (coincidenciasPrefijo.length > 1) {\n    return {\n      coincidenciaExacta: false,\n      coincidenciaParcialClara: false,\n      coincidenciasParciales: coincidenciasPrefijo\n    };\n  }\n\n  // Si no hay coincidencias por prefijo, buscar coincidencias parciales más generales\n  const coincidenciasParciales = listaProveedores\n    .filter(p => {\n      const nombreNormalizado = normalizarTexto(p.proveedor);\n      // Verificar si el input está contenido en el nombre del proveedor\n      return nombreNormalizado.includes(proveedorNormalizado) || \n             // O si las primeras palabras coinciden\n             nombreNormalizado.split(' ').some((palabra, index, arr) => {\n               if (index < 3) { // Solo considerar las primeras 3 palabras\n                 return proveedorNormalizado.includes(palabra) || \n                        palabra.includes(proveedorNormalizado);\n               }\n               return false;\n             });\n    })\n    .map(p => p.proveedor);\n\n  console.log(\"Coincidencias parciales generales:\", coincidenciasParciales);\n\n  // Si hay solo una coincidencia parcial y es claramente identificable\n  if (coincidenciasParciales.length === 1) {\n    const proveedor = listaProveedores.find(p => p.proveedor === coincidenciasParciales[0]);\n    const nombreNormalizado = normalizarTexto(proveedor.proveedor);\n    \n    // Calcular similitud\n    const palabrasInput = proveedorNormalizado.split(' ');\n    const palabrasProveedor = nombreNormalizado.split(' ');\n    \n    // Si el input tiene al menos 2 palabras y ambas están en el nombre del proveedor, considerarlo como claro\n    const palabrasCoincidentes = palabrasInput.filter(palabra => \n      palabrasProveedor.some(p => p.includes(palabra))\n    );\n    \n    const esClaramenteIdentificable = \n      // Si el input es un acrónimo que coincide con las iniciales del proveedor\n      (proveedorNormalizado.length <= 5 && esAcronimo(proveedorNormalizado, proveedor.proveedor)) ||\n      // O si hay suficiente coincidencia de palabras\n      (palabrasInput.length >= 2 && palabrasCoincidentes.length >= 2) ||\n      // O si el input es una parte sustancial del nombre del proveedor\n      (nombreNormalizado.startsWith(proveedorNormalizado) && proveedorNormalizado.length >= 3) ||\n      // Casos especiales para mejorar la coincidencia\n      (proveedorNormalizado.includes(\"spb\") && nombreNormalizado.includes(\"spb colombia\"));\n    \n    if (esClaramenteIdentificable) {\n      return {\n        coincidenciaExacta: false,\n        coincidenciaParcialClara: true,\n        coincidenciasParciales: [],\n        nombreCompleto: proveedor.proveedor\n      };\n    }\n  }\n\n  // En caso de múltiples coincidencias o una coincidencia no clara\n  return {\n    coincidenciaExacta: false,\n    coincidenciaParcialClara: false,\n    coincidenciasParciales: coincidenciasParciales\n  };\n}\n\n/**\n * Valida la categoría contra la lista de categorías disponibles\n */\nfunction validarCategoria(categoriaInput, listaCategorias) {\n  if (!categoriaInput || !listaCategorias || listaCategorias.length === 0) {\n    return {\n      coincidenciaExacta: false,\n      coincidenciaSimilar: false,\n      categoriasSimilares: []\n    };\n  }\n\n  // Normalizar entrada\n  const categoriaNormalizada = normalizarTexto(categoriaInput);\n  \n  // Buscar coincidencia exacta (ignorando mayúsculas/minúsculas)\n  const coincidenciaExacta = listaCategorias.find(c => \n    normalizarTexto(c.CATEGORIA) === categoriaNormalizada\n  );\n  \n  if (coincidenciaExacta) {\n    return {\n      coincidenciaExacta: true,\n      coincidenciaSimilar: false,\n      categoriasSimilares: [],\n      nombreCompleto: coincidenciaExacta.CATEGORIA\n    };\n  }\n\n  // Caso especial para \"arena\" = \"ARENAS\"\n  if (categoriaNormalizada === \"arena\" && listaCategorias.some(c => normalizarTexto(c.CATEGORIA) === \"arenas\")) {\n    const categoriaArenas = listaCategorias.find(c => normalizarTexto(c.CATEGORIA) === \"arenas\");\n    return {\n      coincidenciaExacta: false,\n      coincidenciaSimilar: true,\n      categoriasSimilares: [],\n      nombreCompleto: categoriaArenas.CATEGORIA\n    };\n  }\n\n  // Buscar variantes similares (singular/plural)\n  for (const categoria of listaCategorias) {\n    const categoriaNombre = normalizarTexto(categoria.CATEGORIA);\n    \n    // Verificar si es una variante singular/plural\n    if (\n      // Si la categoría termina en S y sin la S coincide con el input\n      (categoriaNombre.endsWith(\"s\") && categoriaNombre.slice(0, -1) === categoriaNormalizada) ||\n      // O si el input termina en S y sin la S coincide con la categoría\n      (categoriaNormalizada.endsWith(\"s\") && categoriaNormalizada.slice(0, -1) === categoriaNombre)\n    ) {\n      return {\n        coincidenciaExacta: false,\n        coincidenciaSimilar: true,\n        categoriasSimilares: [],\n        nombreCompleto: categoria.CATEGORIA\n      };\n    }\n  }\n\n  // Buscar coincidencias parciales\n  const categoriasSimilares = listaCategorias\n    .filter(c => {\n      const nombreNormalizado = normalizarTexto(c.CATEGORIA);\n      return nombreNormalizado.includes(categoriaNormalizada) || \n             categoriaNormalizada.includes(nombreNormalizado);\n    })\n    .map(c => c.CATEGORIA);\n\n  // Si hay solo una coincidencia parcial, considerarla válida\n  if (categoriasSimilares.length === 1) {\n    return {\n      coincidenciaExacta: false,\n      coincidenciaSimilar: true,\n      categoriasSimilares: [],\n      nombreCompleto: categoriasSimilares[0]\n    };\n  }\n\n  // En caso de múltiples coincidencias o ninguna coincidencia\n  return {\n    coincidenciaExacta: false,\n    coincidenciaSimilar: false,\n    categoriasSimilares: categoriasSimilares\n  };\n}\n\n/**\n * Funciones auxiliares\n */\n\n// Normaliza texto para comparaciones\nfunction normalizarTexto(texto) {\n  if (!texto) return \"\";\n  \n  return texto\n    .toLowerCase()\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\") // Eliminar acentos\n    .replace(/[^\\w\\s]/g, \"\") // Eliminar puntuación\n    .trim();\n}\n\n// Verifica si un texto es un acrónimo de otro\nfunction esAcronimo(acronimo, textoCompleto) {\n  if (!acronimo || !textoCompleto || typeof textoCompleto !== \"string\") {\n    return false;                                   \n  }\n\n  acronimo = acronimo.replace(/\\./g, \"\").toLowerCase();\n\n  const palabras = textoCompleto.split(/\\s+/);\n  const iniciales = palabras.map(p => p.charAt(0).toLowerCase()).join(\"\");\n\n  const inicialesSignificativas = palabras\n    .filter(p => p.length > 2 && !/^(de|la|el|los|las|y|a|en|con|por|para)$/i.test(p))\n    .map(p => p.charAt(0).toLowerCase())\n    .join(\"\");\n\n  return iniciales.includes(acronimo) ||\n         inicialesSignificativas.includes(acronimo);\n}\n\n\n// Esta es la ejecución principal\n// Debe estar al final del archivo\nreturn procesarValidacionCita();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -41008,
        -10416
      ],
      "id": "79878f48-4056-44fd-ab3a-7c9824c09f28",
      "name": "Code RECOLECCIÓN"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b2110549-dd58-46b3-9707-dbbe0a5004f2",
              "leftValue": "={{ $('Code estandarizar respuestas MOSTRAR_FRANJAS').item.json.standardResponse.mensajeSistema.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -37040,
        -10752
      ],
      "id": "3d94d387-d2d2-4f3a-b2f6-cf59e79fbb69",
      "name": "Validación de longitud de caracteres3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -36480,
        -10848
      ],
      "id": "21556e02-2acd-41c4-a49f-e322d878c0b6",
      "name": "No Operation, do nothing5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Consistencia de datos, intención consultar malla').item.json.mensaje }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -36672,
        -10848
      ],
      "id": "a1d978f0-89da-4263-922d-80ea5479efca",
      "name": "HTTP Request Enviar Mensaje por WhatsApp6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Code estandarizar respuestas MOSTRAR_FRANJAS').item.json.standardResponse.mensajeSistema }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Code estandarizar respuestas MOSTRAR_FRANJAS').item.json.standardResponse.mensajeSistema.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -36672,
        -10656
      ],
      "id": "2c5fff3e-0b8f-48d5-a277-938153394cee",
      "name": "Organiza variables del mensaje3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT TOP 1 *\nFROM FranjasDisponiblesTemp\nWHERE chat_id = '{{$node[\"Organiza el Mensaje\"].json[\"infoMensaje\"][\"chat_id\"]}}'\nORDER BY timestamp_enviado DESC;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -43984,
        -8928
      ],
      "id": "ef96e7c0-90c7-494b-942d-7aaf4ca53d9c",
      "name": "Microsoft SQL Obtener Alternativas",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Versión corregida para la estructura real que estamos recibiendo\nconst resultadosSQL = $node[\"Microsoft SQL Obtener Alternativas\"].json;\n\n// Preparar respuesta por defecto\nlet respuesta = {\n  estado: \"error\",\n  mensaje: \"No se pudo procesar la confirmación.\",\n  tiempoExpirado: false,\n  alternativasDisponibles: null\n};\n\n// Verificar si hay resultados válidos\nif (!resultadosSQL) {\n  respuesta.mensaje = \"No encontramos alternativas disponibles para confirmar. Por favor, inicia el proceso de agendamiento nuevamente.\";\n  return { respuesta };\n}\n\ntry {\n  // Obtener timestamp enviado\n  const timestampEnviado = new Date(resultadosSQL.timestamp_enviado);\n  const ahora = new Date();\n  const tiempoTranscurrido = ahora.getTime() - timestampEnviado.getTime();\n  const tiempoLimiteMs = 5 * 60 * 1000; // 5 minutos en milisegundos\n\n  // Verificar si han pasado más de 5 minutos\n  if (tiempoTranscurrido > tiempoLimiteMs) {\n    respuesta.estado = \"expirado\";\n    respuesta.tiempoExpirado = true;\n    respuesta.mensaje = \"Lo sentimos, el tiempo para confirmar ha expirado (máximo 5 minutos). Por favor, iniciemos el proceso nuevamente para verificar la disponibilidad actual.\";\n    return { respuesta };\n  }\n\n  // Parsear datos de las franjas\n  const franjasJSON = resultadosSQL.franjas_json;\n  const franjas = JSON.parse(franjasJSON);\n  \n  // Todo está bien, actualizar la respuesta\n  respuesta.estado = \"ok\";\n  respuesta.tiempoExpirado = false;\n  respuesta.alternativasDisponibles = franjas;\n  \n  // Obtener datos adicionales importantes\n  if (resultadosSQL.datos_cita_json) {\n    respuesta.datosCita = JSON.parse(resultadosSQL.datos_cita_json);\n  }\n  \n  return { respuesta };\n} catch (error) {\n  console.log('Error al procesar datos:', error);\n  respuesta.mensaje = \"Ocurrió un error al procesar los datos. Por favor, inicia el proceso nuevamente.\";\n  return { respuesta };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -43536,
        -8928
      ],
      "id": "66f36c9b-1cab-49b2-891b-fc0e8a6c6d6b",
      "name": "Code Verificar Tiempo Transcurrido"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9f152a09-44e9-4eaf-9c88-2b0f1e377191",
              "leftValue": "={{ $json.respuesta.tiempoExpirado }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -43296,
        -8928
      ],
      "id": "8f3f6264-6bb3-495d-b6a8-bc6d71374cf4",
      "name": "If Verificar Expiración"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -42032,
        -9424
      ],
      "id": "773f7af1-6bb0-4c85-911b-48f674d10228",
      "name": "OpenAI Chat Model9",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=Eres un asistente de un sistema de agendamiento de citas. Debes notificar que el tiempo para confirmar una cita ha expirado.\n\nGenera un mensaje directo aplicando estos principios de UX para WhatsApp:\n\n**FORMATO Y ESTRUCTURA:**\n1. Usa *negritas* para información crítica como tiempos y acciones requeridas\n2. Usa emojis estratégicos: ⏰ (tiempo), ⚠️ (advertencia), 🔄 (reiniciar proceso)\n3. Estructura la información de forma jerárquica y visual\n4. Destaca el tiempo límite de *5 minutos* con formato apropiado\n\n**CONTENIDO REQUERIDO:**\n1. ⏰ Indica claramente que el tiempo de *5 minutos* para confirmar ha expirado\n2. ⚠️ Explica brevemente que esta restricción garantiza disponibilidad real y trazabilidad\n3. 🔄 Menciona que es necesario *reiniciar el proceso* debido a cambios constantes en el cronograma\n4. 📝 Solicita que proporcione *toda la información requerida* nuevamente\n5. 🙏 Agradece la comprensión de manera empática\n\n**TONO:** Profesional pero humano, empático reconociendo el inconveniente pero explicando claramente la necesidad del proceso.\n\n**EJEMPLO DE ESTRUCTURA ESPERADA:**\n⏰ *Tiempo de confirmación expirado*\n\n⚠️ El sistema no puede confirmar tu cita porque han transcurrido más de *5 minutos* desde que te presentamos las opciones disponibles.\n\nEsta restricción nos permite garantizar...\n🔄 Por favor, *reinicia el proceso* proporcionando...\n\n🙏 Agradecemos tu comprensión..."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -41952,
        -9632
      ],
      "id": "a48014ba-81df-407e-a65b-0b23a8e8280b",
      "name": "Basic LLM Notificar No Disponibilidad"
    },
    {
      "parameters": {
        "url": "https://graph.microsoft.com/v1.0/sites/a592f886-4560-4e62-9646-1eee7add7abe/drives/b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8/items/01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME/content",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "ExcelMallaRecibido2025"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -43008,
        -8912
      ],
      "id": "3d056a14-1932-459d-af5f-9d914ad8b7e5",
      "name": "HTTP Request MALLA DE RECIBO ",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "ExcelMallaRecibido2025",
        "options": {
          "sheetName": "={{ $('Unificación y consistencia de datos').item.json.hojaSeleccionada }}"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -42752,
        -9024
      ],
      "id": "876be6ba-5cde-4fc2-91ed-063f8c501a35",
      "name": "Extract MALLA DE RECIBO "
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del Excel\nconst excelData = $input.all();\nconst hojaSeleccionada = $('Unificación y consistencia de datos').first().json.hojaSeleccionada;\n\n// Obtener hora local en Bogotá\nconst ahora = new Date(new Date().toLocaleString(\"en-US\", { timeZone: \"America/Bogota\" }));\nconst diaSemanaActual = ahora.getDay(); // 0=domingo, 1=lunes, ..., 5=viernes\nconst horaActual = ahora.getHours();\nconst minutosActual = ahora.getMinutes();\n// Determinar si es después de las 16:30\nconst pasoLimiteDia = horaActual > 16 || (horaActual === 16 && minutosActual >= 30);\n\n// Definir estructura de la semana y los días\nconst diasSemana = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes'];\n\n// Mapeo para saber qué días incluir si hoy es x día y pasó el límite\n/**\n * Dado el día de la semana actual (0=domingo ... 6=sábado),\n * devuelve qué días de la semana actual deben incluirse según si pasó el límite.\n */\nfunction diasValidosSemanaActual(diaSemanaActual, pasoLimite) {\n  const mapa = {\n    1: ['martes', 'miércoles', 'jueves', 'viernes'],   // lunes\n    2: ['miércoles', 'jueves', 'viernes'],             // martes\n    3: ['jueves', 'viernes'],                          // miércoles\n    4: ['viernes'],                                     // jueves\n    5: []                                               // viernes (muy tarde para sábado)\n  };\n  if (diaSemanaActual < 1 || diaSemanaActual > 5) {\n    return []; // sábado o domingo no se agendan en semana actual\n  }\n  if (!pasoLimite) {\n    // aún está antes de las 4:30 p.m., se puede incluir el día siguiente\n    const siguiente = diasSemana[diaSemanaActual];\n    return [siguiente, ...mapa[diaSemanaActual]];\n  }\n  return mapa[diaSemanaActual];\n}\n\n// Objeto para almacenar la malla estructurada\nconst mallaEstructurada = {\n  titulo: \"\",\n  año: \"\",\n  semana: \"\",\n  rangoDias: \"\",\n  franjas: [],\n  dias: {}\n};\n\n// Tabla de meses y días. Ajusta si necesitas contemplar bisiestos, etc.\nconst meses = {\n  \"enero\": 1,\n  \"febrero\": 2,\n  \"marzo\": 3,\n  \"abril\": 4,\n  \"mayo\": 5,\n  \"junio\": 6,\n  \"julio\": 7,\n  \"agosto\": 8,\n  \"septiembre\": 9,\n  \"octubre\": 10,\n  \"noviembre\": 11,\n  \"diciembre\": 12\n};\n\nconst nombreMes = {\n  1: \"enero\",\n  2: \"febrero\",\n  3: \"marzo\",\n  4: \"abril\",\n  5: \"mayo\",\n  6: \"junio\",\n  7: \"julio\",\n  8: \"agosto\",\n  9: \"septiembre\",\n  10: \"octubre\",\n  11: \"noviembre\",\n  12: \"diciembre\"\n};\n\n/**\n * Función para determinar si un año es bisiesto\n * Un año es bisiesto si es divisible por 4, excepto aquellos divisibles por 100 \n * que no son divisibles por 400\n */\nfunction esBisiesto(year) {\n  return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n}\n\n/**\n * Función para obtener el número de días en un mes, considerando años bisiestos\n */\nfunction getDiasMes(mes, año) {\n  const diasPorMes = {\n    1: 31, // enero\n    2: esBisiesto(año) ? 29 : 28, // febrero - ajustado para año bisiesto\n    3: 31, // marzo\n    4: 30, // abril\n    5: 31, // mayo\n    6: 30, // junio\n    7: 31, // julio\n    8: 31, // agosto\n    9: 30, // septiembre\n    10: 31, // octubre\n    11: 30, // noviembre\n    12: 31  // diciembre\n  };\n  \n  return diasPorMes[mes];\n}\n\n/**\n * Función para eliminar acentos y pasar a minúsculas (para buscar palabras clave sin importar tildes ni mayúsculas).\n */\nfunction normalizarTexto(texto) {\n  if (typeof texto !== 'string') return \"\";\n  // Normaliza (NFD) y elimina diacríticos, luego pasa a minúsculas.\n  return texto\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\") // quita acentos\n    .toLowerCase();\n}\n\n/**\n * Dada la información de proveedor, ordenCompra, peso, categoría y unidades,\n * revisa si existe la palabra 'fuera de servicio', 'cancelado' o 'reagendado'\n * en cualquiera de esos campos. De ser así, retorna ese estado especial;\n * de lo contrario, retorna 'ocupado'.\n * \n * Se ignoran mayúsculas, minúsculas y tildes.\n */\nfunction determinarEstadoOcupado(proveedor, ordenCompra, peso, categoria, unidades) {\n  const conjunto = `${proveedor} ${ordenCompra} ${peso} ${categoria} ${unidades}`;\n  const texto = normalizarTexto(conjunto);\n\n  if (texto.includes(\"fuera de servicio\")) {\n    return \"fuera de servicio\";\n  }\n  if (texto.includes(\"cancelado\")) {\n    return \"cancelado\";\n  }\n  if (texto.includes(\"reagendado\")) {\n    return \"reagendado\";\n  }\n  return \"ocupado\";  \n}\n\n// -------------------------------------------------------------\n// 1) PROCESAR DATOS (Cabecera, Horas, Muelles, etc.)\n// -------------------------------------------------------------\nfunction procesarDatos(excelData) {\n  const datos = excelData.map(item => item.json);\n  \n  // A) Cabecera (Título, Año, Rango)\n  datos.forEach((dato, index) => {\n    // Buscar título\n    if (dato.__EMPTY_2 === \"MALLA DE RECIBO CEDI KONFIE IA\") {\n      mallaEstructurada.titulo = dato.__EMPTY_2;\n      \n      // En la siguiente fila puede estar año, semana, rango\n      if (index + 1 < datos.length) {\n        const datoSiguiente = datos[index + 1];\n        if (datoSiguiente) {\n          // Año\n          if (datoSiguiente.__EMPTY_2 && !isNaN(datoSiguiente.__EMPTY_2)) {\n            mallaEstructurada.año = datoSiguiente.__EMPTY_2;\n          }\n          // Semana\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"SEMANA\")) {\n              mallaEstructurada.semana = v;\n            }\n          });\n          // Rango: p.ej. \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"LUNES\") && v.includes(\"VIERNES\")) {\n              mallaEstructurada.rangoDias = v;\n            }\n          });\n        }\n      }\n    }\n  });\n  \n  // B) Detectar franjas horarias (.__EMPTY = fracción de día)\n  const franjasHorarias = [];\n  datos.forEach(dato => {\n    if (\n      dato.__EMPTY !== undefined &&\n      typeof dato.__EMPTY === 'number' &&\n      dato.__EMPTY > 0 &&\n      dato.__EMPTY < 1\n    ) {\n      const totalMin = Math.round(dato.__EMPTY * 24 * 60);\n      const hh = Math.floor(totalMin / 60);\n      const mm = totalMin % 60;\n      \n      let periodo = \"AM\";\n      let hora12 = hh;\n      if (hh >= 12) {\n        periodo = \"PM\";\n        hora12 = (hh === 12 ? 12 : hh - 12);\n      }\n      if (hh === 0) {\n        hora12 = 12;\n      }\n      \n      const horaStr = `${hora12}:${String(mm).padStart(2, '0')} ${periodo}`;\n      franjasHorarias.push({\n        hora: horaStr,\n        indice: datos.indexOf(dato) // fila base\n      });\n    }\n  });\n  franjasHorarias.sort((a, b) => a.indice - b.indice);\n  mallaEstructurada.franjas = franjasHorarias;\n  \n  // C) Detectar muelles (col)\n  const muellesInfo = {};\n  datos.forEach(dato => {\n    Object.entries(dato).forEach(([key, value]) => {\n      if (value === \"MUELLE 01\" || value === \"MUELLE 02\") {\n        const col = parseInt(key.replace(\"__EMPTY_\", \"\"), 10);\n        const muelleKey = (value === \"MUELLE 01\") ? 'muelle1' : 'muelle2';\n        if (!muellesInfo[muelleKey]) {\n          muellesInfo[muelleKey] = [];\n        }\n        muellesInfo[muelleKey].push(col);\n      }\n    });\n  });\n  if (muellesInfo.muelle1) muellesInfo.muelle1.sort((a, b) => a - b);\n  if (muellesInfo.muelle2) muellesInfo.muelle2.sort((a, b) => a - b);\n  \n  // D) Generar los 5 días (lunes-viernes) con su fecha\n  parsearRangoDias();\n  \n  // E) Extraer Citas\n  extraerCitas(datos, muellesInfo);\n  \n  return mallaEstructurada;\n}\n\n/**\n * Parsea la cadena \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n * (o \"LUNES 31 AL VIERNES 04 DE ABRIL\") y maneja el cruce de mes.\n * Ej.: si dayStart=31 y dayEnd=4, la 1ª fecha es 31 de MARZO,\n * luego 1,2,3,4 de ABRIL, en vez de 32,33, etc.\n */\nfunction parsearRangoDias() {\n  const texto = mallaEstructurada.rangoDias;\n  // Regex simple: p.ej. \"31 AL ... 4 DE ABRIL\"\n  // Captura: dayStart, dayEnd, mesFin\n  // Ojo: si dice \"LUNES 31 DE MARZO AL VIERNES 4 DE ABRIL\",\n  // quedará: dayStart=31, dayEnd=4, month=ABRIL (al final).\n  const regex = /(\\d+)\\s+AL\\s+\\D+(\\d+)\\s+DE\\s+(\\w+)/i;\n  const match = regex.exec(texto);\n  \n  // Por defecto, creamos 5 días vacíos sin fecha\n  diasSemana.forEach(d => {\n    mallaEstructurada.dias[d] = {\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  if (!match) {\n    // Sin coincidencia, dejamos los días sin fecha\n    return;\n  }\n  \n  const dayStart = parseInt(match[1], 10); // 31\n  const dayEnd   = parseInt(match[2], 10); // 4\n  const finalMonthName = match[3].toLowerCase(); // \"abril\"\n  \n  // Convertimos a número\n  const finalMonth = meses[finalMonthName] || 3; // fallback marzo\n  const yearNum = parseInt(mallaEstructurada.año, 10) || 2025;\n  \n  // Función para obtener la fecha formateada\n  function fechaFormateada(d, m, y) {\n    return `${d} de ${nombreMes[m]} de ${y}`;\n  }\n  \n  // Comprobamos cuántos días tiene el mes final, considerando bisiestos\n  const diasMesFinal = getDiasMes(finalMonth, yearNum);\n  // y del mes previo\n  const monthPrev = (finalMonth === 1) ? 12 : finalMonth - 1;\n  const yearPrev = (finalMonth === 1) ? yearNum - 1 : yearNum;\n  \n  // Arreglo final con 5 fechas\n  const fechasDias = [];\n  \n  if (dayStart <= dayEnd) {\n    // Caso \"normal\": todo en el mismo mes\n    let d = dayStart;\n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: finalMonth,\n        yearNum: yearNum\n      });\n      d++;\n      if (d > diasMesFinal) {\n        d = 1;\n        const nextMonth = finalMonth % 12 + 1;\n        const nextYear = (nextMonth === 1) ? yearNum + 1 : yearNum;\n        fechasDias[fechasDias.length - 1].mesNum = nextMonth;\n        fechasDias[fechasDias.length - 1].yearNum = nextYear;\n      }\n    }\n  } else {\n    // Caso \"cruza de mes\": dayStart > dayEnd\n    let d = dayStart;\n    let m = monthPrev;\n    let y = yearPrev;\n    \n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: m,\n        yearNum: y\n      });\n      d++;\n      if (d > getDiasMes(m, y)) {\n        d = 1;\n        m = m % 12 + 1;\n        if (m === 1) {\n          y++;\n        }\n      }\n    }\n  }\n  \n  // Ahora volcamos esas 5 fechas en la estructura\n  fechasDias.forEach(fd => {\n    const { diaSem, diaNum, mesNum, yearNum } = fd;\n    mallaEstructurada.dias[diaSem] = {\n      fechaDia: fechaFormateada(diaNum, mesNum, yearNum),\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  // Inicializamos las franjas a 'disponible'\n  if (mallaEstructurada.franjas.length > 0) {\n    diasSemana.forEach(d => {\n      mallaEstructurada.franjas.forEach(f => {\n        mallaEstructurada.dias[d].muelle1[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n        mallaEstructurada.dias[d].muelle2[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n      });\n    });\n  }\n}\n\n/**\n * Función auxiliar: decide a qué día pertenece una columna,\n * corrigiendo 2 columnas de offset (porque 'Extract from XLSX'\n * deja todo desplazado).\n */\nfunction getDayForColumn(colNumber) {\n  // Ajuste de offset +2\n  const realCol = colNumber + 2;\n\n  // Rangos:\n  //  Lunes:      3..8\n  //  Martes:     9..14\n  //  Miércoles: 15..20\n  //  Jueves:    21..26\n  //  Viernes:   27..32\n  if (realCol >= 3 && realCol <= 8) {\n    return \"lunes\";\n  }\n  if (realCol >= 9 && realCol <= 14) {\n    return \"martes\";\n  }\n  if (realCol >= 15 && realCol <= 20) {\n    return \"miércoles\";\n  }\n  if (realCol >= 21 && realCol <= 26) {\n    return \"jueves\";\n  }\n  if (realCol >= 27 && realCol <= 32) {\n    return \"viernes\";\n  }\n  // Si nada coincide, devolvemos null\n  return null;\n}\n\n/**\n * Extraer las citas para cada franja:\n * - Para cada franja, miramos 3 filas:\n *    - Fila base => proveedor\n *    - Fila base+1 => orden\n *    - Fila base+2 => peso, categoría, unidades\n */\nfunction extraerCitas(datos, muellesInfo) {\n  mallaEstructurada.franjas.forEach(franja => {\n    const indiceBase = franja.indice;\n    if (indiceBase < 0 || indiceBase + 2 >= datos.length) {\n      return; // no hay suficientes filas\n    }\n    \n    // Recorremos muelle1, muelle2 y sus columnas\n    const asignarCita = (muelleKey, cols) => {\n      cols.forEach(col => {\n        const provKey = `__EMPTY_${col}`;\n        const filaProv = datos[indiceBase];\n        \n        // Si en esta fila hay un proveedor o algún texto\n        if (\n          filaProv &&\n          typeof filaProv[provKey] === 'string' &&\n          filaProv[provKey].length > 2\n        ) {\n          // Determinar el día real\n          const diaOk = getDayForColumn(col);\n          if (!diaOk || !mallaEstructurada.dias[diaOk]) {\n            return; // si no coincide con ninguno, saltamos\n          }\n          \n          // Recuperar valores para proveedor, ordenCompra y demás\n          const filaOrden = datos[indiceBase + 1];\n          const filaDet = datos[indiceBase + 2];\n          \n          const proveedor = filaProv[provKey] || \"\";\n          const ordenCompra = filaOrden && filaOrden[provKey] ? filaOrden[provKey] : \"\";\n          const peso = filaDet && filaDet[provKey] ? filaDet[provKey] : \"\";\n          const cat  = filaDet && filaDet[`__EMPTY_${col + 1}`] ? filaDet[`__EMPTY_${col + 1}`] : \"\";\n          const und  = filaDet && filaDet[`__EMPTY_${col + 2}`] ? filaDet[`__EMPTY_${col + 2}`] : \"\";\n          \n          // Antes poníamos estado=\"ocupado\" directamente\n          // Ahora verificamos si el texto contiene \"reagendado\", \"cancelado\" o \"fuera de servicio\".\n          const nuevoEstado = determinarEstadoOcupado(proveedor, ordenCompra, peso, cat, und);\n          \n          // Asignamos los datos\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].estado = nuevoEstado;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].proveedor = proveedor;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].ordenCompra = ordenCompra;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].peso = peso;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].categoria = cat;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].unidades = und;\n        }\n      });\n    };\n    \n    if (muellesInfo.muelle1) {\n      asignarCita('muelle1', muellesInfo.muelle1);\n    }\n    if (muellesInfo.muelle2) {\n      asignarCita('muelle2', muellesInfo.muelle2);\n    }\n  });\n}\n\n// -------------------------------------------------------------\n// 2) FUNCIONES PARA CONSULTAR LA MALLA\n// -------------------------------------------------------------\nfunction buscarFranjasDisponibles(categoria, duracionHoras) {\n  const muelle = \"muelle1\"; // Ajusta si usas \"categoria -> muelle\" real\n  \n  const franjasDisponibles = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const libres = [];\n    for (let i = 0; i <= mallaEstructurada.franjas.length - duracionHoras; i++) {\n      let disponible = true;\n      for (let h = 0; h < duracionHoras; h++) {\n        const idxF = i + h;\n        const horaAct = mallaEstructurada.franjas[idxF].hora;\n        if (\n          mallaEstructurada.dias[dia][muelle][horaAct].estado !== 'disponible'\n        ) {\n          disponible = false;\n          break;\n        }\n      }\n      if (disponible) {\n        libres.push({\n          horaInicio: mallaEstructurada.franjas[i].hora,\n          duracion: duracionHoras\n        });\n      }\n    }\n    if (libres.length > 0) {\n      franjasDisponibles.push({ dia, franjas: libres });\n    }\n  });\n  return franjasDisponibles;\n}\n\nfunction buscarCitasProveedor(nombreProveedor) {\n  const citas = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const muelle1 = mallaEstructurada.dias[dia].muelle1;\n    const muelle2 = mallaEstructurada.dias[dia].muelle2;\n    mallaEstructurada.franjas.forEach(f => {\n      const hora = f.hora;\n      // muelle1\n      if (normalizarTexto(muelle1[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 01\",\n          ordenCompra: muelle1[hora].ordenCompra,\n          peso: muelle1[hora].peso,\n          categoria: muelle1[hora].categoria,\n          unidades: muelle1[hora].unidades,\n          estado: muelle1[hora].estado\n        });\n      }\n      // muelle2\n      if (normalizarTexto(muelle2[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 02\",\n          ordenCompra: muelle2[hora].ordenCompra,\n          peso: muelle2[hora].peso,\n          categoria: muelle2[hora].categoria,\n          unidades: muelle2[hora].unidades,\n          estado: muelle2[hora].estado\n        });\n      }\n    });\n  });\n  return citas;\n}\n\nfunction consultarFranjasDisponibles(categoria, duracionHoras) {\n  return buscarFranjasDisponibles(categoria, duracionHoras);\n}\n\nfunction consultarCitasProveedor(nombreProveedor) {\n  return buscarCitasProveedor(nombreProveedor);\n}\n\nfunction obtenerInfoMalla() {\n  return {\n    titulo: mallaEstructurada.titulo,\n    año: mallaEstructurada.año,\n    semana: mallaEstructurada.semana,\n    rangoDias: mallaEstructurada.rangoDias,\n    franjas: mallaEstructurada.franjas.map(f => f.hora)\n  };\n}\n\nfunction estaDisponible(dia, hora, muelle) {\n  const info = mallaEstructurada.dias[dia]?.[muelle]?.[hora];\n  return info ? (info.estado === 'disponible') : false;\n}\n\nfunction obtenerCoordenadasCita(dia, hora, muelle) {\n  // Ajustar con tu mapeo de celdas en Excel\n  return {\n    proveedor: `${dia}_${hora}_${muelle}_proveedor`,\n    ordenCompra: `${dia}_${hora}_${muelle}_ordenCompra`,\n    peso: `${dia}_${hora}_${muelle}_peso`,\n    categoria: `${dia}_${hora}_${muelle}_categoria`,\n    unidades: `${dia}_${hora}_${muelle}_unidades`\n  };\n}\n\n// -------------------------------------------------------------\n// 3) EJECUTAR TODO Y RETORNAR\n// -------------------------------------------------------------\n// Procesar todos los datos\nconst malla = procesarDatos(excelData);\n\n// Aplicar el filtro de días válidos según la hora actual\nconst diasPermitidos = diasValidosSemanaActual(diaSemanaActual, pasoLimiteDia);\nObject.keys(malla.dias).forEach(dia => {\n  if (!diasPermitidos.includes(dia)) {\n    delete malla.dias[dia]; // eliminar días no válidos\n  }\n});\n\nconst resultado = {\n  datosMalla: malla,\n  funciones: {\n    consultarFranjasDisponibles,\n    consultarCitasProveedor,\n    obtenerInfoMalla,\n    estaDisponible,\n    obtenerCoordenadasCita\n  }\n};\n\nreturn [resultado];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -42512,
        -9024
      ],
      "id": "17c0d12b-b5bd-4ac1-a2d9-351efb21477a",
      "name": "Estructuración, Datos, Consulta, Citas1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -42192,
        -8928
      ],
      "id": "fdf977f0-2e01-4cd2-a1d2-6471e5102e8f",
      "name": "Merge datos Excel1"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    datosMalla: $items(\"Merge datos Excel1\")[0].json.datosMalla,\n    datosMallaProxSemana: $items(\"Merge datos Excel1\")[1].json.datosMallaProxSemana,\n    hojaSeleccionada: $items(\"Merge datos Excel1\")[0].json.datosMalla.semana\n  }\n}];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -41936,
        -8928
      ],
      "id": "bb93227f-3514-41ea-975d-aee61ed2b78f",
      "name": "Unificación y consistencia de datos2"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "ExcelMallaRecibido2025",
        "options": {
          "sheetName": "={{    (function() {     const semanaActual = $('Unificación y consistencia de datos').item.json.hojaSeleccionada;     const numeroSemana = parseInt(semanaActual.replace(\"SEMANA \", \"\"));     return `SEMANA ${numeroSemana + 1}`;   })() }}"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -42752,
        -8832
      ],
      "id": "d0d6bb54-82ab-4253-8d95-1ee8ac4c316f",
      "name": "Extract MALLA DE RECIBO Semana Siguiente1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Si el nodo anterior no devolvió datos (por error al no existir la hoja), retornamos estructura vacía con mensaje\n// Obtener los datos del Excel\nconst excelData = $input.all();\n\n// Mejora en la detección de errores: verificar si hay error explícito o si los datos no son válidos\nconst hayError = excelData.some(item => item.json && item.json.error);\nconst datosInvalidos = !excelData || excelData.length === 0 || hayError;\n\nif (datosInvalidos) {\n  return [{\n    datosMallaProxSemana: {\n      titulo: \"⚠️ La malla de la próxima semana no existe en el archivo Excel o aún no ha sido creada.\",\n      año: \"\",\n      semana: \"\",\n      rangoDias: \"\",\n      franjas: [],\n      dias: {\n        lunes: { muelle1: {}, muelle2: {} },\n        martes: { muelle1: {}, muelle2: {} },\n        miércoles: { muelle1: {}, muelle2: {} },\n        jueves: { muelle1: {}, muelle2: {} },\n        viernes: { muelle1: {}, muelle2: {} }\n      }\n    },\n    funciones: {\n      consultarFranjasDisponibles: \"function not available\",\n      consultarCitasProveedor: \"function not available\",\n      obtenerInfoMalla: \"function not available\",\n      estaDisponible: \"function not available\",\n      obtenerCoordenadasCita: \"function not available\"\n    }\n  }];\n}\n\n// El resto del código permanece igual...\nconst hojaSeleccionada = $('Unificación y consistencia de datos').first().json.hojaSeleccionada;\n\n// Definir estructura de la semana y los días\nconst diasSemana = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes'];\n\n// Objeto para almacenar la malla estructurada\nconst mallaEstructurada = {\n  titulo: \"\",\n  año: \"\",\n  semana: \"\",\n  rangoDias: \"\",\n  franjas: [],\n  dias: {}\n};\n\n// Tabla de meses y días. Ajusta si necesitas contemplar bisiestos, etc.\nconst meses = {\n  \"enero\": 1,\n  \"febrero\": 2,\n  \"marzo\": 3,\n  \"abril\": 4,\n  \"mayo\": 5,\n  \"junio\": 6,\n  \"julio\": 7,\n  \"agosto\": 8,\n  \"septiembre\": 9,\n  \"octubre\": 10,\n  \"noviembre\": 11,\n  \"diciembre\": 12\n};\n\nconst nombreMes = {\n  1: \"enero\",\n  2: \"febrero\",\n  3: \"marzo\",\n  4: \"abril\",\n  5: \"mayo\",\n  6: \"junio\",\n  7: \"julio\",\n  8: \"agosto\",\n  9: \"septiembre\",\n  10: \"octubre\",\n  11: \"noviembre\",\n  12: \"diciembre\"\n};\n\n/**\n * Función para determinar si un año es bisiesto\n * Un año es bisiesto si es divisible por 4, excepto aquellos divisibles por 100 \n * que no son divisibles por 400\n */\nfunction esBisiesto(year) {\n  return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n}\n\n/**\n * Función para obtener el número de días en un mes, considerando años bisiestos\n */\nfunction getDiasMes(mes, año) {\n  const diasPorMes = {\n    1: 31, // enero\n    2: esBisiesto(año) ? 29 : 28, // febrero - ajustado para año bisiesto\n    3: 31, // marzo\n    4: 30, // abril\n    5: 31, // mayo\n    6: 30, // junio\n    7: 31, // julio\n    8: 31, // agosto\n    9: 30, // septiembre\n    10: 31, // octubre\n    11: 30, // noviembre\n    12: 31  // diciembre\n  };\n  \n  return diasPorMes[mes];\n}\n\n/**\n * Función para eliminar acentos y pasar a minúsculas (para buscar palabras clave sin importar tildes ni mayúsculas).\n */\nfunction normalizarTexto(texto) {\n  if (typeof texto !== 'string') return \"\";\n  // Normaliza (NFD) y elimina diacríticos, luego pasa a minúsculas.\n  return texto\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\") // quita acentos\n    .toLowerCase();\n}\n\n/**\n * Dada la información de proveedor, ordenCompra, peso, categoría y unidades,\n * revisa si existe la palabra 'fuera de servicio', 'cancelado' o 'reagendado'\n * en cualquiera de esos campos. De ser así, retorna ese estado especial;\n * de lo contrario, retorna 'ocupado'.\n * \n * Se ignoran mayúsculas, minúsculas y tildes.\n */\nfunction determinarEstadoOcupado(proveedor, ordenCompra, peso, categoria, unidades) {\n  const conjunto = `${proveedor} ${ordenCompra} ${peso} ${categoria} ${unidades}`;\n  const texto = normalizarTexto(conjunto);\n\n  if (texto.includes(\"fuera de servicio\")) {\n    return \"fuera de servicio\";\n  }\n  if (texto.includes(\"cancelado\")) {\n    return \"cancelado\";\n  }\n  if (texto.includes(\"reagendado\")) {\n    return \"reagendado\";\n  }\n  return \"ocupado\";  \n}\n\n// -------------------------------------------------------------\n// 1) PROCESAR DATOS (Cabecera, Horas, Muelles, etc.)\n// -------------------------------------------------------------\nfunction procesarDatos(excelData) {\n  // Verificación adicional de datos válidos\n  if (!excelData || !Array.isArray(excelData) || excelData.length === 0) {\n    return {\n      titulo: \"⚠️ La malla de la próxima semana no existe en el archivo Excel o aún no ha sido creada.\",\n      año: \"\",\n      semana: \"\",\n      rangoDias: \"\",\n      franjas: [],\n      dias: {\n        lunes: { muelle1: {}, muelle2: {} },\n        martes: { muelle1: {}, muelle2: {} },\n        miércoles: { muelle1: {}, muelle2: {} },\n        jueves: { muelle1: {}, muelle2: {} },\n        viernes: { muelle1: {}, muelle2: {} }\n      }\n    };\n  }\n  \n  // Intentar mapear datos, con manejo de errores para cada item\n  const datos = excelData.map(item => {\n    try {\n      return item.json || {};\n    } catch (e) {\n      return {};\n    }\n  });\n  \n  // A) Cabecera (Título, Año, Rango)\n  datos.forEach((dato, index) => {\n    // Buscar título\n    if (dato.__EMPTY_2 === \"MALLA DE RECIBO CEDI KONFIE IA\") {\n      mallaEstructurada.titulo = dato.__EMPTY_2;\n      \n      // En la siguiente fila puede estar año, semana, rango\n      if (index + 1 < datos.length) {\n        const datoSiguiente = datos[index + 1];\n        if (datoSiguiente) {\n          // Año\n          if (datoSiguiente.__EMPTY_2 && !isNaN(datoSiguiente.__EMPTY_2)) {\n            mallaEstructurada.año = datoSiguiente.__EMPTY_2;\n          }\n          // Semana\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"SEMANA\")) {\n              mallaEstructurada.semana = v;\n            }\n          });\n          // Rango: p.ej. \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"LUNES\") && v.includes(\"VIERNES\")) {\n              mallaEstructurada.rangoDias = v;\n            }\n          });\n        }\n      }\n    }\n  });\n  \n  // Si después de procesar no encontramos título, es que no hay malla válida\n  if (!mallaEstructurada.titulo) {\n    mallaEstructurada.titulo = \"⚠️ La malla de la próxima semana no existe en el archivo Excel o aún no ha sido creada.\";\n    return mallaEstructurada;\n  }\n  \n  // B) Detectar franjas horarias (.__EMPTY = fracción de día)\n  const franjasHorarias = [];\n  datos.forEach(dato => {\n    if (\n      dato.__EMPTY !== undefined &&\n      typeof dato.__EMPTY === 'number' &&\n      dato.__EMPTY > 0 &&\n      dato.__EMPTY < 1\n    ) {\n      const totalMin = Math.round(dato.__EMPTY * 24 * 60);\n      const hh = Math.floor(totalMin / 60);\n      const mm = totalMin % 60;\n      \n      let periodo = \"AM\";\n      let hora12 = hh;\n      if (hh >= 12) {\n        periodo = \"PM\";\n        hora12 = (hh === 12 ? 12 : hh - 12);\n      }\n      if (hh === 0) {\n        hora12 = 12;\n      }\n      \n      const horaStr = `${hora12}:${String(mm).padStart(2, '0')} ${periodo}`;\n      franjasHorarias.push({\n        hora: horaStr,\n        indice: datos.indexOf(dato) // fila base\n      });\n    }\n  });\n  franjasHorarias.sort((a, b) => a.indice - b.indice);\n  mallaEstructurada.franjas = franjasHorarias;\n  \n  // C) Detectar muelles (col)\n  const muellesInfo = {};\n  datos.forEach(dato => {\n    Object.entries(dato).forEach(([key, value]) => {\n      if (value === \"MUELLE 01\" || value === \"MUELLE 02\") {\n        const col = parseInt(key.replace(\"__EMPTY_\", \"\"), 10);\n        const muelleKey = (value === \"MUELLE 01\") ? 'muelle1' : 'muelle2';\n        if (!muellesInfo[muelleKey]) {\n          muellesInfo[muelleKey] = [];\n        }\n        muellesInfo[muelleKey].push(col);\n      }\n    });\n  });\n  if (muellesInfo.muelle1) muellesInfo.muelle1.sort((a, b) => a - b);\n  if (muellesInfo.muelle2) muellesInfo.muelle2.sort((a, b) => a - b);\n  \n  // D) Generar los 5 días (lunes-viernes) con su fecha\n  parsearRangoDias();\n  \n  // E) Extraer Citas\n  extraerCitas(datos, muellesInfo);\n  \n  return mallaEstructurada;\n}\n\n/**\n * Parsea la cadena \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n * (o \"LUNES 31 AL VIERNES 04 DE ABRIL\") y maneja el cruce de mes.\n * Ej.: si dayStart=31 y dayEnd=4, la 1ª fecha es 31 de MARZO,\n * luego 1,2,3,4 de ABRIL, en vez de 32,33, etc.\n */\nfunction parsearRangoDias() {\n  const texto = mallaEstructurada.rangoDias;\n  // Regex simple: p.ej. \"31 AL ... 4 DE ABRIL\"\n  // Captura: dayStart, dayEnd, mesFin\n  // Ojo: si dice \"LUNES 31 DE MARZO AL VIERNES 4 DE ABRIL\",\n  // quedará: dayStart=31, dayEnd=4, month=ABRIL (al final).\n  const regex = /(\\d+)\\s+AL\\s+\\D+(\\d+)\\s+DE\\s+(\\w+)/i;\n  const match = regex.exec(texto);\n  \n  // Por defecto, creamos 5 días vacíos sin fecha\n  diasSemana.forEach(d => {\n    mallaEstructurada.dias[d] = {\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  if (!match) {\n    // Sin coincidencia, dejamos los días sin fecha\n    return;\n  }\n  \n  const dayStart = parseInt(match[1], 10); // 31\n  const dayEnd   = parseInt(match[2], 10); // 4\n  const finalMonthName = match[3].toLowerCase(); // \"abril\"\n  \n  // Convertimos a número\n  const finalMonth = meses[finalMonthName] || 3; // fallback marzo\n  const yearNum = parseInt(mallaEstructurada.año, 10) || 2025;\n  \n  // Función para obtener la fecha formateada\n  function fechaFormateada(d, m, y) {\n    return `${d} de ${nombreMes[m]} de ${y}`;\n  }\n  \n  // Comprobamos cuántos días tiene el mes final, considerando bisiestos\n  const diasMesFinal = getDiasMes(finalMonth, yearNum);\n  // y del mes previo\n  const monthPrev = (finalMonth === 1) ? 12 : finalMonth - 1;\n  const yearPrev = (finalMonth === 1) ? yearNum - 1 : yearNum;\n  \n  // Arreglo final con 5 fechas\n  const fechasDias = [];\n  \n  if (dayStart <= dayEnd) {\n    // Caso \"normal\": todo en el mismo mes\n    let d = dayStart;\n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: finalMonth,\n        yearNum: yearNum\n      });\n      d++;\n      if (d > diasMesFinal) {\n        d = 1;\n        const nextMonth = finalMonth % 12 + 1;\n        const nextYear = (nextMonth === 1) ? yearNum + 1 : yearNum;\n        fechasDias[fechasDias.length - 1].mesNum = nextMonth;\n        fechasDias[fechasDias.length - 1].yearNum = nextYear;\n      }\n    }\n  } else {\n    // Caso \"cruza de mes\": dayStart > dayEnd\n    let d = dayStart;\n    let m = monthPrev;\n    let y = yearPrev;\n    \n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: m,\n        yearNum: y\n      });\n      d++;\n      if (d > getDiasMes(m, y)) {\n        d = 1;\n        m = m % 12 + 1;\n        if (m === 1) {\n          y++;\n        }\n      }\n    }\n  }\n  \n  // Ahora volcamos esas 5 fechas en la estructura\n  fechasDias.forEach(fd => {\n    const { diaSem, diaNum, mesNum, yearNum } = fd;\n    mallaEstructurada.dias[diaSem] = {\n      fechaDia: fechaFormateada(diaNum, mesNum, yearNum),\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  // Inicializamos las franjas a 'disponible'\n  if (mallaEstructurada.franjas.length > 0) {\n    diasSemana.forEach(d => {\n      mallaEstructurada.franjas.forEach(f => {\n        mallaEstructurada.dias[d].muelle1[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n        mallaEstructurada.dias[d].muelle2[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n      });\n    });\n  }\n}\n\n/**\n * Función auxiliar: decide a qué día pertenece una columna,\n * corrigiendo 2 columnas de offset (porque 'Extract from XLSX'\n * deja todo desplazado).\n */\nfunction getDayForColumn(colNumber) {\n  // Ajuste de offset +2\n  const realCol = colNumber + 2;\n\n  // Rangos:\n  //  Lunes:      3..8\n  //  Martes:     9..14\n  //  Miércoles: 15..20\n  //  Jueves:    21..26\n  //  Viernes:   27..32\n  if (realCol >= 3 && realCol <= 8) {\n    return \"lunes\";\n  }\n  if (realCol >= 9 && realCol <= 14) {\n    return \"martes\";\n  }\n  if (realCol >= 15 && realCol <= 20) {\n    return \"miércoles\";\n  }\n  if (realCol >= 21 && realCol <= 26) {\n    return \"jueves\";\n  }\n  if (realCol >= 27 && realCol <= 32) {\n    return \"viernes\";\n  }\n  // Si nada coincide, devolvemos null\n  return null;\n}\n\n/**\n * Extraer las citas para cada franja:\n * - Para cada franja, miramos 3 filas:\n *    - Fila base => proveedor\n *    - Fila base+1 => orden\n *    - Fila base+2 => peso, categoría, unidades\n */\nfunction extraerCitas(datos, muellesInfo) {\n  mallaEstructurada.franjas.forEach(franja => {\n    const indiceBase = franja.indice;\n    if (indiceBase < 0 || indiceBase + 2 >= datos.length) {\n      return; // no hay suficientes filas\n    }\n    \n    // Recorremos muelle1, muelle2 y sus columnas\n    const asignarCita = (muelleKey, cols) => {\n      cols.forEach(col => {\n        const provKey = `__EMPTY_${col}`;\n        const filaProv = datos[indiceBase];\n        \n        // Si en esta fila hay un proveedor o algún texto\n        if (\n          filaProv &&\n          typeof filaProv[provKey] === 'string' &&\n          filaProv[provKey].length > 2\n        ) {\n          // Determinar el día real\n          const diaOk = getDayForColumn(col);\n          if (!diaOk || !mallaEstructurada.dias[diaOk]) {\n            return; // si no coincide con ninguno, saltamos\n          }\n          \n          // Recuperar valores para proveedor, ordenCompra y demás\n          const filaOrden = datos[indiceBase + 1];\n          const filaDet = datos[indiceBase + 2];\n          \n          const proveedor = filaProv[provKey] || \"\";\n          const ordenCompra = filaOrden && filaOrden[provKey] ? filaOrden[provKey] : \"\";\n          const peso = filaDet && filaDet[provKey] ? filaDet[provKey] : \"\";\n          const cat  = filaDet && filaDet[`__EMPTY_${col + 1}`] ? filaDet[`__EMPTY_${col + 1}`] : \"\";\n          const und  = filaDet && filaDet[`__EMPTY_${col + 2}`] ? filaDet[`__EMPTY_${col + 2}`] : \"\";\n          \n          // Antes poníamos estado=\"ocupado\" directamente\n          // Ahora verificamos si el texto contiene \"reagendado\", \"cancelado\" o \"fuera de servicio\".\n          const nuevoEstado = determinarEstadoOcupado(proveedor, ordenCompra, peso, cat, und);\n          \n          // Asignamos los datos\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].estado = nuevoEstado;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].proveedor = proveedor;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].ordenCompra = ordenCompra;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].peso = peso;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].categoria = cat;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].unidades = und;\n        }\n      });\n    };\n    \n    if (muellesInfo.muelle1) {\n      asignarCita('muelle1', muellesInfo.muelle1);\n    }\n    if (muellesInfo.muelle2) {\n      asignarCita('muelle2', muellesInfo.muelle2);\n    }\n  });\n}\n\n// -------------------------------------------------------------\n// 2) FUNCIONES PARA CONSULTAR LA MALLA\n// -------------------------------------------------------------\nfunction buscarFranjasDisponibles(categoria, duracionHoras) {\n  const muelle = \"muelle1\"; // Ajusta si usas \"categoria -> muelle\" real\n  \n  const franjasDisponibles = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const libres = [];\n    for (let i = 0; i <= mallaEstructurada.franjas.length - duracionHoras; i++) {\n      let disponible = true;\n      for (let h = 0; h < duracionHoras; h++) {\n        const idxF = i + h;\n        const horaAct = mallaEstructurada.franjas[idxF].hora;\n        if (\n          mallaEstructurada.dias[dia][muelle][horaAct].estado !== 'disponible'\n        ) {\n          disponible = false;\n          break;\n        }\n      }\n      if (disponible) {\n        libres.push({\n          horaInicio: mallaEstructurada.franjas[i].hora,\n          duracion: duracionHoras\n        });\n      }\n    }\n    if (libres.length > 0) {\n      franjasDisponibles.push({ dia, franjas: libres });\n    }\n  });\n  return franjasDisponibles;\n}\n\nfunction buscarCitasProveedor(nombreProveedor) {\n  const citas = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const muelle1 = mallaEstructurada.dias[dia].muelle1;\n    const muelle2 = mallaEstructurada.dias[dia].muelle2;\n    mallaEstructurada.franjas.forEach(f => {\n      const hora = f.hora;\n      // muelle1\n      if (normalizarTexto(muelle1[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 01\",\n          ordenCompra: muelle1[hora].ordenCompra,\n          peso: muelle1[hora].peso,\n          categoria: muelle1[hora].categoria,\n          unidades: muelle1[hora].unidades,\n          estado: muelle1[hora].estado\n        });\n      }\n      // muelle2\n      if (normalizarTexto(muelle2[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 02\",\n          ordenCompra: muelle2[hora].ordenCompra,\n          peso: muelle2[hora].peso,\n          categoria: muelle2[hora].categoria,\n          unidades: muelle2[hora].unidades,\n          estado: muelle2[hora].estado\n        });\n      }\n    });\n  });\n  return citas;\n}\n\nfunction consultarFranjasDisponibles(categoria, duracionHoras) {\n  return buscarFranjasDisponibles(categoria, duracionHoras);\n}\n\nfunction consultarCitasProveedor(nombreProveedor) {\n  return buscarCitasProveedor(nombreProveedor);\n}\n\nfunction obtenerInfoMalla() {\n  return {\n    titulo: mallaEstructurada.titulo,\n    año: mallaEstructurada.año,\n    semana: mallaEstructurada.semana,\n    rangoDias: mallaEstructurada.rangoDias,\n    franjas: mallaEstructurada.franjas.map(f => f.hora)\n  };\n}\n\nfunction estaDisponible(dia, hora, muelle) {\n  const info = mallaEstructurada.dias[dia]?.[muelle]?.[hora];\n  return info ? (info.estado === 'disponible') : false;\n}\n\nfunction obtenerCoordenadasCita(dia, hora, muelle) {\n  // Ajustar con tu mapeo de celdas en Excel\n  return {\n    proveedor: `${dia}_${hora}_${muelle}_proveedor`,\n    ordenCompra: `${dia}_${hora}_${muelle}_ordenCompra`,\n    peso: `${dia}_${hora}_${muelle}_peso`,\n    categoria: `${dia}_${hora}_${muelle}_categoria`,\n    unidades: `${dia}_${hora}_${muelle}_unidades`\n  };\n}\n\n// -------------------------------------------------------------\n// 3) EJECUTAR TODO Y RETORNAR\n// -------------------------------------------------------------\nconst malla = procesarDatos(excelData);\n\nconst resultado = {\n  datosMallaProxSemana: malla,\n  funciones: {\n    consultarFranjasDisponibles,\n    consultarCitasProveedor,\n    obtenerInfoMalla,\n    estaDisponible,\n    obtenerCoordenadasCita\n  }\n};\n\nreturn [resultado];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -42512,
        -8832
      ],
      "id": "42a1e4a9-2157-4a0d-bae7-08a10af6f1bd",
      "name": "Estructuración, Datos, Consulta, Citas Proxima Semana1"
    },
    {
      "parameters": {
        "jsCode": "// =========  VALIDACIÓN DE CITA EN CRONOGRAMA  =========\n// Valida que la franja siga libre justo después de la confirmación del proveedor\n\n// NUEVO: Detectar retractación al inicio\nconst validacionSeleccion = $input.first().json.output;\n\nif (validacionSeleccion.esRetractacion === true) {\n  return [{\n    json: {\n      franjaDisponible: false,\n      esRetractacion: true,\n      forzarReset: true,\n      motivoRetractacion: validacionSeleccion.motivoRetractacion,\n      mensajeReset: \"🔄 **Proceso reiniciado por cambios múltiples**\\n\\nPara evitar errores, cuando te presento opciones, por favor elige una de la lista.\\n\\n📝 Proporciona todos los datos completos en un solo mensaje:\\n• Proveedor\\n• Fecha\\n• Hora\\n• Categoría\\n• Peso\\n• Unidades\\n• Orden de compra\"\n    }\n  }];\n}\n\nfunction validarDisponibilidadCitaEnCronograma(items) {\n  try {\n    /* 1. --- Datos que vienen del nodo de verificación de tiempo --- */\n    const resp = $node[\"Code Verificar Tiempo Transcurrido\"].json.respuesta.alternativasDisponibles;\n    if (!resp) {\n      return [{ json:{ franjaDisponible:false, mensaje:\"No se encontró la cita a validar.\" } }];\n    }\n\n    /* 2. --- ¿El proveedor eligió una alternativa? ------------------ */\n    const salidaLLM      = items[0].json.output ?? items[0].json;   // el LLM suele venir como root\n    const tieneAlt       = salidaLLM?.seleccionaAlternativa === true;\n    const datosValidar   = tieneAlt && salidaLLM.datosSeleccionados\n      ? salidaLLM.datosSeleccionados\n      : {\n          fecha           : resp.fecha,\n          fechaFormateada : resp.fechaFormateada,\n          horaInicio      : resp.horaInicio,\n          horaFin         : resp.horaFin,\n          muelle          : resp.muelle,\n          duracionHoras   : resp.duracionHoras       // puede venir undefined\n        };\n\n    /* --- Si no llegó duracionHoras, la calculamos ------------------ */\n    if (!datosValidar.duracionHoras) {\n      datosValidar.duracionHoras = calcularDuracionAproximada(\n        datosValidar.horaInicio, datosValidar.horaFin\n      );\n    }\n\n    /* 3. --- Mallas de la semana actual y próxima ------------------- */\n    const nodoDatos = $node[\"Unificación y consistencia de datos2\"].json;\n    const datosMalla = nodoDatos.datosMalla;\n    const datosMallaProxSemana = nodoDatos.datosMallaProxSemana;\n    \n    if (!datosMalla || !datosMallaProxSemana) {\n      return [{ json:{ franjaDisponible:false, mensaje:\"No llegó la malla horaria.\" } }];\n    }\n\n    /* 4. --- Validación propiamente dicha --------------------------- */\n    // Variable para almacenar qué malla se utilizó en la verificación\n  let mallaUtilizada = null;\n  \n  const disponible = verificarDisponibilidadHoraSolicitada(\n      datosValidar.fecha,\n      datosValidar.horaInicio,\n      datosValidar.muelle,\n      datosValidar.duracionHoras,\n      datosMalla,\n      datosMallaProxSemana,\n      (malla) => { mallaUtilizada = malla; } // Callback para capturar la malla usada\n    );\n\n    // Obtener el número de semana de la malla utilizada para la validación\n    const nombreHoja = disponible && mallaUtilizada ? mallaUtilizada.semana : null;\n    \n    const respuesta = {\n      franjaDisponible : disponible,\n      mensaje : disponible\n        ? `¡Genial! Hay espacio para el ${datosValidar.fecha}, de ` +\n          `${datosValidar.horaInicio} a ${datosValidar.horaFin} en ${datosValidar.muelle}.`\n        : \"Lo siento, la franja horaria seleccionada ya no está disponible. \" +\n          \"Por favor elige otra opción.\",\n      datosValidados : {\n        ...datosValidar,\n        disponibilidadConfirmada : disponible\n      },\n      nombreHoja : nombreHoja // Agregamos el nombre de la hoja donde se debe insertar la cita\n    };\n\n    return [{ json: respuesta }];\n\n  } catch (err) {\n    console.error(\"Error en validación:\", err);\n    return [{ json:{ franjaDisponible:false, mensaje:`Error al validar: ${err.message}` } }];\n  }\n}\n\n/* ═══════════════════════════════════════════════════════════════════\n *  UTILIDADES \n * ═════════════════════════════════════════════════════════════════ */\n\nfunction verificarDisponibilidadHoraSolicitada(\n  fechaSolicitada, horaSolicitada, muelle, horasNecesarias,\n  mallaActual, mallaProxima, callbackMalla = null\n){\n  try {\n    // --- Normalizamos -------------------------------------------------\n    if (!fechaSolicitada || !horaSolicitada || !muelle) return false;\n\n    const fechaObj  = parsearFechaEspanol(fechaSolicitada);\n    const malla     = seleccionarMallaParaFecha(fechaObj, mallaActual, mallaProxima);\n    if (!malla) return false;\n    \n    // Si se proporcionó una función callback, llamarla con la malla seleccionada\n    if (typeof callbackMalla === 'function') {\n      callbackMalla(malla);\n    }\n\n    const diaSem    = obtenerDiaSemanaEspanol(fechaObj);\n    const keyMuelle = normalizarMuelle(muelle);\n\n    if (!malla.dias[diaSem] || !malla.dias[diaSem][keyMuelle]) return false;\n\n    if (!malla.franjas || !Array.isArray(malla.franjas)) return false;\n    const franjas   = malla.franjas.map(f => f.hora);\n    const idxInicio = franjas.findIndex(h => limpiarHora(h) === limpiarHora(horaSolicitada));\n    \n    if (idxInicio === -1 || idxInicio + horasNecesarias > franjas.length) return false;\n\n    for (let i = 0; i < horasNecesarias; i++) {\n      const hora = franjas[idxInicio + i];\n      const fr   = malla.dias[diaSem][keyMuelle][hora];\n      if (!fr || (fr.estado ?? \"\").toLowerCase() !== \"disponible\") return false;\n    }\n    return true;\n  } catch(e){ \n    console.error(\"Error en verificarDisponibilidadHoraSolicitada:\", e); \n    return false; \n  }\n}\n\n/* ---------- Helpers de normalización ------------------------------ */\nconst limpiarHora = h => h.trim().replace(/^0+(?=\\d)/, \"\").toUpperCase();\n\nfunction normalizarMuelle(txt = \"\") {\n  return txt\n    .toLowerCase()\n    .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") // sin tildes\n    .replace(/\\s+/g, \"\");\n}\n\n/* ---- FIX: elegir malla correcta cuando el rango cruza de mes ----- */\nfunction seleccionarMallaParaFecha(fechaObj, mallaActual, mallaProxima){\n  const dentro = (malla) => {\n    if (!malla) return false;\n    const r = rangoDesdeDias(malla);\n    if (!r) return false;\n    \n    // Simplificar comparación ignorando horas/minutos/segundos\n    const fechaSimple = new Date(fechaObj.getFullYear(), fechaObj.getMonth(), fechaObj.getDate());\n    const inicioSimple = new Date(r.inicio.getFullYear(), r.inicio.getMonth(), r.inicio.getDate());\n    const finSimple = new Date(r.fin.getFullYear(), r.fin.getMonth(), r.fin.getDate());\n    \n    return fechaSimple >= inicioSimple && fechaSimple <= finSimple;\n  };\n  \n  if (dentro(mallaActual)) return mallaActual;\n  if (dentro(mallaProxima)) return mallaProxima;\n  return null;\n}\n\n/* Rango basado en las fechas reales de cada día (mín-máx) */\nfunction rangoDesdeDias(malla){\n  if (!malla || !malla.dias) return null;\n  let min=null, max=null;\n  for (const d of Object.values(malla.dias)){\n    if (d && d.fechaDia){\n      const f = parsearFechaEspanol(d.fechaDia);\n      if (!min || f < min) min=f;\n      if (!max || f > max) max=f;\n    }\n  }\n  return (min && max) ? {inicio:min, fin:max} : null;\n}\n\n// Función para calcular la duración aproximada en horas basada en las horas de inicio y fin\nfunction calcularDuracionAproximada(horaInicio, horaFin) {\n  try {\n    if (!horaInicio || !horaFin) {\n      return 3; // Valor por defecto si no se puede calcular\n    }\n    \n    // Verificar si las horas están en formato AM/PM\n    const esFormatoAMPM = /AM|PM/i.test(horaInicio) && /AM|PM/i.test(horaFin);\n    \n    if (esFormatoAMPM) {\n      // Convertir horas de formato AM/PM a 24 horas\n      const horaInicioObj = convertirHoraAMPMA24H(horaInicio);\n      const horaFinObj = convertirHoraAMPMA24H(horaFin);\n      \n      // Calcular diferencia en horas\n      let diferenciaHoras = horaFinObj.hora - horaInicioObj.hora;\n      \n      // Ajustar por diferencia en minutos\n      if (horaFinObj.minutos < horaInicioObj.minutos) {\n        diferenciaHoras--;\n      }\n      \n      // Si la diferencia es negativa, asumimos que cruza la medianoche\n      if (diferenciaHoras < 0) {\n        diferenciaHoras += 24;\n      }\n      \n      return diferenciaHoras;\n    } else {\n      // Formato 24 horas\n      const [horasInicio] = horaInicio.split(':').map(Number);\n      const [horasFin] = horaFin.split(':').map(Number);\n      \n      let diferenciaHoras = horasFin - horasInicio;\n      if (diferenciaHoras < 0) {\n        diferenciaHoras += 24;\n      }\n      \n      return diferenciaHoras;\n    }\n  } catch (error) {\n    console.error(`Error calculando duración:`, error);\n    return 3; // Valor por defecto\n  }\n}\n\n// Función auxiliar para convertir hora de formato AM/PM a formato 24 horas\nfunction convertirHoraAMPMA24H(horaAMPM) {\n  try {\n    const [tiempo, periodo] = horaAMPM.split(/\\s+/);\n    let [horas, minutos] = tiempo.split(':').map(Number);\n    \n    // Ajustar horas para formato de 24 horas\n    if (periodo.toUpperCase() === 'PM' && horas < 12) {\n      horas += 12;\n    } else if (periodo.toUpperCase() === 'AM' && horas === 12) {\n      horas = 0;\n    }\n    \n    return {\n      hora: horas,\n      minutos: minutos || 0\n    };\n  } catch (error) {\n    console.error(`Error convirtiendo hora:`, error);\n    return { hora: 0, minutos: 0 }; // Fallback\n  }\n}\n\n// Función auxiliar para calcular la hora de fin basada en la hora de inicio y la duración\nfunction calcularHoraFin(horaInicio, duracionHoras) {\n  try {\n    // Verificar si la hora de inicio tiene formato AM/PM\n    const esFormatoAMPM = /AM|PM/i.test(horaInicio);\n    \n    if (esFormatoAMPM) {\n      // Convertir hora formato AM/PM\n      const [tiempo, periodo] = horaInicio.split(/\\s+/);\n      let [horas, minutos] = tiempo.split(':').map(Number);\n      \n      // Ajustar horas para formato de 24 horas\n      if (periodo.toUpperCase() === 'PM' && horas < 12) {\n        horas += 12;\n      } else if (periodo.toUpperCase() === 'AM' && horas === 12) {\n        horas = 0;\n      }\n      \n      // Añadir duración\n      horas += duracionHoras;\n      \n      // Convertir de vuelta a AM/PM\n      let nuevoPeriodo = 'AM';\n      if (horas >= 12) {\n        nuevoPeriodo = 'PM';\n        if (horas > 12) {\n          horas -= 12;\n        }\n      }\n      if (horas === 0) {\n        horas = 12;\n        nuevoPeriodo = 'AM';\n      }\n      \n      // Formatear resultado\n      return `${horas}:${minutos.toString().padStart(2, '0')} ${nuevoPeriodo}`;\n    } else {\n      // Formato 24 horas\n      const [horas, minutos] = horaInicio.split(':').map(Number);\n      const nuevasHoras = (horas + duracionHoras) % 24;\n      return `${nuevasHoras}:${minutos.toString().padStart(2, '0')}`;\n    }\n  } catch (error) {\n    console.error(`Error calculando hora fin:`, error);\n    return \"\"; // Fallback\n  }\n}\n\n// Convertir fecha en formato español a formato ISO (YYYY-MM-DD)\nfunction convertirFechaAFormatoISO(fechaTexto) {\n  try {\n    if (!fechaTexto || typeof fechaTexto !== 'string') {\n      throw new Error(\"Texto de fecha inválido\");\n    }\n    \n    // Formato esperado: \"dd de mes de yyyy\"\n    const partes = fechaTexto.split(\" de \");\n    if (partes.length !== 3) {\n      throw new Error(`Formato de fecha inválido: ${fechaTexto}`);\n    }\n    \n    const dia = parseInt(partes[0], 10);\n    if (isNaN(dia) || dia < 1 || dia > 31) {\n      throw new Error(`Día inválido: ${partes[0]}`);\n    }\n    \n    const mes = obtenerNumeroMes(partes[1]);\n    if (mes === -1) {\n      throw new Error(`Mes inválido: ${partes[1]}`);\n    }\n    \n    const anio = parseInt(partes[2], 10);\n    if (isNaN(anio) || anio < 2000 || anio > 2100) {\n      throw new Error(`Año inválido: ${partes[2]}`);\n    }\n    \n    // Formatear como YYYY-MM-DD\n    const mesStr = (mes + 1).toString().padStart(2, '0');\n    const diaStr = dia.toString().padStart(2, '0');\n    \n    return `${anio}-${mesStr}-${diaStr}`;\n  } catch (error) {\n    console.error(`Error convirtiendo fecha: ${error.message}`);\n    return \"\"; // Cadena vacía como fallback\n  }\n}\n\n// Obtener número de mes a partir del nombre en español\nfunction obtenerNumeroMes(nombreMes) {\n  if (!nombreMes || typeof nombreMes !== 'string') {\n    return -1;\n  }\n  \n  const nombreMesLower = nombreMes.toLowerCase();\n  const meses = [\n    \"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\",\n    \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"\n  ];\n  \n  return meses.indexOf(nombreMesLower);\n}\n\n// Convertir fecha en formato español a objeto Date\nfunction parsearFechaEspanol(fechaTexto) {\n  try {\n    if (!fechaTexto || typeof fechaTexto !== 'string') {\n      throw new Error(\"Texto de fecha inválido\");\n    }\n    \n    // Formato esperado: \"dd de mes de yyyy\"\n    const partes = fechaTexto.split(\" de \");\n    if (partes.length !== 3) {\n      throw new Error(`Formato de fecha inválido: ${fechaTexto}`);\n    }\n    \n    const dia = parseInt(partes[0], 10);\n    if (isNaN(dia) || dia < 1 || dia > 31) {\n      throw new Error(`Día inválido: ${partes[0]}`);\n    }\n    \n    const mes = obtenerNumeroMes(partes[1]);\n    if (mes === -1) {\n      throw new Error(`Mes inválido: ${partes[1]}`);\n    }\n    \n    const anio = parseInt(partes[2], 10);\n    if (isNaN(anio) || anio < 2000 || anio > 2100) {\n      throw new Error(`Año inválido: ${partes[2]}`);\n    }\n    \n    return new Date(anio, mes, dia);\n  } catch (error) {\n    console.error(`Error parseando fecha: ${error.message}`);\n    return new Date(); // Fecha actual como fallback\n  }\n}\n\n// Obtener día de la semana en español\nfunction obtenerDiaSemanaEspanol(fecha) {\n  if (!fecha || !(fecha instanceof Date)) {\n    console.error(\"Fecha inválida para obtener día de semana\");\n    return \"\";\n  }\n  \n  const diaSemana = fecha.getDay();\n  \n  // El código original usa días laborables (lunes a viernes)\n  // 0 = domingo, 1 = lunes, ..., 6 = sábado\n  if (diaSemana === 0 || diaSemana === 6) {\n    console.error(\"La fecha corresponde a un fin de semana (sábado o domingo)\");\n    return \"\";\n  }\n  \n  const diasSemana = [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"];\n  return diasSemana[diaSemana];\n}\n\n// Parsear rango de días de una malla\nfunction parsearRangoDias(rangoTexto) {\n  try {\n    if (!rangoTexto || typeof rangoTexto !== 'string') {\n      throw new Error(\"Texto de rango inválido\");\n    }\n    \n    // Formato esperado: \"LUNES DD AL VIERNES DD DE MES\"\n    const partes = rangoTexto.toUpperCase().split(\" \");\n    \n    // Buscar día inicial\n    let diaInicio = null;\n    let indexAL = -1;\n    \n    for (let i = 0; i < partes.length; i++) {\n      if (partes[i] === \"AL\") {\n        indexAL = i;\n        break;\n      }\n      \n      // Intentar convertir a número\n      const posibleDia = parseInt(partes[i], 10);\n      if (!isNaN(posibleDia)) {\n        diaInicio = posibleDia;\n      }\n    }\n    \n    if (diaInicio === null || indexAL === -1) {\n      throw new Error(\"No se pudo identificar el día de inicio o la palabra 'AL'\");\n    }\n    \n    // Buscar día final\n    let diaFin = null;\n    let mesIndex = -1;\n    \n    for (let i = indexAL + 1; i < partes.length; i++) {\n      if (partes[i] === \"DE\") {\n        mesIndex = i;\n        break;\n      }\n      \n      // Intentar convertir a número\n      const posibleDia = parseInt(partes[i], 10);\n      if (!isNaN(posibleDia)) {\n        diaFin = posibleDia;\n      }\n    }\n    \n    if (diaFin === null || mesIndex === -1 || mesIndex + 1 >= partes.length) {\n      throw new Error(\"No se pudo identificar el día final o el mes\");\n    }\n    \n    const nombreMes = partes[mesIndex + 1].toLowerCase();\n    const mes = obtenerNumeroMes(nombreMes);\n    \n    if (mes === -1) {\n      throw new Error(`Mes inválido: ${nombreMes}`);\n    }\n    \n    const anio = new Date().getFullYear();\n    \n    return {\n      inicio: new Date(anio, mes, diaInicio),\n      fin: new Date(anio, mes, diaFin)\n    };\n  } catch (error) {\n    console.error(`Error parseando rango: ${error.message}`);\n    \n    // Rango amplio como fallback\n    const hoy = new Date();\n    const finDeMes = new Date(hoy.getFullYear(), hoy.getMonth() + 1, 0);\n    \n    return {\n      inicio: hoy,\n      fin: finDeMes\n    };\n  }\n}\n\n// Devolver la función principal para n8n\nreturn validarDisponibilidadCitaEnCronograma(items);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -41264,
        -8928
      ],
      "id": "9a8c413c-5c61-4127-81ec-234a6d28008d",
      "name": "Code VALIDACIÓN DE CITA EN CRONOGRAMA"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "15af6812-2871-4888-9658-c24f185bcbd4",
              "leftValue": "={{ $json.franjaDisponible }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "032ef339-3304-444d-89eb-26aa314e06b8",
              "leftValue": "={{ $json.forzarReset }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -41024,
        -8928
      ],
      "id": "d56868c7-cbb6-41dd-b76a-ee3aab8adbc5",
      "name": "If CREACION DE CITA EN CRONOGRAMA"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -39760,
        -8384
      ],
      "id": "4650c969-a67b-4291-9186-857c4e8547df",
      "name": "OpenAI Chat Model10",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=Eres un asistente de un sistema de agendamiento de citas para la entrega de mercancía en la bodega. Debes notificar que, mientras el cliente decidía confirmar la cita, otro proveedor ocupó esa franja horaria.\n\nGenera un mensaje directo aplicando estos principios de UX para WhatsApp:\n\n**FORMATO Y ESTRUCTURA:**\n1. Usa *negritas* para información crítica como el estado de la cita y acciones requeridas\n2. Usa emojis estratégicos: 🚫 (no disponible), ⚡ (tiempo real), 🔄 (reiniciar), ℹ️ (información)\n3. Estructura la información de forma jerárquica y clara\n4. Destaca que la franja se *asignó a otro proveedor* con formato apropiado\n\n**CONTENIDO REQUERIDO:**\n1. 🚫 Indica claramente que la *cita no pudo confirmarse* porque otro proveedor ocupó la franja\n2. ⚡ Explica que las franjas se confirman en *tiempo real* y pueden cambiar constantemente\n3. 🔄 Solicita *reiniciar el proceso* para revisar nuevas opciones disponibles\n4. ℹ️ Destaca la importancia de información *actualizada* para garantizar disponibilidad\n5. 🙏 Agradece la comprensión de manera empática\n\n**TONO:** Profesional pero empático, reconociendo el inconveniente y explicando la naturaleza dinámica del sistema de citas en tiempo real.\n\n**EJEMPLO DE ESTRUCTURA ESPERADA:**\n🚫 *Franja horaria no disponible*\n\n❌ No pudimos confirmar tu cita porque *otro proveedor ocupó esta franja* mientras decidías.\n\n⚡ Las franjas se asignan en *tiempo real* y cambian constantemente...\n🔄 Para revisar *nuevas opciones*, necesito que reinicies el proceso...\n\n🙏 Agradecemos tu comprensión..."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -39680,
        -8592
      ],
      "id": "35520397-fb56-40fa-86a0-833c8e111bd8",
      "name": "Basic LLM Notificar No Disponibilidad1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('Basic LLM Notificar No Disponibilidad').item.json.text.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -40832,
        -9648
      ],
      "id": "471b7fb2-8aac-4722-9dc5-7fa8a3bafb98",
      "name": "Validación de longitud de caracteres4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Basic LLM Notificar No Disponibilidad').item.json.text }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Basic LLM Notificar No Disponibilidad').item.json.text.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -37712,
        -9824
      ],
      "id": "79edac11-eeb8-4960-82a3-d22b11af85a5",
      "name": "Organiza variables del mensaje4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -40352,
        -9856
      ],
      "id": "3880e108-60e3-4c4e-806a-6a981ddb0cff",
      "name": "No Operation, do nothing6"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -40528,
        -9856
      ],
      "id": "24dd1009-febf-4ded-9e9c-7c1b26231143",
      "name": "HTTP Request Enviar Mensaje por WhatsApp7"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('Basic LLM Notificar No Disponibilidad1').item.json.text.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -37824,
        -8368
      ],
      "id": "80598a31-74a6-4bc3-aeb8-24c13e384f35",
      "name": "Validación de longitud de caracteres5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Basic LLM Notificar No Disponibilidad1').item.json.text }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Basic LLM Notificar No Disponibilidad1').item.json.text.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -36608,
        -8336
      ],
      "id": "bd877eef-09e6-4c0d-aec6-ec3d749f5f0d",
      "name": "Organiza variables del mensaje5"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -37344,
        -8576
      ],
      "id": "441c153c-b41f-4d14-9f62-aef4aac7366b",
      "name": "No Operation, do nothing7"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -37520,
        -8576
      ],
      "id": "3c0826a0-515b-4049-8c6e-4ed652950ea8",
      "name": "HTTP Request Enviar Mensaje por WhatsApp8"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -41744,
        -8736
      ],
      "id": "e4da1e7f-0239-4f82-b7ba-f155f53b6fa0",
      "name": "OpenAI Chat Model11",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=## Prompt para nodo \"Basic LLM\" - Validación de selección de alternativa\n\n## ROL Y CONTEXTO\nEres un asistente especializado en interpretar mensajes de usuarios para un sistema de agendamiento de citas logísticas. Tu tarea es determinar si el usuario está eligiendo una alternativa de horario cuando la cita original no está disponible, o si está haciendo algo diferente (como retractarse o cambiar de opinión).\n\n## CONTEXTO DEL SISTEMA\nEl sistema de agendamiento funciona así:\n1. El sistema verifica si un horario solicitado está disponible\n2. Si está disponible, muestra un mensaje de confirmación\n3. Si NO está disponible, presenta alternativas numeradas\n4. El usuario debe responder eligiendo una de esas alternativas\n5. El formato de elección puede variar: \"elijo la 1\", \"opción 2\", \"la primera\", \"la del 17 de julio a las 7am\", etc.\n\n## DATOS DISPONIBLES\n\n### Respuesta del sistema y alternativas presentadas:\n```json\n{{ JSON.stringify($node[\"Code Verificar Tiempo Transcurrido\"].json.respuesta.alternativasDisponibles, null, 2) }}\n```\n\n### Mensaje actual del usuario:\n```\n{{ $('Unificación y consistencia de datos').first().json.infoMensaje.mensajeActual }}\n```\n\n### Historial de conversación:\n```\n{{ $('Unificación y consistencia de datos').first().json.infoMensaje.historialMensajes }}\n```\n\n## LÓGICA DE ANÁLISIS\n\n### PASO 1: VERIFICACIÓN DE DISPONIBILIDAD CONFIRMADA\nPrimero, verifica el campo \"disponibilidadConfirmada\" en los datos disponibles:\n- Si **disponibilidadConfirmada = true**: El horario original estaba disponible y se confirmó. El usuario solo debe confirmar (ej: \"sí\", \"ok\", \"perfecto\").\n- Si **disponibilidadConfirmada = false**: El horario no estaba disponible y se presentaron alternativas numeradas.\n\n### PASO 2: DETECCIÓN CRÍTICA DE RETRACTACIONES\nAntes de analizar cualquier selección, detecta si el usuario está:\n\n#### ✅ COMPORTAMIENTO ESPERADO:\n- Confirmando la opción principal cuando disponibilidadConfirmada = true\n- Eligiendo una alternativa numerada cuando se presentaron opciones\n- Usando frases como: \"la 1\", \"opción 2\", \"la primera\", \"elijo la del 17 a las 7am\"\n\n#### ❌ RETRACTACIÓN DETECTADA:\n- Usuario menciona fecha/hora diferente a las opciones presentadas\n- Usuario dice \"mejor el [otra fecha]\", \"cambio de opinión\", \"prefiero el [otra fecha]\"\n- Usuario proporciona datos completamente nuevos (nuevo proveedor, nueva categoría, etc.)\n- Usuario contradice las opciones que acaba de recibir del sistema\n\n### PASO 3: ANÁLISIS CONTEXTUAL\nRevisa el historial para detectar patrones de indecisión:\n- ¿Ha cambiado de fecha múltiples veces?\n- ¿Las fechas mencionadas coinciden con las opciones presentadas?\n- ¿El mensaje actual es consistente con las alternativas ofrecidas?\n\n## FORMATO DE RESPUESTA\n\n### Para disponibilidadConfirmada = true (confirmación directa):\n```json\n{\n  \"seleccionaAlternativa\": false,\n  \"indiceSeleccionado\": null,\n  \"esRetractacion\": false,\n  \"tipoRespuesta\": \"confirmacion_directa\",\n  \"datosSeleccionados\": null,\n  \"motivoRetractacion\": null\n}\n```\n\n### Para selección válida de alternativa:\n```json\n{\n  \"seleccionaAlternativa\": true,\n  \"indiceSeleccionado\": 2,\n  \"esRetractacion\": false,\n  \"tipoRespuesta\": \"seleccion_alternativa\",\n  \"datosSeleccionados\": {\n    \"fecha\": \"17 de julio de 2025\",\n    \"fechaFormateada\": \"2025-07-17\",\n    \"horaInicio\": \"09:00 AM\",\n    \"horaFin\": \"1:00 PM\",\n    \"muelle\": \"MUELLE 2\",\n    \"duracionHoras\": 4\n  },\n  \"motivoRetractacion\": null\n}\n```\n\n### Para retractación detectada:\n```json\n{\n  \"seleccionaAlternativa\": false,\n  \"indiceSeleccionado\": null,\n  \"esRetractacion\": true,\n  \"tipoRespuesta\": \"retractacion\",\n  \"datosSeleccionados\": null,\n  \"motivoRetractacion\": \"Usuario mencionó fecha diferente a las opciones presentadas\"\n}\n```\n\n### Para respuesta ambigua o no clara:\n```json\n{\n  \"seleccionaAlternativa\": false,\n  \"indiceSeleccionado\": null,\n  \"esRetractacion\": false,\n  \"tipoRespuesta\": \"respuesta_unclear\",\n  \"datosSeleccionados\": null,\n  \"motivoRetractacion\": null\n}\n```\n\n## REGLAS IMPORTANTES\n\n1. **Para calcular duracionHoras**: Extrae el tiempo en horas entre horaInicio y horaFin. Si no puedes calcularlo con precisión, usa 4 como valor predeterminado.\n\n2. **Para fechaFormateada**: Convierte siempre al formato \"YYYY-MM-DD\".\n\n3. **Para indiceSeleccionado**: Usa base 1 (la primera alternativa es 1, no 0).\n\n4. **Detección de retractación**: Si el usuario menciona fechas que NO están en las alternativas presentadas, marca `esRetractacion: true`.\n\n5. **Campo motivoRetractacion**: Solo llenar cuando `esRetractacion: true`, explicar brevemente el motivo.\n\n6. **Prioridad de detección**: \n   - Primero: ¿Es retractación?\n   - Segundo: ¿Es confirmación directa?\n   - Tercero: ¿Es selección de alternativa?\n\n## EJEMPLOS\n\n### Ejemplo 1 - Selección válida:\n**Alternativas presentadas**: 1) 17 de julio 9:00 AM, 2) 17 de julio 10:00 AM\n**Mensaje usuario**: \"elijo la 2\"\n**Respuesta**: \n```json\n{\n  \"seleccionaAlternativa\": true,\n  \"indiceSeleccionado\": 2,\n  \"esRetractacion\": false,\n  \"tipoRespuesta\": \"seleccion_alternativa\",\n  \"datosSeleccionados\": {...},\n  \"motivoRetractacion\": null\n}\n```\n\n### Ejemplo 2 - Retractación:\n**Alternativas presentadas**: 1) 17 de julio 9:00 AM, 2) 17 de julio 10:00 AM  \n**Mensaje usuario**: \"mejor para el 18 de julio\"\n**Respuesta**: \n```json\n{\n  \"seleccionaAlternativa\": false,\n  \"indiceSeleccionado\": null,\n  \"esRetractacion\": true,\n  \"tipoRespuesta\": \"retractacion\",\n  \"datosSeleccionados\": null,\n  \"motivoRetractacion\": \"Usuario solicita fecha diferente (18 de julio) a las opciones presentadas\"\n}\n```\n\n### Ejemplo 3 - Confirmación directa:\n**disponibilidadConfirmada**: true\n**Mensaje usuario**: \"perfecto, confirmo\"\n**Respuesta**: \n```json\n{\n  \"seleccionaAlternativa\": false,\n  \"indiceSeleccionado\": null,\n  \"esRetractacion\": false,\n  \"tipoRespuesta\": \"confirmacion_directa\",\n  \"datosSeleccionados\": null,\n  \"motivoRetractacion\": null\n}\n```\n\n## INSTRUCCIONES FINALES\n1. Analiza cuidadosamente el contexto antes de responder\n2. Prioriza la detección de retractaciones para evitar loops de indecisión\n3. Solo devuelve el objeto JSON válido, sin explicaciones adicionales\n4. Asegúrate de incluir todos los campos requeridos en cada respuesta",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -41664,
        -8928
      ],
      "id": "35ffc5e6-1e03-4a64-a13a-baf53f4fd57b",
      "name": "Basic LLM Validar selección alternativa"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"seleccionaAlternativa\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indica si el usuario seleccionó una alternativa\"\n    },\n    \"indiceSeleccionado\": {\n      \"type\": [\"number\", \"null\"],\n      \"description\": \"Índice de la alternativa seleccionada (1-basado) o null\"\n    },\n    \"esRetractacion\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indica si el usuario está retractándose o cambiando de opinión\"\n    },\n    \"tipoRespuesta\": {\n      \"type\": \"string\",\n      \"description\": \"Tipo de respuesta del usuario\",\n      \"enum\": [\"confirmacion_directa\", \"seleccion_alternativa\", \"retractacion\", \"respuesta_unclear\"]\n    },\n    \"datosSeleccionados\": {\n      \"type\": [\"object\", \"null\"],\n      \"properties\": {\n        \"fecha\": {\n          \"type\": \"string\",\n          \"description\": \"Fecha en formato texto (dd de mes de yyyy)\"\n        },\n        \"fechaFormateada\": {\n          \"type\": \"string\",\n          \"description\": \"Fecha en formato ISO (YYYY-MM-DD)\"\n        },\n        \"horaInicio\": {\n          \"type\": \"string\",\n          \"description\": \"Hora de inicio de la cita\"\n        },\n        \"horaFin\": {\n          \"type\": \"string\",\n          \"description\": \"Hora de fin de la cita\"\n        },\n        \"muelle\": {\n          \"type\": \"string\",\n          \"description\": \"Identificador del muelle\"\n        },\n        \"duracionHoras\": {\n          \"type\": \"number\",\n          \"description\": \"Duración de la cita en horas\"\n        }\n      },\n      \"description\": \"Datos de la alternativa seleccionada o null\"\n    },\n    \"motivoRetractacion\": {\n      \"type\": [\"string\", \"null\"],\n      \"description\": \"Descripción del motivo de la retractación si aplica\"\n    }\n  },\n  \"required\": [\"seleccionaAlternativa\", \"indiceSeleccionado\", \"esRetractacion\", \"tipoRespuesta\", \"datosSeleccionados\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -41520,
        -8704
      ],
      "id": "871a24ac-2150-4b49-8e2b-2cc990e2d4ca",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "jsCode": "// Código para preparar la actualización de Excel con citas\n// Este nodo SOLO prepara el formato para enviarlos a Microsoft Graph\n\n// Obtener datos de entrada: datos validados y datos de la cita\nconst datosValidados = $input.first().json.datosValidados;\nconst datosCita = $('Code Verificar Tiempo Transcurrido').first().json.respuesta.datosCita;\nconst datosMalla = $('Unificación y consistencia de datos2').first().json.datosMalla;\n\n// Extraer la información relevante\nconst {\n  fecha,\n  fechaFormateada,\n  horaInicio,\n  horaFin,\n  muelle,\n  duracionHoras\n} = datosValidados;\n\nconst {\n  proveedor = \"\",\n  ordenCompra = \"\",\n  peso = \"\",\n  categoria = \"\",\n  unidades = \"\"\n} = datosCita;\n\n// Obtener el día de la semana a partir de la fecha\nfunction obtenerDiaSemana(fechaStr) {\n  // Extrae el día, mes y año de la cadena\n  const regex = /(\\d+)\\s+de\\s+(\\w+)\\s+de\\s+(\\d+)/;\n  const match = regex.exec(fechaStr);\n  \n  if (!match) return null;\n  \n  const dia = parseInt(match[1], 10);\n  const mesStr = match[2].toLowerCase();\n  const año = parseInt(match[3], 10);\n  \n  // Mapeo de nombres de meses a números\n  const meses = {\n    \"enero\": 0,\n    \"febrero\": 1,\n    \"marzo\": 2,\n    \"abril\": 3,\n    \"mayo\": 4,\n    \"junio\": 5,\n    \"julio\": 6,\n    \"agosto\": 7,\n    \"septiembre\": 8,\n    \"octubre\": 9,\n    \"noviembre\": 10,\n    \"diciembre\": 11\n  };\n  \n  const mesNum = meses[mesStr];\n  \n  if (mesNum === undefined) return null;\n  \n  // Crear objeto Date\n  const fecha = new Date(año, mesNum, dia);\n  \n  // Obtener día de la semana (0=domingo, 1=lunes, ..., 6=sábado)\n  const diaSemana = fecha.getDay();\n  \n  // Convertir a nombre en español\n  const diasSemana = [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\"];\n  \n  return diasSemana[diaSemana];\n}\n\n// Determinar el día de la semana\nconst diaSemana = obtenerDiaSemana(fecha);\n\n// Determinar el muelle (muelle1 o muelle2)\nconst muelleKey = muelle.toLowerCase().includes(\"1\") ? \"muelle1\" : \"muelle2\";\n\n// Mapeo correcto de columnas para cada día y muelle según lo proporcionado\nconst mapeoColumnas = {\n  'lunes': {\n    'muelle1': 'C', \n    'muelle2': 'F' \n  },\n  'martes': {\n    'muelle1': 'I', \n    'muelle2': 'L'  \n  },\n  'miércoles': {\n    'muelle1': 'O', \n    'muelle2': 'R'  \n  },\n  'jueves': {\n    'muelle1': 'U', \n    'muelle2': 'X' \n  },\n  'viernes': {\n    'muelle1': 'AA', \n    'muelle2': 'AD'  \n  }\n};\n\n// Verificar si tenemos mapeo para este día\nif (!mapeoColumnas[diaSemana]) {\n  console.log(`Día no soportado: ${diaSemana}`);\n  return {\n    json: {\n      success: false,\n      mensaje: `Día no soportado: ${diaSemana}`,\n      error: \"DIA_NO_SOPORTADO\"\n    }\n  };\n}\n\n// Obtener la columna base para el día y muelle específicos\nconst columnaBase = mapeoColumnas[diaSemana][muelleKey];\nif (!columnaBase) {\n  console.log(`Configuración no soportada: día=${diaSemana}, muelle=${muelleKey}`);\n  return {\n    json: {\n      success: false,\n      mensaje: `Configuración no soportada: día=${diaSemana}, muelle=${muelleKey}`,\n      error: \"CONFIGURACION_NO_SOPORTADA\"\n    }\n  };\n}\n\n// Calcular la siguiente columna en Excel\nfunction siguienteColumna(columna) {\n  if (columna.length === 1) {\n    // Para columnas de una letra (A-Z)\n    return String.fromCharCode(columna.charCodeAt(0) + 1);\n  } else {\n    // Para columnas de dos letras (AA-ZZ)\n    const primerChar = columna.charAt(0);\n    const segundoChar = columna.charAt(1);\n    \n    if (segundoChar === 'Z') {\n      // Si es 'Z', pasar a la siguiente letra para el primer carácter\n      return String.fromCharCode(primerChar.charCodeAt(0) + 1) + 'A';\n    } else {\n      // Incrementar solo el segundo carácter\n      return primerChar + String.fromCharCode(segundoChar.charCodeAt(0) + 1);\n    }\n  }\n}\n\n// Función para comparar horas de forma flexible\nfunction horasIguales(h1, h2) {\n  const normalizar = (h) =>\n    h\n      .toString()\n      .trim()\n      .toLowerCase()\n      .replace(/\\./g, '')            // quita puntos (por si viene \"a.m.\")\n      .replace(/\\s+/g, '')           // quita espacios\n      .replace(/^0+/, '');           // quita ceros a la izquierda\n  return normalizar(h1) === normalizar(h2);\n}\n\n// Ordenar franjas por hora\nfunction obtenerFranjasOrdenadas(franjas) {\n  return [...franjas].sort((a, b) => {\n    // Convertir horas a formato comparable (número de minutos desde medianoche)\n    function horaAMinutos(hora) {\n      const match = hora.match(/(\\d+):(\\d+)\\s*([AP]M)/i);\n      if (!match) return 0;\n      \n      let horas = parseInt(match[1], 10);\n      const minutos = parseInt(match[2], 10);\n      const periodo = match[3].toUpperCase();\n      \n      // Convertir a formato 24 horas\n      if (periodo === 'PM' && horas !== 12) {\n        horas += 12;\n      } else if (periodo === 'AM' && horas === 12) {\n        horas = 0;\n      }\n      \n      return horas * 60 + minutos;\n    }\n    \n    return horaAMinutos(a.hora) - horaAMinutos(b.hora);\n  });\n}\n\n// Obtener la posición de la franja en el array ordenado\nfunction obtenerPosicionFranja(hora, franjas) {\n  const franjasOrdenadas = obtenerFranjasOrdenadas(franjas);\n  return franjasOrdenadas.findIndex(f => horasIguales(f.hora, hora));\n}\n\n// Función corregida para calcular la fila Excel basada en la posición de la franja\nfunction calcularFilaExcel(hora, franjas) {\n  const posicion = obtenerPosicionFranja(hora, franjas);\n  \n  if (posicion === -1) {\n    console.log(`No se encontró la posición para la hora ${hora}`);\n    return null;\n  }\n  \n  // Mapeo de posiciones a filas base en Excel\n  // Basado en las observaciones del Excel:\n  const FILA_PRIMERA_FRANJA = 12;  // 6:00 AM\n  const INCREMENTO_ESTANDAR = 3;   // Incremento estándar entre franjas\n  \n  // Caso especial para 9:00 AM\n  if (posicion === 3) {\n    return 21;  // Fila exacta para 9:00 AM\n  } else if (posicion === 4) {\n    return 24;  // Fila exacta para 10:00 AM\n  } else if (posicion === 5) {\n    return 27;  // Fila exacta para 11:00 AM\n  } else if (posicion < 3) {\n    // Para posiciones antes de 9:00 AM, usamos el incremento estándar\n    return FILA_PRIMERA_FRANJA + (posicion * INCREMENTO_ESTANDAR);\n  } else {\n    // Para posiciones después de 11:00 AM, calculamos a partir de 11:00 AM\n    return 27 + ((posicion - 5) * INCREMENTO_ESTANDAR);\n  }\n}\n\n// Función para encontrar la franja horaria siguiente\nfunction encontrarSiguienteFranja(horaActual, franjas) {\n  const franjasOrdenadas = obtenerFranjasOrdenadas(franjas);\n  const posicionActual = franjasOrdenadas.findIndex(f => horasIguales(f.hora, horaActual));\n  \n  if (posicionActual === -1 || posicionActual >= franjasOrdenadas.length - 1) {\n    return null; // No hay siguiente franja\n  }\n  \n  return franjasOrdenadas[posicionActual + 1];\n}\n\n// Encontrar información de la franja horaria inicial en los datos de la malla\nconst franjaInicio = datosMalla.franjas.find(f => horasIguales(f.hora, horaInicio));\nif (!franjaInicio) {\n  console.log(`No se encontró la franja de inicio: ${horaInicio}`);\n  return {\n    json: {\n      success: false,\n      mensaje: `No se encontró la franja de inicio: ${horaInicio}`,\n      error: \"FRANJA_NO_ENCONTRADA\"\n    }\n  };\n}\n\n// Array para almacenar todas las actualizaciones\nlet todasLasActualizaciones = [];\n\n// Procesar cada hora de la cita (según duracionHoras)\nlet horaActual = horaInicio;\nlet horasRestantes = duracionHoras;\n\nwhile (horasRestantes > 0) {\n  // Encontrar la franja actual\n  const franjaActual = datosMalla.franjas.find(f => horasIguales(f.hora, horaActual));\n  \n  if (!franjaActual) {\n    console.log(`No se encontró información para la franja: ${horaActual}`);\n    break;\n  }\n  \n  // Calcular la fila base de forma dinámica\n  const filaBase = calcularFilaExcel(horaActual, datosMalla.franjas);\n  \n  if (!filaBase) {\n    console.log(`No se pudo determinar la fila para la franja: ${horaActual}`);\n    break;\n  }\n  \n  console.log(`Calculando celdas para: ${horaActual}, fila base: ${filaBase}`);\n  \n  const columnaLineas = siguienteColumna(columnaBase);\n  const columnaUnd = siguienteColumna(columnaLineas);\n  \n  // Calcular las celdas para esta franja\n  const rangoCeldas = {\n    proveedor: `${columnaBase}${filaBase}`,\n    ordenCompra: `${columnaBase}${filaBase + 1}`,\n    peso: `${columnaBase}${filaBase + 2}`,\n    categoria: `${columnaLineas}${filaBase + 2}`,\n    unidades: `${columnaUnd}${filaBase + 2}`\n  };\n  \n  console.log(`Celdas para ${horaActual}, ${diaSemana}, ${muelleKey}:`, JSON.stringify(rangoCeldas));\n  \n  // Agregar actualizaciones para esta franja horaria\n  todasLasActualizaciones.push(\n    {\n      celda: rangoCeldas.proveedor,\n      valor: proveedor\n    },\n    {\n      celda: rangoCeldas.ordenCompra,\n      valor: ordenCompra\n    },\n    {\n      celda: rangoCeldas.peso,\n      valor: peso\n    },\n    {\n      celda: rangoCeldas.categoria,\n      valor: categoria\n    },\n    {\n      celda: rangoCeldas.unidades,\n      valor: unidades\n    }\n  );\n  \n  // Preparar para la siguiente hora\n  horasRestantes--;\n  \n  if (horasRestantes > 0) {\n    const siguienteFranja = encontrarSiguienteFranja(horaActual, datosMalla.franjas);\n    \n    if (siguienteFranja) {\n      horaActual = siguienteFranja.hora;\n    } else {\n      console.log(`No se encontró la siguiente franja horaria después de ${horaActual}`);\n      break;\n    }\n  }\n}\n\n// Preparar el formato final para la petición a Microsoft Graph\nconst actualizacionesGraph = todasLasActualizaciones.map(act => ({\n  address: act.celda,\n  values: [[act.valor]]\n}));\n\n// Usar el nombre correcto de la hoja desde datosMalla\nconst nombreHojaExcel = $('Code VALIDACIÓN DE CITA EN CRONOGRAMA').first().json.nombreHoja;\n\n// Preparar el resultado para el siguiente nodo\nreturn {\n  json: {\n    success: true,\n    mensaje: `Preparadas ${todasLasActualizaciones.length} actualizaciones para la cita del ${fecha} de ${horaInicio} a ${horaFin} en ${muelle} (${duracionHoras} horas)`,\n    nombreHoja: nombreHojaExcel,\n    // Datos para Microsoft Graph API\n    graphRequestData: {\n      updates: actualizacionesGraph\n    },\n    // Información más detallada para debugging o uso interno\n    detalles: {\n      actualizacionesDetalladas: todasLasActualizaciones,\n      diaSemana,\n      informacionCita: {\n        fecha,\n        horaInicio,\n        horaFin,\n        muelle,\n        proveedor,\n        ordenCompra,\n        peso,\n        categoria,\n        unidades,\n        duracionHoras\n      }\n    }\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40528,
        -9264
      ],
      "id": "0208094f-0cc0-45d3-9385-a7507bd09f34",
      "name": "Code (Preparar Cuerpo de Petición)"
    },
    {
      "parameters": {
        "jsCode": "// Código modificado para \"Code Agrupar Franjas\"\n// Ahora devuelve los valores individuales en lugar de franjas agrupadas\n// pero conservando la información de indice, nombreHoja e informacionCita\nconst input = $input.first().json;\n\n// Verificar que tenemos la estructura esperada\nif (!input || !input.graphRequestData || !input.graphRequestData.updates) {\n  console.log('Estructura de datos de entrada no válida');\n  return {\n    json: {\n      error: \"FORMATO_INVALIDO\",\n      mensaje: \"La estructura de datos de entrada no es válida\"\n    }\n  };\n}\n\nconst updates = input.graphRequestData.updates;\nconst UPDATES_PER_FRANJA = 5;\nconst numFranjas = Math.ceil(updates.length / UPDATES_PER_FRANJA);\nconst resultados = [];\n\n// Primero, creamos todas las franjas como en el código original\nconst franjas = [];\nfor (let i = 0; i < numFranjas; i++) {\n  const inicio = i * UPDATES_PER_FRANJA;\n  const fin = Math.min(inicio + UPDATES_PER_FRANJA, updates.length);\n  \n  // Obtener las actualizaciones de esta franja\n  const actualizacionesFranja = updates.slice(inicio, fin);\n  \n  franjas.push({\n    indice: i + 1,\n    nombreHoja: input.nombreHoja,\n    updates: actualizacionesFranja,\n    informacionCita: input.detalles?.informacionCita\n  });\n}\n\n// Ahora, recorremos cada franja y extraemos los valores individuales\n// pero conservando la información adicional\nfranjas.forEach(franja => {\n  franja.updates.forEach(update => {\n    if (update.values && update.values.length > 0 && update.values[0].length > 0) {\n      const valor = update.values[0][0];\n      \n      // Creamos un objeto que contiene el valor y la información adicional\n      resultados.push({\n        json: {\n          valor: valor,\n          indice: franja.indice,\n          nombreHoja: franja.nombreHoja,\n          address: update.address,\n          informacionCita: franja.informacionCita\n        }\n      });\n    }\n  });\n});\n\nconsole.log(`Se extrajeron ${resultados.length} valores individuales para inserción en orden`);\nreturn resultados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40320,
        -9264
      ],
      "id": "446cd3ca-7430-499c-8690-a9f59bab13ed",
      "name": "Code Agrupar Franjas"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -40032,
        -9264
      ],
      "id": "c6b1a518-02bb-452f-ac23-49a1579bfc4a",
      "name": "Loop Over Uno a Uno"
    },
    {
      "parameters": {
        "jsCode": "// Código para preparar cada inserción para Microsoft Graph API mediante $batch\n// Basado en el flujo de trabajo original y adaptado para procesar elementos individuales\nconst input = $input.first().json;\n\n// Constantes para los IDs de SharePoint/OneDrive\nconst siteId = \"gexpresscargo.sharepoint.com,a592f886-4560-4e62-9646-1eee7add7abe,8b514073-41ae-4619-8f76-724bd912bc65\";\nconst driveId = \"b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8\";\nconst itemId = \"01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME\";\n\n// Verificar que tenemos la estructura esperada\nif (!input || input.valor === undefined || !input.address || !input.nombreHoja) {\n  console.log('Estructura de datos de entrada no válida para la inserción');\n  return {\n    json: {\n      error: \"FORMATO_INVALIDO\",\n      mensaje: \"La estructura de datos de entrada no es válida para la inserción\"\n    }\n  };\n}\n\n// Preparar el valor para la actualización según su tipo\nlet valorFormateado;\nif (typeof input.valor === 'number') {\n  valorFormateado = [[input.valor]]; // Para números mantenemos el tipo\n} else {\n  valorFormateado = [[input.valor.toString()]]; // Para otros tipos convertimos a string\n}\n\n// Generar un ID único para esta solicitud\nconst requestId = `${input.address}_${input.indice}_${Date.now()}`;\n\n// Crear la estructura de solicitud para Microsoft Graph $batch\nconst requestBody = {\n  requests: [\n    {\n      id: requestId,\n      method: \"PATCH\",\n      url: `/sites/${siteId}/drives/${driveId}/items/${itemId}/workbook/worksheets/${encodeURIComponent(input.nombreHoja)}/range(address='${input.address}')`,\n      body: {\n        values: valorFormateado\n      },\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  ],\n  _metadata: {\n    celda: input.address,\n    valor: input.valor,\n    indice: input.indice,\n    informacionCita: input.informacionCita || {}\n  }\n};\n\nconsole.log(`Preparada solicitud ${requestId} para insertar valor \"${input.valor}\" en la celda ${input.address} de la hoja \"${input.nombreHoja}\"`);\n\n// Retornar el objeto request listo para ser enviado a Microsoft Graph $batch\nreturn {\n  json: requestBody\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39760,
        -9168
      ],
      "id": "51c3a17c-3ab7-43d5-a3c5-b9137c56db04",
      "name": "Code Preparar cada Insercion"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.microsoft.com/v1.0/$batch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -39504,
        -9168
      ],
      "id": "4b32af1b-af83-44e9-a242-78e346878228",
      "name": "HTTP Request Actualizar Excel1",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Código para verificar si la inserción fue exitosa (sin acciones correctivas)\nconst input = $input.first().json;\n\n// Verificar que tenemos la estructura esperada en la respuesta\nif (!input || !input.responses || !Array.isArray(input.responses) || input.responses.length === 0) {\n  console.log('Estructura de datos de respuesta no válida');\n  return {\n    json: {\n      error: \"RESPUESTA_INVALIDA\",\n      mensaje: \"La estructura de datos de la respuesta no es válida\",\n      exito: false\n    }\n  };\n}\n\n// Obtener la primera respuesta\nconst response = input.responses[0];\n\n// Extraer información de la solicitud original del ID\n// El formato del ID es: \"CELDA_INDICE_TIMESTAMP\"\nconst idPartes = response.id.split('_');\nconst celdaOriginal = idPartes[0];\nconst indice = idPartes[1];\n\n// Verificar que la respuesta tiene un cuerpo\nif (!response.body || !response.body.address) {\n  console.log(`Error: La respuesta no contiene información sobre la dirección de celda`);\n  return {\n    json: {\n      error: \"RESPUESTA_SIN_DIRECCION\",\n      mensaje: \"La respuesta no incluye información sobre la dirección de celda\",\n      requestId: response.id,\n      status: response.status,\n      celdaOriginal: celdaOriginal,\n      exito: false\n    }\n  };\n}\n\n// Extraer la dirección de celda de la respuesta\nlet direccionRespuesta = \"\";\nif (response.body && response.body.address) {\n  const partesDireccion = response.body.address.split('!');\n  if (partesDireccion.length > 1) {\n    direccionRespuesta = partesDireccion[1];\n  }\n}\n\n// Obtener el valor insertado de la respuesta\nconst valorInsertado = response.body.values && response.body.values[0] && response.body.values[0][0];\n\n// Verificar si la inserción se realizó en la celda correcta\nconst insercionCorrecta = direccionRespuesta === celdaOriginal;\n\n// Verificar el código de estado HTTP\nconst estadoExitoso = response.status >= 200 && response.status < 300;\n\n// Crear objeto para almacenar el resultado de la verificación\nconst resultado = {\n  exito: insercionCorrecta && estadoExitoso,\n  celdaOriginal: celdaOriginal,\n  celdaInsertada: direccionRespuesta,\n  valorInsertado: valorInsertado,\n  statusCode: response.status,\n  requestId: response.id,\n  indice: indice,\n  celdasDiferentes: !insercionCorrecta && estadoExitoso,\n  falloEstado: !estadoExitoso\n};\n\nconst chatId = $('Organiza el Mensaje').first().json.infoMensaje.chat_id;\n\nif (!insercionCorrecta || !estadoExitoso) {\n  console.log(`Error en inserción: celda original=${celdaOriginal}, celda insertada=${direccionRespuesta}, status=${response.status}`);\n} else {\n  console.log(`Inserción correcta en celda ${celdaOriginal} con valor \"${valorInsertado}\"`);\n}\n\n// Incluir la respuesta original para tener toda la información\nresultado.respuestaOriginal = response;\n\n// Retornar el resultado de la verificación\nreturn {\n  json: resultado, \n  chat_id: chatId\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39280,
        -9168
      ],
      "id": "60ec1702-50f2-48fd-80da-a0c1e44ae82a",
      "name": "Code Verificar Inserción"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fb1eda05-eb5e-4683-8556-1cf2b5b8e4d5",
              "leftValue": "={{ $json.exito }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -39040,
        -9104
      ],
      "id": "8db54edb-e830-48d9-a6cf-0b838594a44d",
      "name": "If Verificar Inserción"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "15a95144-dd82-4ea5-b9ba-9eb924d2ae5c",
              "leftValue": "={{ $json.celdasDiferentes }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -38832,
        -9024
      ],
      "id": "e17d3822-1603-4045-aaf4-d650e5dcbf5d",
      "name": "If Diferente Caso"
    },
    {
      "parameters": {
        "jsCode": "// Código para limpiar una celda donde se insertó incorrectamente un valor\nconst input = $input.first().json;\n\n// Constantes para los IDs de SharePoint/OneDrive\nconst siteId = \"gexpresscargo.sharepoint.com,a592f886-4560-4e62-9646-1eee7add7abe,8b514073-41ae-4619-8f76-724bd912bc65\";\nconst driveId = \"b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8\";\nconst itemId = \"01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME\";\n\n// Verificar que tenemos la información necesaria\nif (!input || !input.celdaInsertada || !input.respuestaOriginal) {\n  console.log('Información insuficiente para limpiar la celda incorrecta');\n  return {\n    json: {\n      error: \"INFORMACION_INSUFICIENTE\",\n      mensaje: \"No hay suficiente información para limpiar la celda incorrecta\"\n    }\n  };\n}\n\n// Obtener la celda a limpiar y la información de la hoja\nconst celdaALimpiar = input.celdaInsertada;\nlet hojaExcel = input.nombreHoja || \"\"; // Usar el nombreHoja del input\n\n// Intentar extraer el nombre de la hoja de la dirección en la respuesta si no está disponible\nif ((!hojaExcel || hojaExcel === \"\") && input.respuestaOriginal.body && input.respuestaOriginal.body.address) {\n  const direccionCompleta = input.respuestaOriginal.body.address;\n  hojaExcel = direccionCompleta.split('!')[0].replace(/'/g, '');\n}\n\nconsole.log(`Limpiando celda incorrecta ${celdaALimpiar} en hoja ${hojaExcel}`);\n\n// Crear la solicitud para limpiar la celda\nconst requestBody = {\n  requests: [\n    {\n      id: `Limpiar_${celdaALimpiar}_${Date.now()}`,\n      method: \"PATCH\",\n      url: `/sites/${siteId}/drives/${driveId}/items/${itemId}/workbook/worksheets/${encodeURIComponent(hojaExcel)}/range(address='${celdaALimpiar}')`,\n      body: {\n        values: [[\"\"]] // Valor vacío para limpiar la celda\n      },\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  ],\n  _metadata: {\n    accion: \"limpiar\",\n    celda: celdaALimpiar,\n    hoja: hojaExcel,\n    datoOriginal: input\n  }\n};\n\n// Retornar el request para limpiar la celda\nreturn {\n  json: requestBody\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -38528,
        -9216
      ],
      "id": "7c25964e-33de-4a17-9836-f2fac1d59dcf",
      "name": "Code Limpiar Celda Incorrecta",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.microsoft.com/v1.0/$batch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -38304,
        -9216
      ],
      "id": "e2be6ba8-abc7-412b-b287-b0eb522b32e8",
      "name": "HTTP Request Limpiar Celda",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e570827e-13d0-4d6f-b23e-184ca2d3368c",
              "leftValue": "={{ $json.falloEstado }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -38368,
        -8832
      ],
      "id": "b18e0e8e-8858-4b1d-a669-6e7737c605a3",
      "name": "If fallo Estado"
    },
    {
      "parameters": {
        "jsCode": "// Código para reintentar la inserción en la celda correcta\nconst input = $input.first().json;\n\n// Constantes para los IDs de SharePoint/OneDrive\nconst siteId = \"gexpresscargo.sharepoint.com,a592f886-4560-4e62-9646-1eee7add7abe,8b514073-41ae-4619-8f76-724bd912bc65\";\nconst driveId = \"b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8\";\nconst itemId = \"01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME\";\n\n// Si el input viene del nodo anterior de limpiar celda, extraer el dato original\nconst datoOriginal = input._metadata?.datoOriginal || input;\n\n// Verificar que tenemos la información necesaria\nif (!datoOriginal || !datoOriginal.celdaOriginal) {\n  console.log('Información insuficiente para reintentar la inserción');\n  return {\n    json: {\n      error: \"INFORMACION_INSUFICIENTE\",\n      mensaje: \"No hay suficiente información para reintentar la inserción\"\n    }\n  };\n}\n\n// Obtener la celda correcta donde insertar y el valor a insertar\nconst celdaCorrecta = datoOriginal.celdaOriginal;\n\n// Intentar obtener el valor correcto a insertar\nlet valorAInsertar;\n\n// Primero, verificar si tenemos el valor de la respuesta original\nif (datoOriginal.valorInsertado !== undefined) {\n  valorAInsertar = datoOriginal.valorInsertado;\n} \n// Si no, intentar obtenerlo del body de la respuesta\nelse if (datoOriginal.respuestaOriginal?.body?.values?.[0]?.[0] !== undefined) {\n  valorAInsertar = datoOriginal.respuestaOriginal.body.values[0][0];\n} \n// Como último recurso, usar un valor vacío\nelse {\n  valorAInsertar = \"\";\n  console.log('No se pudo determinar el valor a insertar, usando valor vacío');\n}\n\n// Determinar el tipo de valor y formatearlo adecuadamente\nlet valorFormateado;\nif (typeof valorAInsertar === 'number') {\n  valorFormateado = [[valorAInsertar]]; // Mantener el tipo numérico\n} else {\n  valorFormateado = [[valorAInsertar.toString()]]; // Convertir a string para otros tipos\n}\n\n// Obtener la hoja de Excel - primero del dato original\nlet hojaExcel = datoOriginal.nombreHoja || \"\"; \n\n// Si no está disponible en el objeto principal, intentar obtenerlo de otros lugares\nif (!hojaExcel || hojaExcel === \"\") {\n  // Verificar si está en el _metadata\n  hojaExcel = input._metadata?.hoja || \"\";\n  \n  // Como último recurso, extraer de la dirección en la respuesta\n  if ((!hojaExcel || hojaExcel === \"\") && datoOriginal.respuestaOriginal?.body?.address) {\n    const direccionCompleta = datoOriginal.respuestaOriginal.body.address;\n    hojaExcel = direccionCompleta.split('!')[0].replace(/'/g, '');\n  }\n}\n\nconsole.log(`Reintentando inserción en celda ${celdaCorrecta} de la hoja ${hojaExcel} con valor \"${valorAInsertar}\"`);\n\n// Crear la solicitud para reintentar la inserción\nconst requestBody = {\n  requests: [\n    {\n      id: `Reintento_${celdaCorrecta}_${Date.now()}`,\n      method: \"PATCH\",\n      url: `/sites/${siteId}/drives/${driveId}/items/${itemId}/workbook/worksheets/${encodeURIComponent(hojaExcel)}/range(address='${celdaCorrecta}')`,\n      body: {\n        values: valorFormateado\n      },\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  ],\n  _metadata: {\n    accion: \"reintentar\",\n    celda: celdaCorrecta,\n    hoja: hojaExcel,\n    valor: valorAInsertar,\n    datoOriginal: datoOriginal,\n    intentos: (datoOriginal._metadata?.intentos || 0) + 1\n  }\n};\n\n// Retornar el request para reintentar la inserción\nreturn {\n  json: requestBody\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -38032,
        -9152
      ],
      "id": "d3f0700b-584a-4b58-927a-174dd53cd623",
      "name": "Code Reintentar Inserción",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.microsoft.com/v1.0/$batch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -37792,
        -9024
      ],
      "id": "c5b55deb-0250-457a-937e-66c1b9ad6cf0",
      "name": "HTTP Request Reintentar Inserción",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Código para verificar si la inserción fue exitosa (sin acciones correctivas)\nconst input = $input.first().json;\n\n// Verificar que tenemos la estructura esperada en la respuesta\nif (!input || !input.responses || !Array.isArray(input.responses) || input.responses.length === 0) {\n  console.log('Estructura de datos de respuesta no válida');\n  return {\n    json: {\n      error: \"RESPUESTA_INVALIDA\",\n      mensaje: \"La estructura de datos de la respuesta no es válida\",\n      exito: false\n    }\n  };\n}\n\n// Obtener la primera respuesta\nconst response = input.responses[0];\n\n// Extraer información de la solicitud original del ID\n// El formato del ID es: \"CELDA_INDICE_TIMESTAMP\"\nconst idPartes = response.id.split('_');\nconst celdaOriginal = idPartes[0];\nconst indice = idPartes[1];\n\n// Verificar que la respuesta tiene un cuerpo\nif (!response.body || !response.body.address) {\n  console.log(`Error: La respuesta no contiene información sobre la dirección de celda`);\n  return {\n    json: {\n      error: \"RESPUESTA_SIN_DIRECCION\",\n      mensaje: \"La respuesta no incluye información sobre la dirección de celda\",\n      requestId: response.id,\n      status: response.status,\n      celdaOriginal: celdaOriginal,\n      exito: false\n    }\n  };\n}\n\n// Extraer la dirección de celda de la respuesta\nlet direccionRespuesta = \"\";\nif (response.body && response.body.address) {\n  const partesDireccion = response.body.address.split('!');\n  if (partesDireccion.length > 1) {\n    direccionRespuesta = partesDireccion[1];\n  }\n}\n\n// Obtener el valor insertado de la respuesta\nconst valorInsertado = response.body.values && response.body.values[0] && response.body.values[0][0];\n\n// Verificar si la inserción se realizó en la celda correcta\nconst insercionCorrecta = direccionRespuesta === celdaOriginal;\n\n// Verificar el código de estado HTTP\nconst estadoExitoso = response.status >= 200 && response.status < 300;\n\n// Crear objeto para almacenar el resultado de la verificación\nconst resultado = {\n  exito: insercionCorrecta && estadoExitoso,\n  celdaOriginal: celdaOriginal,\n  celdaInsertada: direccionRespuesta,\n  valorInsertado: valorInsertado,\n  statusCode: response.status,\n  requestId: response.id,\n  indice: indice,\n  celdasDiferentes: !insercionCorrecta && estadoExitoso,\n  falloEstado: !estadoExitoso\n};\n\nif (!insercionCorrecta || !estadoExitoso) {\n  console.log(`Error en inserción: celda original=${celdaOriginal}, celda insertada=${direccionRespuesta}, status=${response.status}`);\n} else {\n  console.log(`Inserción correcta en celda ${celdaOriginal} con valor \"${valorInsertado}\"`);\n}\n\n// Incluir la respuesta original para tener toda la información\nresultado.respuestaOriginal = response;\n\n// Retornar el resultado de la verificación\nreturn {\n  json: resultado\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -37568,
        -9024
      ],
      "id": "9916ddfb-b911-4ca8-8ef4-f76fa030eaff",
      "name": "Code Volver a validar Inserción",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f7205e4e-147c-4e77-8fa8-08d082980b48",
              "leftValue": "={{ $json.exito }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -37344,
        -9024
      ],
      "id": "c766ec4d-a037-4d74-87f1-ff3530972432",
      "name": "If Verificar Inserción 2"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -38448,
        -9024
      ],
      "id": "a0b31d67-aa79-4de3-a377-ed3c263d71ed",
      "name": "Wait2",
      "webhookId": "a4bbf2b1-ea0c-4b02-af2c-64b29f2bdb5c"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -37040,
        -8848
      ],
      "id": "84336883-8132-4828-b9bc-28f084989a80",
      "name": "Wait3",
      "webhookId": "9d944db7-9c4f-439e-9990-d9937f2fb18e"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -36608,
        -8496
      ],
      "id": "2ffd61ad-543c-4481-b114-164fd958ba2a",
      "name": "OpenAI Chat Model12",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=Eres un asistente de un sistema de agendamiento de citas para la entrega de mercancía en bodega. Debes notificar al cliente que ha ocurrido un error en el sistema durante el proceso de inserción de la cita.\n\nGenera un mensaje directo aplicando estos principios de UX para WhatsApp:\n\n**FORMATO Y ESTRUCTURA:**\n1. Usa *negritas* para información crítica como tiempo límite y acciones urgentes\n2. Usa emojis estratégicos: 🚨 (urgente), ⚠️ (error), ⏰ (tiempo límite), 📞 (contacto), 🛠️ (técnico)\n3. Estructura la información de forma jerárquica y visual\n4. Destaca el tiempo límite de *5 minutos* con formato apropiado\n\n**CONTENIDO REQUERIDO:**\n1. 🚨 Comunica claramente que ocurrió un *error técnico* al registrar la cita\n2. ⏰ Indica urgentemente que se comunique con el área de bodega en los próximos *5 minutos*\n3. ⚠️ Menciona el riesgo de *perder la franja horaria* por alta demanda de muelles\n4. 🛠️ Aclara que es una situación *poco común* por inconveniente técnico\n5. 🙏 Pide disculpas y agradece la comprensión\n\n**TONO:** Urgente pero profesional, enfatizando acción inmediata para mantener la franja horaria.\n\n**EJEMPLO DE ESTRUCTURA ESPERADA:**\n🚨 *Error técnico en el sistema*\n\n⚠️ No pudimos registrar tu cita debido a un *inconveniente técnico* en el sistema.\n\n⏰ *URGENTE:* Comunícate con el área de bodega en los próximos *5 minutos* para que puedan agendar tu cita manualmente.\n\n🚨 Si no estableces contacto en ese tiempo, podrías *perder la franja horaria* seleccionada...\n\n🙏 Disculpas por los inconvenientes...\n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -36528,
        -8704
      ],
      "id": "d025d7f9-36a9-4824-9c8b-2d402ebedfb2",
      "name": "Basic LLM Notificar No Disponibilidad2",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('Basic LLM Notificar No Disponibilidad2').item.json.text.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -36128,
        -8528
      ],
      "id": "bcd3dedf-fced-4083-98f2-79345a5047fa",
      "name": "Validación de longitud de caracteres6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Basic LLM Notificar No Disponibilidad2').item.json.text }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Basic LLM Notificar No Disponibilidad2').item.json.text.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -35824,
        -8512
      ],
      "id": "679130cf-a023-4cce-afb6-c8d0e1b7ecce",
      "name": "Organiza variables del mensaje6"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -35648,
        -8736
      ],
      "id": "8b4c63e8-46a2-436c-abf3-c0028e9ab5f9",
      "name": "No Operation, do nothing8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -35824,
        -8736
      ],
      "id": "55886f28-2e3a-4758-b0fd-0f81cbd7f494",
      "name": "HTTP Request Enviar Mensaje por WhatsApp9"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -41520,
        -10176
      ],
      "id": "d74e3e4d-2bf6-43cf-b2fe-906746839287",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=# Extracción de información para citas de logística\n\nAnaliza TODOS los mensajes de la conversación (tanto el mensaje actual como el historial completo) para extraer la información necesaria para agendar una cita de logística. \n\n## Contexto \nLos usuarios pueden proporcionar información de forma parcial a lo largo de varios mensajes. Tu tarea es acumular y consolidar toda esta información. Debes extraer cualquier dato relevante sin importar en qué mensaje aparezca (actual o histórico).\n\n## Campos a extraer\n- Nombre del proveedor\n- Fecha de entrega (formato: DD de MMMM de YYYY)\n- Hora de entrega (formato: HH:MM AM/PM)\n- Categoría del material\n- Peso en kilos (extraer solo el valor numérico entero, ej: de '3.500 kilos' extraer 3500)\n- Número de unidades (extraer solo el valor numérico entero, ej: de '7,000 unidades' extraer 7000)\n- Número de orden de compra\n\n## Fuentes de información\n- Mensaje actual: {{ $('Unificación y consistencia de datos').first().json.infoMensaje.mensajeActual }}\n- Historial de mensajes: {{$node[\"Unificación y consistencia de datos\"].json.infoMensaje.historialMensajes}}\n- Hora actual: {{$node[\"Organiza el Mensaje\"].json.infoMensaje.horaMensajeActual}}\n- Fecha actual: {{$node[\"Organiza el Mensaje\"].json.infoMensaje.fechaMensajeActual}}\n\n## Instrucciones específicas para interpretación de fechas\n1. NUNCA interpretes fechas que estén en el pasado. Toda fecha debe ser igual o posterior a la fecha actual.\n2. Para fechas específicas numéricas:\n   - Si el usuario menciona \"30 de abril\" o \"el 30 de abril\", usa exactamente esa fecha.\n   - Si el usuario dice algo como \"para el 28\", interpreta como el día 28 del mes actual según la fecha del sistema.\n3. Para fechas con día de la semana y fecha numérica (ej: \"miércoles 30 de abril\"):\n   - Prioriza SIEMPRE la fecha numérica (30 de abril) aunque el día de la semana mencionado sea incorrecto.\n4. Para fechas que solo mencionan el día de la semana (ej: \"el martes\"):\n   - Si ese día ya pasó en la semana actual, asume que se refiere a la próxima semana.\n   - Ejemplo: Si hoy es jueves y dicen \"el miércoles\", debe interpretarse como el miércoles de la próxima semana.\n5. Para expresiones relativas:\n   - \"hoy\" = fecha actual del sistema\n   - \"mañana\" = fecha actual + 1 día\n   - \"pasado mañana\" = fecha actual + 2 días\n6. Si hay información contradictoria sobre la fecha en diferentes mensajes, prioriza la información del mensaje más reciente.\n\n## Instrucciones específicas para interpretación de números\n1.  Los campos 'peso' y 'unidades' deben ser valores numéricos enteros.\n2.  Los usuarios pueden usar puntos (.) o comas (,) como separadores de miles. Tu tarea es ignorar estos separadores y extraer el número completo.\n3.  **Ejemplos de interpretación correcta:**\n    - \"3.500 kilos\" debe interpretarse como el número `3500`.\n    - \"3,500 kilos\" debe interpretarse como el número `3500`.\n    - \"3500 kilos\" debe interpretarse como el número `3500`.\n    - \"7.000 unidades\" debe interpretarse como el número `7000`.\n4.  Extrae únicamente la parte numérica. Ignora texto como \"kilos\", \"unidades\", \"kg\", etc.\n\n## Instrucciones generales\n1. Analiza PRIMERO el historial de mensajes completo, luego el mensaje actual.\n2. Si un dato aparece en múltiples mensajes, prioriza la versión más reciente (mensaje actual).\n3. Si encuentras un mensaje que parece ser una respuesta directa a una pregunta sobre un dato específico (ej. \"¿Cuál es el peso?\" → \"300 kilos\"), considera esto como información válida.\n4. NO generes ni inventes información que no esté presente en los mensajes.\n5. Extrae solo la información factual, no interpretes intenciones o deseos del usuario.\n6. NO incluyas notas, explicaciones o campos adicionales en el JSON final.\n7. Si un dato no se encuentra en ninguna parte de la conversación, déjalo en blanco o como valor predeterminado (0 para valores numéricos, \"\" para texto).\n\n## Formato de respuesta\nDevuelve ÚNICAMENTE un objeto JSON limpio con el siguiente formato exacto:\n\n{\n  \"proveedor\": \"\",\n  \"fecha\": \"\",\n  \"hora\": \"\",\n  \"categoria\": \"\",\n  \"peso\": 0,\n  \"unidades\": 0,\n  \"ordenCompra\": \"\"\n}",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -41424,
        -10384
      ],
      "id": "fcba19c7-bad1-4382-b36e-6432e63dc667",
      "name": "Basic LLM Chain RECOLECCIÓN1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"proveedor\": \"SPB COLOMBIA S.A.S.\",\n  \"fecha\": \"30 de abril de 2025\",\n  \"hora\": \"08:00 AM\",\n  \"categoria\": \"ARENAS\",\n  \"peso\": 300,\n  \"unidades\": 600,\n  \"ordenCompra\": \"ARGM47896\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -41312,
        -10176
      ],
      "id": "5e99a19d-9ce7-4b49-8d52-8887b82c40b2",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "jsCode": "/*\n===========================================================\n  Nodo Code - VALIDAR INSERCIONES EN EXCEL (n8n)\n  • Analiza la salida del “Loop Over Uno a Uno”.\n  • Agrupa los ítems por franja (campo `indice` si existe;\n    de lo contrario, cada bloque de 5 ítems forma una franja).\n  • Verifica que cada inserción tenga:\n        exito === true\n        statusCode === 200\n        falloEstado === false\n  • Devuelve un único objeto JSON con:\n        – Resumen global.\n        – Detalle por franja (éxitos / fallos y celdas con error).\n===========================================================\n*/\n\n// 1) Obtener todos los ítems que llegan al nodo\nconst items = $input.all();\n\n// 2) Función auxiliar para determinar el identificador de la franja\nfunction obtenerIdFranja(item, idx) {\n  // Si existe 'indice', úsalo; de lo contrario agrupa cada 5 ítems\n  if (item.json && item.json.indice !== undefined && item.json.indice !== null) {\n    return String(item.json.indice).trim();\n  }\n  // +1 para que las franjas queden 1-basadas\n  return String(Math.floor(idx / 5) + 1);\n}\n\n// 3) Agrupar ítems por franja\nconst franjas = {};\nitems.forEach((item, idx) => {\n  const idFranja = obtenerIdFranja(item, idx);\n  if (!franjas[idFranja]) {\n    franjas[idFranja] = { id: idFranja, items: [] };\n  }\n  franjas[idFranja].items.push(item.json);\n});\n\n// 4) Analizar cada franja y construir el detalle\nconst detallesPorFranja = Object.values(franjas).map(franja => {\n  const totalOps   = franja.items.length;\n  const exitosas   = franja.items.filter(i =>\n    i.exito === true &&\n    i.statusCode === 200 &&\n    i.falloEstado === false\n  ).length;\n\n  const fallidas   = totalOps - exitosas;\n  const exitoTotal = fallidas === 0;\n\n  // Celdas con error para un diagnóstico claro\n  const celdasFallidas = franja.items\n    .filter(i => !(i.exito && i.statusCode === 200 && !i.falloEstado))\n    .map(i => ({\n      celdaOriginal   : i.celdaOriginal,\n      celdaInsertada  : i.celdaInsertada,\n      statusCode      : i.statusCode,\n      falloEstado     : i.falloEstado,\n      celdasDiferentes: i.celdasDiferentes,\n      mensaje         : 'Inserción fallida'\n    }));\n\n  return {\n    idFranja                : franja.id,\n    exitoFranja             : exitoTotal,\n    operacionesTotales      : totalOps,\n    operacionesExitosas     : exitosas,\n    operacionesFallidas     : fallidas,\n    porcentajeExitosas      : ((exitosas / totalOps) * 100).toFixed(2) + '%',\n    celdasFallidas\n  };\n});\n\n// 5) Resumen global\nconst operacionesTotales   = items.length;\nconst operacionesExitosas  = detallesPorFranja.reduce((sum, f) => sum + f.operacionesExitosas, 0);\nconst operacionesFallidas  = operacionesTotales - operacionesExitosas;\n\nconst franjasTotales   = detallesPorFranja.length;\nconst franjasExitosas  = detallesPorFranja.filter(f => f.exitoFranja).length;\nconst franjasFallidas  = franjasTotales - franjasExitosas;\n\n\nconst resumen = {\n  estadoGeneral              : franjasFallidas === 0 ? 'ÉXITO_COMPLETO' : 'ÉXITO_PARCIAL',\n  franjasTotales,\n  franjasExitosas,\n  franjasFallidas,\n  porcentajeFranjasExitosas  : ((franjasExitosas / franjasTotales) * 100).toFixed(2) + '%',\n  operacionesTotales,\n  operacionesExitosas,\n  operacionesFallidas,\n  porcentajeOperacionesExitosas : ((operacionesExitosas / operacionesTotales) * 100).toFixed(2) + '%',\n  detallesPorFranja\n};\n\n// 6) Devolver un único ítem con el resumen\nreturn [\n  {\n    json: resumen\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39648,
        -9376
      ],
      "id": "867a9e05-bab9-48fb-ae39-0665a30a1ecf",
      "name": "Code Validar inserciones"
    },
    {
      "parameters": {
        "jsCode": "// 1) Leer chat_id una sola vez\nconst chatId = $node[\"Organiza el Mensaje\"].json.infoMensaje.chat_id;\n\n// 2) Tomamos los datos de informacionCita una sola vez\nconst cita = $input.first().json.informacionCita || {};\nconst historialMensajes = $('Unificación y consistencia de datos').first().json.infoMensaje.historialMensajes;\n\n// Función para convertir fechas en formato \"06 de mayo de 2025\" a \"YYYY-MM-DD HH:mm:ss\"\nfunction convertirFecha(fechaTexto) {\n  const meses = {\n    enero: '01', febrero: '02', marzo: '03', abril: '04', mayo: '05',\n    junio: '06', julio: '07', agosto: '08', septiembre: '09',\n    octubre: '10', noviembre: '11', diciembre: '12'\n  };\n\n  // Dividir la fecha y mapear el mes\n  const [dia, de, mes, deNuevo, anio] = fechaTexto.split(' ');\n  const mesNumerico = meses[mes.toLowerCase()]; // Convertir el mes a número\n  return `${anio}-${mesNumerico}-${dia.padStart(2, '0')} 00:00:00`; // Formato DATETIME\n}\n\n// Convertimos la fecha aquí\nconst fechaCitaConvertida = convertirFecha(cita.fecha);\n\n// 3) Retornamos un solo objeto con todos los datos necesarios\nreturn {\n  json: {\n    chat_id: chatId,\n    proveedor: cita.proveedor,\n    orden_compra: cita.ordenCompra,\n    peso: cita.peso,\n    unidades: cita.unidades,\n    categoria: cita.categoria,\n    muelle: cita.muelle,\n    fecha_cita: fechaCitaConvertida, // Fecha ya convertida\n    hora_inicio: cita.horaInicio,\n    hora_fin: cita.horaFin,\n    chat_historial: historialMensajes,\n    // Incluimos cualquier otro dato que necesites\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39904,
        -9488
      ],
      "id": "6ba43fdb-43f5-427d-ade3-fabb0beb407e",
      "name": "Code Datos Insert Cita"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, chat_id, franjas_json\nFROM FranjasDisponiblesTemp\nWHERE chat_id = '{{ $json.chat_id }}'\nORDER BY timestamp_enviado ASC;\n"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -39648,
        -9568
      ],
      "id": "2d4f95f1-99e7-4069-a016-41b67171b551",
      "name": "Microsoft SQL Franjas Temporales",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8c501d95-bdf3-4635-a037-224926c2528d",
              "leftValue": "={{ $json.estadoGeneral }}",
              "rightValue": "ÉXITO_COMPLETO",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -39312,
        -9376
      ],
      "id": "10d6fe16-8217-4ede-9e98-4c76d6cce224",
      "name": "If Validar inserciones"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -39008,
        -9488
      ],
      "id": "b1e280bd-5fdb-4725-9edd-d106a8e70fd2",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Nodo Code – “Unir Franjas en Historial”\n * Coloca este nodo inmediatamente después de “Microsoft SQL Franjas Temporales”.\n * No requiere parámetros adicionales.\n */\n\n// 1) Tomamos todos los ítems que llegan desde el nodo SQL\nconst items = $input.all();   // ← cada item = { id, chat_id, franjas_json }\n\n// 2) Armamos la cadena tipo historial:  \"Franja 1: {...}\\n\\nFranja 2: {...}\\n\\n…\"\nlet historial = '';\nitems.forEach((item, idx) => {\n  const numero = idx + 1;                                 // 1, 2, 3, …\n  const cuerpoFranja = JSON.stringify(JSON.parse(item.json.franjas_json), null, 2);    // viene como string desde SQL\n  historial += `Franja ${numero}: ${cuerpoFranja}\\n\\n`;\n});\n\n// 3) (Opcional) quitamos el último salto de línea doble\nhistorial = historial.trimEnd();\n\n// 4) Devolvemos **UN** ítem con **UNA** propiedad (ajusta el nombre si quieres)\nreturn [\n  {\n    json: {\n      franjas_historial: historial            // ← cadena final\n    }\n  }\n];\n\n/* -------------------------------------------------------------------------\n   Ejemplo de salida cuando hay 3 filas:\n\n   {\n     \"franjas_historial\": \"Franja 1: {\\\"disponibilidadConfirmada\\\":false,...}\\n\\n\n                           Franja 2: {\\\"disponibilidadConfirmada\\\":true,...}\\n\\n\n                           Franja 3: {...}\"\n   }\n--------------------------------------------------------------------------- */\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39312,
        -9568
      ],
      "id": "ca292dbd-64b5-4c98-8e21-a7b38dbab6a8",
      "name": "Code Estructuración de franjas temporales"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -36160,
        -9056
      ],
      "id": "dde11423-8484-453d-bb43-089ebff24368",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO CitasRecepcion\n(\n    chat_id,\n    nombre,              \n    orden_compra,\n    peso,\n    unidades,\n    horas_entrega,\n    categoria,\n    muelle,\n    fecha_cita,\n    hora_inicio,\n    hora_fin,\n    estado,\n    fecha_creacion,\n    fecha_modificacion,\n    chat_historial,\n    chat_historial_datos\n)\n/* ─── AQUÍ ─── */\nOUTPUT INSERTED.id          --  ←  devolverá el IDENTITY de la fila recién insertada\nVALUES\n(\n    '{{ $('Code Datos Insert Cita').first().json.chat_id }}',\n    '{{ $('Code Datos Insert Cita').first().json.proveedor }}',\n    '{{ $('Code Datos Insert Cita').first().json.orden_compra }}',\n     {{ $('Code Datos Insert Cita').first().json.peso }},              \n     {{ $('Code Datos Insert Cita').first().json.unidades }},          {{ $('Code Agrupar Franjas').first().json.informacionCita.duracionHoras }},\n    '{{ $('Code Datos Insert Cita').first().json.categoria }}',\n    '{{ $('Code Datos Insert Cita').first().json.muelle }}',\n    '{{ $('Code Datos Insert Cita').first().json.fecha_cita }}',\n    '{{ $('Code Datos Insert Cita').first().json.hora_inicio }}',      \n    '{{ $('Code Datos Insert Cita').first().json.hora_fin }}',   \n      'PROGRAMADA',                   \n    (SYSDATETIMEOFFSET() AT TIME ZONE 'SA Pacific Standard Time'), \n    NULL,                            \n    '{{ $items(\"Code Datos Insert Cita\")\n        .map(i => i.json.chat_historial)\n        .join(\"\\n\")\n        .replace(/'/g,\"''\") }}',\n    '{{ $items('Merge')\n        .map(i => i.json.franjas_historial)\n        .join('\\n')\n        .replace(/'/g, \"''\") }}'\n);\n\n"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -37296,
        -9344
      ],
      "id": "c9593579-6635-474b-b032-c99727873a4b",
      "name": "Microsoft SQL Insertar Cita",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "BEGIN TRANSACTION;\n\nDELETE FROM MensajesWhatsApp\nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n   OR (chat_id = 'agenteAI'\n       AND message_id IN (\n           SELECT message_id \n           FROM MensajesWhatsApp\n           WHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n       )\n   );\n\nDELETE FROM FranjasDisponiblesTemp \nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}';\n\nCOMMIT;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -13744,
        -4224
      ],
      "id": "d5386fb4-7234-46f5-9d98-94ebd7db0a88",
      "name": "Microsoft SQL Eliminar Mensajes",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -35840,
        -8944
      ],
      "id": "09cdb224-4fe1-4e99-b21d-3d37f0932c58",
      "name": "OpenAI Chat Model13",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('Basic LLM Notificar Cita Exitosa').item.json.text.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -34896,
        -9024
      ],
      "id": "9515f87c-44b2-4e42-b792-40f900360f84",
      "name": "Validación de longitud de caracteres7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Basic LLM Notificar Cita Exitosa').item.json.text }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Basic LLM Notificar Cita Exitosa').item.json.text.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -34592,
        -8896
      ],
      "id": "83eea074-7343-4aa6-9d6b-4c4946b7c84f",
      "name": "Organiza variables del mensaje7"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -34432,
        -9120
      ],
      "id": "0aed4498-3a22-4659-9e9d-816f025736fb",
      "name": "No Operation, do nothing9"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -34608,
        -9120
      ],
      "id": "d5aa340f-0efd-4323-ac87-f31a512e2390",
      "name": "HTTP Request Enviar Mensaje por WhatsApp10"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=# Rol\nEres el asistente virtual de Konfíe Logistics.  \nTu objetivo es notificar al proveedor que su cita se registró con éxito en el cronograma.\n\n# Datos disponibles\n- idCita           = {{ $(\"Microsoft SQL Insertar Cita\").first().json.id }}\n- fechaCita        = {{ $(\"Code Datos Insert Cita\").first().json.fecha_cita }}\n- horaInicio       = {{ $(\"Code Datos Insert Cita\").first().json.hora_inicio }}\n- horaFin          = {{ $(\"Code Datos Insert Cita\").first().json.hora_fin }}\n- muelle           = {{ $(\"Code Datos Insert Cita\").first().json.muelle }}\n- ordenCompra      = {{ $(\"Code Datos Insert Cita\").first().json.orden_compra }}\n- categoria        = {{ $(\"Code Datos Insert Cita\").first().json.categoria }}\n- pesoKg           = {{ $(\"Code Datos Insert Cita\").first().json.peso }}\n- unidades         = {{ $(\"Code Datos Insert Cita\").first().json.unidades }}\n\n# Instrucciones de redacción\n1. Mantén un tono profesional, cordial y positivo (feliz pero sin exagerar).\n2. Empieza con una breve expresión de entusiasmo por la confirmación exitosa (ej.: “¡Excelente!” o “¡Cita confirmada!”).\n3. Muestra los detalles de la cita en una lista con viñetas y emojis apropiados:\n   • 🆔 **Número de cita:** resáltalo con el emoji 🔖 antes del `idCita` → 🔖 {{ $(\"Microsoft SQL Insertar Cita\").first().json.id }}\n   • 📅 **Fecha:** {{ $(\"Code Datos Insert Cita\").first().json.fecha_cita.split(\" \")[0] }}\n   • ⏰ **Horario:** {{ $(\"Code Datos Insert Cita\").first().json.hora_inicio }} – {{ $(\"Code Datos Insert Cita\").first().json.hora_fin }} \n   • 🚩 **Muelle:** {{ $(\"Code Datos Insert Cita\").first().json.muelle }} \n   • 🏷️ **O/C:** {{ $(\"Code Datos Insert Cita\").first().json.orden_compra }} \n   • 📦 **Categoría:** {{ $(\"Code Datos Insert Cita\").first().json.categoria }}\n   • ⚖️ **Peso:** {{ $(\"Code Datos Insert Cita\").first().json.peso }} kg  \n   • 📦 **Unidades:** {{ $(\"Code Datos Insert Cita\").first().json.unidades }}\n4. Reitera el número de cita con el emoji 🔖 y aclara que con ese número el proveedor podrá **modificar o cancelar** la cita.\n5. Explica claramente la política: “Las modificaciones o cancelaciones deben solicitarse **hasta un día hábil antes** y **antes de las 4:30 p. m.**; después de ese plazo no podremos realizar cambios.”\n6. Cierra agradeciendo su colaboración y confirmando que estaremos atentos a su llegada.\n7. Devuelve **solo** el mensaje final, sin encabezados ni explicaciones adicionales.\n\n# Salida esperada (ejemplo de estilo)\n✅ *¡Cita confirmada con éxito!* 🎉  \n🔖 Numero de la Cita: 12345  \n📅 El 06 de mayo de 2025  \n⏰ A las 08:00 – 10:00  \n🚩 En el Muelle 1  \n🏷️ O/C ARGM47896  \n📦 Categoría Arenas  \n⚖️ 300 kg | 📦 600 u\n\nGuarda tu número de cita 🔖 12345 para futuras gestiones ya sea reprogramar o cancelar.  \nPodrás modificarla o cancelarla hasta un día hábil antes y antes de las 4:30 p. m.  \n¡Muchas gracias por tu confianza!\n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -35792,
        -9152
      ],
      "id": "e9076638-021f-4dc5-8a49-2082680a863b",
      "name": "Basic LLM Notificar Cita Exitosa",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "BEGIN TRANSACTION;\n\nDELETE FROM MensajesWhatsApp\nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n   OR (chat_id = 'agenteAI'\n       AND message_id IN (\n           SELECT message_id \n           FROM MensajesWhatsApp\n           WHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n       )\n   );\n\nDELETE FROM FranjasDisponiblesTemp \nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}';\n\n-- Resetear estado conversacional a INICIAL después de cita creada exitosamente\nUPDATE EstadoConversacional \nSET estado_actual = 'INICIAL', \n    contexto_proceso = '{\"descripcion\": \"Cita creada exitosamente, conversación reiniciada\", \"ultima_accion\": \"cita_creada\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n    contador_fuera_contexto = 0,\n    ultimo_mensaje_fuera_contexto = NULL,\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}';\n\n-- Si no existe el registro, crear uno en estado INICIAL\nIF @@ROWCOUNT = 0\nBEGIN\n    INSERT INTO EstadoConversacional (chat_id, estado_actual, contexto_proceso, fecha_creacion, fecha_actualizacion)\n    VALUES (\n        '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}', \n        'INICIAL', \n        '{\"descripcion\": \"Cita creada exitosamente, conversación reiniciada\", \"ultima_accion\": \"cita_creada\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n        GETDATE(),\n        GETDATE()\n    );\nEND\n\nCOMMIT;\n"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -36720,
        -8832
      ],
      "id": "b56af45a-1e2e-482b-917b-75ab02886e35",
      "name": "Microsoft SQL Eliminar Mensajes2",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -44256,
        -6512
      ],
      "id": "f9f811bc-fc82-4b90-a7b9-099b3a8950c6",
      "name": "OpenAI Chat Model14",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\"idCita\": \"\",\n\"ordenCompra\": \"\",\n\"nuevaFecha\": \"\",\n\"nuevaHora\": \"\",\n\"camposFaltantes\": [],\n\"fechaActual\": \"\",\n\"horaActual\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -44096,
        -6512
      ],
      "id": "98467c6e-403e-485e-aaed-b1e9c4039110",
      "name": "Structured Output Parser4"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=# Extracción de datos para edición de citas\n\n## SISTEMA\nEres un asistente especializado en interpretar mensajes de usuarios para reprogramación de citas logísticas. Tu función es extraer los datos necesarios para reprogramar una cita existente (ID de cita, orden de compra, nueva fecha, nueva hora) y validar que sean coherentes.\n\n**Tu única responsabilidad es extraer datos, no validarlos ni tomar decisiones.**\n\n## DETECCIÓN DE RETRACTACIONES EN EDICIÓN\nSi detectas múltiples cambios de fecha/hora contradictorios en el historial:\n- Verifica si el usuario ha mencionado diferentes fechas para la reprogramación\n- Si encuentra fechas contradictorias, marca como rechazado con motivo \"retractaciones_multiples\"\n- Sugiere reiniciar el proceso\n\n## Datos a extraer\n- ID de la cita (por ejemplo, \"Cita 12345\", \"Número 12345\", etc.)\n- Número de orden de compra asociado a la cita\n- Nueva fecha deseada\n- Nueva hora deseada\n\n## Fuentes de datos a analizar\n- Mensaje actual: {{ $('Unificación y consistencia de datos').first().json.infoMensaje.mensajeActual }}\n- Historial de mensajes: {{ $node[\"Unificación y consistencia de datos\"].json[\"infoMensaje\"][\"historialMensajes\"] }}\n- Hora actual: {{$node[\"Organiza el Mensaje\"].json.infoMensaje.horaMensajeActual}}\n- Fecha actual: {{$node[\"Organiza el Mensaje\"].json.infoMensaje.fechaMensajeActual}}\n\n## Procesamiento del historial completo de mensajes\n1. IMPORTANTE: Analiza el historial COMPLETO de mensajes como una conversación\n2. Busca información relevante a lo largo de TODOS los mensajes, no solo en el mensaje actual\n3. Considera que la información puede estar distribuida en varios mensajes (por ejemplo, ID en un mensaje, orden de compra en otro, fecha en otro, hora en otro)\n4. Une la información proporcionada en mensajes separados para construir la solicitud completa\n5. Si el mensaje actual contiene solo un dato (como \"a las 7am\"), conéctalo con datos previos de mensajes anteriores\n\n## Detección de retractaciones específica\n6. CRÍTICO: Detecta si el usuario ha proporcionado fechas contradictorias para la reprogramación:\n   - Ejemplo: Primer mensaje \"reprogramar para el 17 de julio\", segundo mensaje \"mejor para el 18 de julio\"\n   - Si detectas esto, marca motivoRechazo como \"retractaciones_multiples\"\n\n## Instrucciones específicas\n1. Busca PRIMERO el ID de la cita en formato numérico en CUALQUIER mensaje previo\n2. Busca el número de orden de compra en CUALQUIER mensaje previo\n3. Si encuentras ID y orden de compra, busca la fecha nueva que desea el proveedor en CUALQUIER mensaje previo o actual\n4. Si encuentras ID, orden de compra y fecha, busca la hora nueva que desea el proveedor en CUALQUIER mensaje previo o actual\n5. Si un mensaje solo menciona la hora (por ejemplo, \"7am\"), conéctalo con la fecha mencionada en mensajes anteriores\n6. Si un mensaje solo menciona una fecha (por ejemplo, \"jueves 8 de mayo\"), busca si hay información sobre la hora en otros mensajes\n7. Considera expresiones como \"para mañana\", \"para el lunes\", \"para el 20\", etc. encontradas en CUALQUIER mensaje\n8. Normaliza la fecha al formato \"DD de [mes] de YYYY\" (usando el año actual si no se especifica)\n9. Normaliza la hora al formato \"HH:MM AM/PM\"\n10. NUEVO: Verifica si hay fechas contradictorias en diferentes mensajes del historial\n\n## Reglas de validación temporal\n1. Si la nueva fecha es anterior a la fecha actual → motivoRechazo: \"fecha_pasada\"\n2. Si la nueva fecha es para el mismo día después de las 4:30 PM → motivoRechazo: \"mismo_dia_tarde\"\n3. Si la nueva fecha es para el día siguiente y son más de las 4:30 PM → motivoRechazo: \"dia_siguiente_tarde\"\n4. Si hay múltiples fechas contradictorias → motivoRechazo: \"retractaciones_multiples\"\n\n## Formato de respuesta (JSON)\n```json\n{\n  \"idCita\": \"12345\",\n  \"ordenCompra\": \"ARGM47896\", \n  \"nuevaFecha\": \"20 de mayo de 2025\",\n  \"nuevaHora\": \"10:00 AM\",\n  \"camposFaltantes\": [],\n  \"fechaActual\": \"19 de mayo de 2025\",\n  \"horaActual\": \"14:30\",\n  \"motivoRechazo\": \"retractaciones_multiples\",\n  \"mensajeParaUsuario\": \"\"\n}\n```\n\n## MENSAJES PARA USUARIO CON FORMATO WHATSAPP\n\n### Si falta idCita:\n```\n📋 *Información requerida*\n\n🔖 Necesito el *número de cita* que aparece en tu confirmación anterior.\n\n💡 *Ejemplo:* \"Debes proporcionar el ID de la cita que se envió cuando creaste la cita\"\n\n📝 *Formato:* \"Quiero reagendar mi cita 12345 para [nueva fecha]\"\n```\n\n### Si falta ordenCompra:\n```\n📋 *Información requerida*\n\n🏷️ Necesito el *número de orden de compra* para verificación.\n\n💡 *Ejemplo:* ARGM47896, OC-12345\n\n📝 *Formato:* \"Mi orden de compra es ARGM47896\"\n```\n\n### Si falta nuevaFecha:\n```\n📋 *Información requerida*\n\n📅 Necesito la *fecha nueva* para tu entrega.\n\n💡 *Ejemplo:* \"Debes proporcionar la fecha nueva para la entrega de esta forma: 15 de agosto\"\n\n📝 *Formato:* \"Quiero reagendar para el 15 de agosto\"\n```\n\n### Si falta nuevaHora:\n```\n📋 *Información requerida*\n\n⏰ Necesito la *hora nueva* para tu entrega.\n\n💡 *Ejemplo:* \"10:00 AM\", \"2:30 PM\", \"en la mañana\"\n\n📝 *Formato:* \"A las 10:00 AM\"\n```\n\n### Para retractaciones múltiples:\n```\n⚠️ *Aclaración necesaria*\n\n📝 He detectado *fechas diferentes* en tus mensajes.\n\n🤔 Para evitar confusiones, confirma:\n\n❓ *¿Cuál es la fecha definitiva que prefieres?*\n\n💡 *Ejemplo:* \"Confirmo que quiero reagendar para el 20 de mayo a las 10:00 AM\"\n```\n\n## Ejemplos de campos faltantes\n- Si no hay ID: camposFaltantes: [\"idCita\"]  \n- Si no hay orden: camposFaltantes: [\"ordenCompra\"]\n- Si no hay fecha: camposFaltantes: [\"nuevaFecha\"]\n- Si no hay hora: camposFaltantes: [\"nuevaHora\"]\n\n## Casos especiales de retractación\n- Usuario dice: \"reprogramar mi cita 123 para el 17\", luego \"mejor para el 18\" → motivoRechazo: \"retractaciones_multiples\"\n- Usuario cambia fecha múltiples veces en la misma conversación → motivoRechazo: \"retractaciones_multiples\"\n\nIMPORTANTE: Solo extrae datos, no valides fechas pasadas ni horarios de oficina. Esa validación la hace otro nodo.",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -44176,
        -6704
      ],
      "id": "62238c04-5179-4e8b-9b0e-1092c5ac59f7",
      "name": "Basic LLM Extracción y Validacion de Datos Editar Cita"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f0ba0488-a2ee-439f-ac12-ff4f15d14c58",
              "leftValue": "={{ $node[\"Code Validación de datos para reprogramación de citas\"].json.todoCorrecto }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -43072,
        -6704
      ],
      "id": "191be8cb-9253-4d8a-88d1-add8214f3b3f",
      "name": "If Validar si la operación es posible (todoCorrecto)"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b8d93581-02fd-4502-8346-e5f35dd7a430",
              "leftValue": "={{ $('Code Validación de datos para reprogramación de citas').item.json.intentaModificarDatos }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -42672,
        -6528
      ],
      "id": "1e498a42-5e5d-49c1-89cc-35ee7b28abf9",
      "name": "If Verificar si se intenta modificar datos no permitidos"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "17546f72-2b59-46c3-b92b-e87f10cf0799",
              "leftValue": "={{ $('Code Validación de datos para reprogramación de citas').item.json.rechazoTemporal }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -42416,
        -6304
      ],
      "id": "20ec65c5-6d43-43bd-a645-2c7fc1385e2a",
      "name": "If Verificar si es un rechazo por motivos temporales"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "46e5638b-d64b-47e5-9cac-984fb79f107c",
              "leftValue": "={{ $('Code Validación de datos para reprogramación de citas').item.json.camposFaltantes.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -42144,
        -6096
      ],
      "id": "de525838-26dc-4ffb-ab52-f4ccdc6a0001",
      "name": "If Verificar si faltan datos"
    },
    {
      "parameters": {
        "jsCode": "// Create a generic error message\nconst errorMessage = {\n  output: {\n    mensajeSistema: \"🚨 *Error interno del sistema* ⚠️\\n\\n\" +\n                   \"😥 Disculpa, ha ocurrido un error inesperado.\\n\\n\" +\n                   \"🔄 *Acción requerida:*\\n\" +\n                   \"Por favor, inicia una *nueva conversación* y vuelve a solicitar la reprogramación de tu cita.\\n\\n\" +\n                   \"🙏 Gracias por tu comprensión.\"\n  }\n};\n\n// Return the formatted message that can be used by your response node\nreturn errorMessage;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -41936,
        -5856
      ],
      "id": "720f2e92-13f9-4b1b-82fc-8cbac6a1394e",
      "name": "Code Mensaje Error"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b2110549-dd58-46b3-9707-dbbe0a5004f2",
              "leftValue": "={{ $('Basic LLM Extracción y Validacion de Datos Editar Cita').first().json.output.mensajeParaUsuario.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            },
            {
              "id": "f250763e-e4ab-4054-8bf5-84d61e39f87b",
              "leftValue": "={{ $('Code Validación de datos para reprogramación de citas').item.json.mensajeSistema.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -41504,
        -6448
      ],
      "id": "bb6a1a79-33d1-4019-b2fe-f1a1c5ec4125",
      "name": "Validación de longitud de caracteres8"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -40992,
        -6512
      ],
      "id": "a3567e4e-20ce-4a26-b78d-5742a2a9b41d",
      "name": "No Operation, do nothing11"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Consistencia de datos, intención consultar malla').item.json.mensaje }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -41168,
        -6512
      ],
      "id": "33f5ee98-6464-42fe-9231-6190a51ba998",
      "name": "HTTP Request Enviar Mensaje por WhatsApp11"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Code Validación de datos para reprogramación de citas').item.json.mensajeSistema }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Code Validación de datos para reprogramación de citas').item.json.mensajeSistema.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -41168,
        -6304
      ],
      "id": "07acd693-617d-4637-aa93-c6286b3bb61a",
      "name": "Organiza variables del mensaje8"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @Id INT = {{ $node[\"Code Validación de datos para reprogramación de citas\"].json.idCita }};\n\nIF EXISTS (SELECT 1\n           FROM   CitasRecepcion\n           WHERE  id = @Id\n             AND  estado = 'PROGRAMADA')\nBEGIN\n    SELECT *\n    FROM   CitasRecepcion\n    WHERE  id = @Id\n      AND  estado = 'PROGRAMADA';\nEND\nELSE\nBEGIN\n    -- Código 50001 y nivel 16: error de aplicación personalizado\n    THROW 50001, 'La cita no se encuentra en estado PROGRAMADA.', 16;\nEND"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -42848,
        -6816
      ],
      "id": "9545f982-0611-4d72-9810-d921f96e94e7",
      "name": "Microsoft SQL Obtener Cita",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0c011567-205a-4ff9-a41a-5c1cd00a6f04",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "07596852-0256-421d-be90-26f9e2e932ba",
              "leftValue": "={{ $json.chat_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -42624,
        -6816
      ],
      "id": "805a0600-2b44-435a-9c24-5a709b185863",
      "name": "If existe cita"
    },
    {
      "parameters": {
        "jsCode": "// Create a generic error message\nconst errorMessage = {\n  output: {\n    mensajeSistema: \"🚨 *Cita no encontrada* ⚠️\\n\\n\" +\n                   \"El número de cita proporcionado *no existe* en el cronograma o corresponde a una cita ya *cancelada/reprogramada*.\\n\\n\" +\n                   \"🔄 *Acción requerida:*\\n\" +\n                   \"Por temas de *trazabilidad*, necesitamos reiniciar el proceso.\\n\\n\" +\n                   \"👉 Por favor, proporciona *nuevamente todos los datos* verificando que sean correctos.\\n\\n\" +\n                   \"🙏 Gracias por tu colaboración.\"\n  }\n};\n\n// Return the formatted message that can be used by your response node\nreturn errorMessage;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -42192,
        -6688
      ],
      "id": "38cf2c80-2d2f-4fa4-adc6-5fdac9b49858",
      "name": "Code Mensaje Error1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -14608,
        -4224
      ],
      "id": "63c97c05-1716-47f1-89b8-9dcb7a161bf8",
      "name": "Merge2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -13552,
        -4224
      ],
      "id": "86c917f4-9c33-4fb1-a6a5-20f3e956b595",
      "name": "No Operation, do nothing10"
    },
    {
      "parameters": {
        "jsCode": "// Obtener todos los datos de entrada\nconst datosEntrada = $input.all();\n// Filtrar solo los objetos que contienen un mensaje, descartando estadísticas\nconst mensajes = datosEntrada.filter(item => item.json.message_id);\n\n// Extraer chat_id del primer mensaje del usuario (no del agente)\nconst userMessage = mensajes.find(item => item.json.chat_id !== 'agenteAI');\nconst chat_id = userMessage ? userMessage.json.chat_id : \"No hay chat_id disponible\";\n\n// Función para convertir la fecha a formato Colombia (UTC-5) en formato de 12 horas\nfunction convertirHoraColombia(fechaUTC) {\n    if (!fechaUTC) return \"[Hora no encontrada]\";\n    let fecha = new Date(fechaUTC);\n    fecha.setHours(fecha.getHours()); // Convertir a UTC-5\n    return fecha.toLocaleTimeString('es-CO', { hour: '2-digit', minute: '2-digit', hour12: true });\n}\n// Función para dar formato de fecha en español sin hora\nfunction formatearFecha(fechaUTC) {\n    if (!fechaUTC) return \"[Fecha no encontrada]\";\n    let fecha = new Date(fechaUTC);\n    return fecha.toLocaleDateString('es-CO', { year: 'numeric', month: 'long', day: 'numeric' });\n}\n// Estructurar los mensajes en un formato claro para el agente IA\nconst mensajesEstructurados = mensajes.map((mensaje, index) => {\n    let fecha = mensaje.json.fecha ? formatearFecha(mensaje.json.fecha) : \"[Fecha no encontrada]\";\n    let hora = mensaje.json.fecha ? convertirHoraColombia(mensaje.json.fecha) : \"[Hora no encontrada]\";\n    let contenido = mensaje.json.contenido || \"[Sin contenido]\";\n    \n    // Determinar si el mensaje es del usuario o del agente IA\n    let remitente = mensaje.json.chat_id === 'agenteAI' ? 'El Agente ChatBot IA dice:' : 'El usuario dice:';\n    \n    return `Mensaje ${index + 1} enviado el ${fecha} a las ${hora}.\\n${remitente} \"${contenido}\".`;\n});\n// Unir todos los mensajes en un solo texto estructurado\nconst historialMensajes = mensajesEstructurados.join('\\n\\n');\n// Retornar los datos estructurados incluyendo chat_id\nreturn [{ chat_id, historialMensajes }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -14192,
        -4224
      ],
      "id": "6a8ac6c4-0b7b-4ff6-bc02-eb74e6de836a",
      "name": "Code integracion de mensajes"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM MensajesWhatsApp\nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n   OR (chat_id = 'agenteAI' AND message_id IN (\n       SELECT message_id \n       FROM MensajesWhatsApp \n       WHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n   ))\nORDER BY fecha ASC;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -14400,
        -4224
      ],
      "id": "0e82d935-0c15-452d-a394-e6721021eec7",
      "name": "Recupera todos los mensajes1",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE CitasRecepcion\nSET chat_historial = '{{ \n  $items(\"Code integracion de mensajes\")\n    .map(i => i.json.historialMensajes)\n    .join(\"\\n\")\n    .replace(/'/g, \"''\")\n}}'\nWHERE id = '{{ \n  $('Microsoft SQL Insertar Cita').isExecuted\n    ? $('Microsoft SQL Insertar Cita').first().json.id\n    : $('Microsoft SQL Insertar Cita1').isExecuted\n      ? $('Microsoft SQL Insertar Cita1').first().json.id\n      : $('Microsoft SQL Obtener Cita').isExecuted\n        ? $('Microsoft SQL Obtener Cita').first().json.id\n        : $('Code Datos Cancelar Cita').first().json.id \n}}';"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -13968,
        -4224
      ],
      "id": "0803b165-6349-40c5-8360-a57fe5cec2ef",
      "name": "Microsoft SQL Actualiza la Cita",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Nodo Code: Validación de datos para reprogramación de citas\n// Recibe los datos extraídos del nodo LLM y aplica las validaciones de negocio\n\n// Obtener los datos del nodo anterior usando la ruta específica\nconst datosExtraidos = $('Basic LLM Extracción y Validacion de Datos Editar Cita').first().json.output;\n\n// Mostrar datos extraídos para debug\nconsole.log(\"Datos recibidos del nodo anterior:\", JSON.stringify(datosExtraidos, null, 2));\n\n// Función principal que procesa los datos de entrada\nfunction procesarDatosReprogramacion(datos) {\n  try {\n    // Estructura de respuesta final (siguiendo el formato del prompt original)\n    const respuesta = {\n      todoCorrecto: false,\n      datosPreviamenteConfirmados: false,\n      idCita: datos.idCita || \"\",\n      ordenCompra: datos.ordenCompra || \"\",\n      nuevaFecha: datos.nuevaFecha || \"\",\n      nuevaHora: datos.nuevaHora || \"\",\n      camposFaltantes: datos.camposFaltantes || [],\n      mensajeSistema: \"\",\n      rechazoTemporal: false,\n      motivoRechazo: \"\",\n      intentaModificarDatos: false\n    };\n\n    console.log(\"Datos iniciales en respuesta:\", JSON.stringify(respuesta, null, 2));\n\n    // 1. Verificar si hay campos faltantes\n    if (respuesta.camposFaltantes && respuesta.camposFaltantes.length > 0) {\n      respuesta.todoCorrecto = false;\n      respuesta.mensajeSistema = generarMensajeCamposFaltantes(respuesta.camposFaltantes);\n      return respuesta;\n    }\n\n    // 2. Validar las fechas y reglas temporales\n    const validacionTemporal = validarReglasTemporales(respuesta.nuevaFecha, datos.fechaActual, datos.horaActual);\n    console.log(\"Resultado de validación temporal:\", JSON.stringify(validacionTemporal, null, 2));\n    \n    if (validacionTemporal.esValido === false) {\n      respuesta.todoCorrecto = false;\n      respuesta.rechazoTemporal = true;\n      respuesta.motivoRechazo = validacionTemporal.motivoRechazo;\n      respuesta.mensajeSistema = validacionTemporal.mensaje;\n      return respuesta;\n    }\n\n    // 3. Si todo está correcto, preparar mensaje de confirmación\n    respuesta.todoCorrecto = true;\n    respuesta.mensajeSistema = `Entendido. Estás solicitando reprogramar la cita 🔖 ${respuesta.idCita} con orden de compra ${respuesta.ordenCompra} para el ${respuesta.nuevaFecha} a las ${respuesta.nuevaHora}. Verificaré la disponibilidad para este horario.`;\n    \n    return respuesta;\n  } catch (error) {\n    console.error(\"Error al procesar datos de reprogramación:\", error);\n    return {\n      todoCorrecto: false,\n      datosPreviamenteConfirmados: false,\n      idCita: datos.idCita || \"\",\n      ordenCompra: datos.ordenCompra || \"\",\n      nuevaFecha: datos.nuevaFecha || \"\",\n      nuevaHora: datos.nuevaHora || \"\",\n      camposFaltantes: [\"error_procesamiento\"],\n      mensajeSistema: \"Ha ocurrido un error al procesar tu solicitud. Por favor, intenta nuevamente proporcionando todos los datos necesarios.\",\n      rechazoTemporal: false,\n      motivoRechazo: \"error_sistema\",\n      intentaModificarDatos: false\n    };\n  }\n}\n\n// Genera mensaje para campos faltantes\nfunction generarMensajeCamposFaltantes(camposFaltantes) {\n  let mensaje = \"Para poder reprogramar tu cita, necesito \";\n  \n  if (camposFaltantes.includes(\"idCita\")) {\n    mensaje += \"el número de cita 🔖 que aparece en tu confirmación anterior, \";\n  }\n  \n  if (camposFaltantes.includes(\"ordenCompra\")) {\n    mensaje += \"el número de orden de compra para verificación, \";\n  }\n  \n  if (camposFaltantes.includes(\"nuevaFecha\")) {\n    mensaje += \"la nueva fecha que prefieres, \";\n  }\n  \n  if (camposFaltantes.includes(\"nuevaHora\")) {\n    mensaje += \"la nueva hora que prefieres, \";\n  }\n  \n  mensaje = mensaje.slice(0, -2) + \". \";\n  mensaje += \"Por ejemplo: 'Quiero reprogramar mi cita 12345 con orden de compra ARGM47896 para el 20 de mayo a las 10:00 AM'.\";\n  \n  return mensaje;\n}\n\n// Validar reglas temporales (mismo día, día siguiente, etc.)\nfunction validarReglasTemporales(nuevaFecha, fechaActual, horaActual) {\n  try {\n    console.log(`Validando fechas - Nueva: ${nuevaFecha}, Actual: ${fechaActual}, Hora: ${horaActual}`);\n    \n    // Convertir fechas a objetos Date para comparación\n    const fechaNueva = parsearFecha(nuevaFecha);\n    const fechaHoy = parsearFechaActual(fechaActual);\n    \n    console.log(`Fechas parseadas - Nueva: ${fechaNueva.toISOString()}, Hoy: ${fechaHoy.toISOString()}`);\n    \n    // Calcular fecha de mañana\n    const fechaManana = new Date(fechaHoy);\n    fechaManana.setDate(fechaManana.getDate() + 1);\n    console.log(`Fecha mañana: ${fechaManana.toISOString()}`);\n    \n    // 1. Validar si es el mismo día\n    if (\n      fechaNueva.getFullYear() === fechaHoy.getFullYear() &&\n      fechaNueva.getMonth() === fechaHoy.getMonth() &&\n      fechaNueva.getDate() === fechaHoy.getDate()\n    ) {\n      console.log(\"Es el mismo día - RECHAZADO\");\n      return {\n        esValido: false,\n        motivoRechazo: \"mismo_dia\",\n        mensaje: \"Lo siento, pero no es posible reprogramar citas para el mismo día. Por políticas internas, las modificaciones deben hacerse con al menos un día de anticipación. Por favor, selecciona una fecha futura a partir de mañana.\"\n      };\n    }\n    \n    // 2. Validar si es el día siguiente y es después de las 4:30 PM\n    const esMañana = \n      fechaNueva.getFullYear() === fechaManana.getFullYear() &&\n      fechaNueva.getMonth() === fechaManana.getMonth() &&\n      fechaNueva.getDate() === fechaManana.getDate();\n    \n    const esTarde = esHoraPosteriorA430PM(horaActual);\n    \n    console.log(`Es mañana: ${esMañana}, Es tarde (post 4:30pm): ${esTarde}`);\n    \n    if (esMañana && esTarde) {\n      console.log(\"Es para mañana después de las 4:30 PM - RECHAZADO\");\n      return {\n        esValido: false,\n        motivoRechazo: \"tarde_para_manana\",\n        mensaje: `Lo siento, pero no es posible reprogramar citas para mañana después de las 4:30 PM del día actual. Por favor, selecciona una fecha a partir del ${formatearFecha(new Date(fechaManana.getTime() + 86400000))}. Las modificaciones para el día siguiente solo pueden realizarse antes de las 4:30 PM.`\n      };\n    }\n    \n    // Si pasa todas las validaciones\n    console.log(\"Validación temporal APROBADA\");\n    return {\n      esValido: true\n    };\n  } catch (error) {\n    console.error(\"Error al validar reglas temporales:\", error);\n    return {\n      esValido: true // En caso de error, permitimos continuar para no bloquear al usuario\n    };\n  }\n}\n\n// Funciones auxiliares para manipulación de fechas\n\n// Parsea una fecha en formato \"DD de mes de YYYY\"\nfunction parsearFecha(fechaStr) {\n  try {\n    console.log(`Parseando fecha: \"${fechaStr}\"`);\n    const partes = fechaStr.split(\" de \");\n    \n    if (partes.length < 3) {\n      console.error(`Formato de fecha incorrecto: \"${fechaStr}\"`);\n      return new Date(); // Devolver fecha actual en caso de error de formato\n    }\n    \n    const dia = parseInt(partes[0], 10);\n    \n    const meses = {\n      \"enero\": 0, \"febrero\": 1, \"marzo\": 2, \"abril\": 3, \"mayo\": 4, \"junio\": 5,\n      \"julio\": 6, \"agosto\": 7, \"septiembre\": 8, \"octubre\": 9, \"noviembre\": 10, \"diciembre\": 11\n    };\n    \n    const mes = meses[partes[1].toLowerCase()];\n    const anio = parseInt(partes[2], 10);\n    \n    console.log(`Día: ${dia}, Mes: ${mes}, Año: ${anio}`);\n    \n    if (isNaN(dia) || mes === undefined || isNaN(anio)) {\n      console.error(`Valores de fecha inválidos: día=${dia}, mes=${mes}, año=${anio}`);\n      return new Date();\n    }\n    \n    return new Date(anio, mes, dia);\n  } catch (error) {\n    console.error(\"Error al parsear fecha:\", error);\n    return new Date(); // Devuelve fecha actual en caso de error\n  }\n}\n\n// Parsea la fecha actual en formato YYYY-MM-DD\nfunction parsearFechaActual(fechaStr) {\n  try {\n    console.log(`Parseando fecha actual: \"${fechaStr}\"`);\n    \n    if (!fechaStr || typeof fechaStr !== 'string') {\n      console.error(`Formato de fecha actual inválido: \"${fechaStr}\"`);\n      return new Date();\n    }\n    \n    const [anio, mes, dia] = fechaStr.split(\"-\").map(num => parseInt(num, 10));\n    \n    if (isNaN(anio) || isNaN(mes) || isNaN(dia)) {\n      console.error(`Valores de fecha actual inválidos: año=${anio}, mes=${mes}, día=${dia}`);\n      return new Date();\n    }\n    \n    return new Date(anio, mes - 1, dia); // Restar 1 al mes porque en JS los meses van de 0-11\n  } catch (error) {\n    console.error(\"Error al parsear fecha actual:\", error);\n    return new Date(); // Devuelve fecha actual en caso de error\n  }\n}\n\n// Verifica si la hora es posterior a las 4:30 PM\nfunction esHoraPosteriorA430PM(horaStr) {\n  try {\n    console.log(`Verificando si hora es posterior a 4:30 PM: \"${horaStr}\"`);\n    \n    if (!horaStr || typeof horaStr !== 'string') {\n      console.error(`Formato de hora inválido: \"${horaStr}\"`);\n      return false;\n    }\n    \n    // Convierte la hora a minutos para facilitar la comparación\n    let horas = 0;\n    let minutos = 0;\n    \n    // Manejar varios formatos posibles de hora\n    if (horaStr.includes(\":\")) {\n      // Formato HH:MM (am/pm)\n      const [hora, resto] = horaStr.split(\":\");\n      horas = parseInt(hora, 10);\n      \n      // Extraer minutos y posible AM/PM\n      if (resto.toLowerCase().includes(\"p.m.\") || resto.toLowerCase().includes(\"pm\")) {\n        if (horas !== 12) horas += 12; // Convertir a formato 24h\n        minutos = parseInt(resto.replace(/[^\\d]/g, \"\"), 10);\n      } else {\n        if (horas === 12) horas = 0; // Mediodía en formato 12h es 0 en formato 24h\n        minutos = parseInt(resto.replace(/[^\\d]/g, \"\"), 10);\n      }\n    } else {\n      // Intentar otros formatos\n      const match = horaStr.match(/(\\d+)(?:\\D+)(\\d*)\\s*([ap]\\.?m\\.?)?/i);\n      if (match) {\n        horas = parseInt(match[1], 10);\n        minutos = match[2] ? parseInt(match[2], 10) : 0;\n        \n        const periodo = match[3] ? match[3].toLowerCase() : \"\";\n        if (periodo.includes(\"p\")) {\n          if (horas !== 12) horas += 12;\n        } else if (periodo.includes(\"a\") && horas === 12) {\n          horas = 0;\n        }\n      }\n    }\n    \n    // Convertir todo a minutos\n    const totalMinutos = horas * 60 + minutos;\n    console.log(`Hora convertida a minutos: ${totalMinutos} (${horas}:${minutos})`);\n    \n    // 4:30 PM = 16:30 = 990 minutos\n    return totalMinutos > 990;\n    \n  } catch (error) {\n    console.error(\"Error al evaluar la hora:\", error);\n    return false; // En caso de error, asumimos que no es después de las 4:30 PM\n  }\n}\n\n// Formatea una fecha como \"DD de mes de YYYY\"\nfunction formatearFecha(fecha) {\n  try {\n    const dia = fecha.getDate();\n    \n    const meses = [\n      \"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\",\n      \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"\n    ];\n    \n    const mes = meses[fecha.getMonth()];\n    const anio = fecha.getFullYear();\n    \n    return `${dia} de ${mes} de ${anio}`;\n  } catch (error) {\n    console.error(\"Error al formatear fecha:\", error);\n    return \"\"; // Devuelve string vacío en caso de error\n  }\n}\n\n// Aplicar la función principal a los datos extraídos\nconst resultado = procesarDatosReprogramacion(datosExtraidos);\nconsole.log(\"Resultado final:\", JSON.stringify(resultado, null, 2));\n\n// Devolver el resultado procesado\nreturn resultado;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -43504,
        -6704
      ],
      "id": "62d72718-c634-4198-b9b2-5839ac9921c9",
      "name": "Code Validación de datos para reprogramación de citas"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -14480,
        -3968
      ],
      "id": "5f451f0d-b719-4336-bf8b-a6108b4dc6cc",
      "name": "Merge3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "BEGIN TRANSACTION;\n\nDELETE FROM MensajesWhatsApp\nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n   OR (chat_id = 'agenteAI'\n       AND message_id IN (\n           SELECT message_id \n           FROM MensajesWhatsApp\n           WHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n       )\n   );\n\nDELETE FROM FranjasDisponiblesTemp \nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}';\n\n\nCOMMIT;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -14272,
        -3968
      ],
      "id": "ce846f4a-69b5-4990-bbfd-bdb3fa69a73b",
      "name": "Microsoft SQL Eliminar Mensajes3",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -14048,
        -3968
      ],
      "id": "bab6b9e3-13f1-4379-9489-877ea1aeca89",
      "name": "No Operation, do nothing12"
    },
    {
      "parameters": {
        "url": "https://graph.microsoft.com/v1.0/sites/a592f886-4560-4e62-9646-1eee7add7abe/drives/b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8/items/01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME/content",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "ExcelMallaRecibido2025"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -42288,
        -6944
      ],
      "id": "7740925c-cad1-443a-ac95-1d13d9ff54e3",
      "name": "HTTP Request MALLA DE RECIBO 2",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "ExcelMallaRecibido2025",
        "options": {
          "sheetName": "={{ $('Unificación y consistencia de datos').item.json.hojaSeleccionada }}"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -42032,
        -7072
      ],
      "id": "b3e7073e-5552-4f40-bc68-8e5566066072",
      "name": "Extract MALLA DE RECIBO 2"
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del Excel\nconst excelData = $input.all();\nconst hojaSeleccionada = $('Unificación y consistencia de datos').first().json.hojaSeleccionada;\n\n// Obtener hora local en Bogotá\nconst ahora = new Date(new Date().toLocaleString(\"en-US\", { timeZone: \"America/Bogota\" }));\nconst diaSemanaActual = ahora.getDay(); // 0=domingo, 1=lunes, ..., 5=viernes\nconst horaActual = ahora.getHours();\nconst minutosActual = ahora.getMinutes();\n// Determinar si es después de las 16:30\nconst pasoLimiteDia = horaActual > 16 || (horaActual === 16 && minutosActual >= 30);\n\n// Definir estructura de la semana y los días\nconst diasSemana = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes'];\n\n// Mapeo para saber qué días incluir si hoy es x día y pasó el límite\n/**\n * Dado el día de la semana actual (0=domingo ... 6=sábado),\n * devuelve qué días de la semana actual deben incluirse según si pasó el límite.\n */\nfunction diasValidosSemanaActual(diaSemanaActual, pasoLimite) {\n  const mapa = {\n    1: ['martes', 'miércoles', 'jueves', 'viernes'],   // lunes\n    2: ['miércoles', 'jueves', 'viernes'],             // martes\n    3: ['jueves', 'viernes'],                          // miércoles\n    4: ['viernes'],                                     // jueves\n    5: []                                               // viernes (muy tarde para sábado)\n  };\n  if (diaSemanaActual < 1 || diaSemanaActual > 5) {\n    return []; // sábado o domingo no se agendan en semana actual\n  }\n  if (!pasoLimite) {\n    // aún está antes de las 4:30 p.m., se puede incluir el día siguiente\n    const siguiente = diasSemana[diaSemanaActual];\n    return [siguiente, ...mapa[diaSemanaActual]];\n  }\n  return mapa[diaSemanaActual];\n}\n\n// Objeto para almacenar la malla estructurada\nconst mallaEstructurada = {\n  titulo: \"\",\n  año: \"\",\n  semana: \"\",\n  rangoDias: \"\",\n  franjas: [],\n  dias: {}\n};\n\n// Tabla de meses y días. Ajusta si necesitas contemplar bisiestos, etc.\nconst meses = {\n  \"enero\": 1,\n  \"febrero\": 2,\n  \"marzo\": 3,\n  \"abril\": 4,\n  \"mayo\": 5,\n  \"junio\": 6,\n  \"julio\": 7,\n  \"agosto\": 8,\n  \"septiembre\": 9,\n  \"octubre\": 10,\n  \"noviembre\": 11,\n  \"diciembre\": 12\n};\n\nconst nombreMes = {\n  1: \"enero\",\n  2: \"febrero\",\n  3: \"marzo\",\n  4: \"abril\",\n  5: \"mayo\",\n  6: \"junio\",\n  7: \"julio\",\n  8: \"agosto\",\n  9: \"septiembre\",\n  10: \"octubre\",\n  11: \"noviembre\",\n  12: \"diciembre\"\n};\n\n/**\n * Función para determinar si un año es bisiesto\n * Un año es bisiesto si es divisible por 4, excepto aquellos divisibles por 100 \n * que no son divisibles por 400\n */\nfunction esBisiesto(year) {\n  return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n}\n\n/**\n * Función para obtener el número de días en un mes, considerando años bisiestos\n */\nfunction getDiasMes(mes, año) {\n  const diasPorMes = {\n    1: 31, // enero\n    2: esBisiesto(año) ? 29 : 28, // febrero - ajustado para año bisiesto\n    3: 31, // marzo\n    4: 30, // abril\n    5: 31, // mayo\n    6: 30, // junio\n    7: 31, // julio\n    8: 31, // agosto\n    9: 30, // septiembre\n    10: 31, // octubre\n    11: 30, // noviembre\n    12: 31  // diciembre\n  };\n  \n  return diasPorMes[mes];\n}\n\n/**\n * Función para eliminar acentos y pasar a minúsculas (para buscar palabras clave sin importar tildes ni mayúsculas).\n */\nfunction normalizarTexto(texto) {\n  if (typeof texto !== 'string') return \"\";\n  // Normaliza (NFD) y elimina diacríticos, luego pasa a minúsculas.\n  return texto\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\") // quita acentos\n    .toLowerCase();\n}\n\n/**\n * Dada la información de proveedor, ordenCompra, peso, categoría y unidades,\n * revisa si existe la palabra 'fuera de servicio', 'cancelado' o 'reagendado'\n * en cualquiera de esos campos. De ser así, retorna ese estado especial;\n * de lo contrario, retorna 'ocupado'.\n * \n * Se ignoran mayúsculas, minúsculas y tildes.\n */\nfunction determinarEstadoOcupado(proveedor, ordenCompra, peso, categoria, unidades) {\n  const conjunto = `${proveedor} ${ordenCompra} ${peso} ${categoria} ${unidades}`;\n  const texto = normalizarTexto(conjunto);\n\n  if (texto.includes(\"fuera de servicio\")) {\n    return \"fuera de servicio\";\n  }\n  if (texto.includes(\"cancelado\")) {\n    return \"cancelado\";\n  }\n  if (texto.includes(\"reagendado\")) {\n    return \"reagendado\";\n  }\n  return \"ocupado\";  \n}\n\n// -------------------------------------------------------------\n// 1) PROCESAR DATOS (Cabecera, Horas, Muelles, etc.)\n// -------------------------------------------------------------\nfunction procesarDatos(excelData) {\n  const datos = excelData.map(item => item.json);\n  \n  // A) Cabecera (Título, Año, Rango)\n  datos.forEach((dato, index) => {\n    // Buscar título\n    if (dato.__EMPTY_2 === \"MALLA DE RECIBO CEDI KONFIE IA\") {\n      mallaEstructurada.titulo = dato.__EMPTY_2;\n      \n      // En la siguiente fila puede estar año, semana, rango\n      if (index + 1 < datos.length) {\n        const datoSiguiente = datos[index + 1];\n        if (datoSiguiente) {\n          // Año\n          if (datoSiguiente.__EMPTY_2 && !isNaN(datoSiguiente.__EMPTY_2)) {\n            mallaEstructurada.año = datoSiguiente.__EMPTY_2;\n          }\n          // Semana\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"SEMANA\")) {\n              mallaEstructurada.semana = v;\n            }\n          });\n          // Rango: p.ej. \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"LUNES\") && v.includes(\"VIERNES\")) {\n              mallaEstructurada.rangoDias = v;\n            }\n          });\n        }\n      }\n    }\n  });\n  \n  // B) Detectar franjas horarias (.__EMPTY = fracción de día)\n  const franjasHorarias = [];\n  datos.forEach(dato => {\n    if (\n      dato.__EMPTY !== undefined &&\n      typeof dato.__EMPTY === 'number' &&\n      dato.__EMPTY > 0 &&\n      dato.__EMPTY < 1\n    ) {\n      const totalMin = Math.round(dato.__EMPTY * 24 * 60);\n      const hh = Math.floor(totalMin / 60);\n      const mm = totalMin % 60;\n      \n      let periodo = \"AM\";\n      let hora12 = hh;\n      if (hh >= 12) {\n        periodo = \"PM\";\n        hora12 = (hh === 12 ? 12 : hh - 12);\n      }\n      if (hh === 0) {\n        hora12 = 12;\n      }\n      \n      const horaStr = `${hora12}:${String(mm).padStart(2, '0')} ${periodo}`;\n      franjasHorarias.push({\n        hora: horaStr,\n        indice: datos.indexOf(dato) // fila base\n      });\n    }\n  });\n  franjasHorarias.sort((a, b) => a.indice - b.indice);\n  mallaEstructurada.franjas = franjasHorarias;\n  \n  // C) Detectar muelles (col)\n  const muellesInfo = {};\n  datos.forEach(dato => {\n    Object.entries(dato).forEach(([key, value]) => {\n      if (value === \"MUELLE 01\" || value === \"MUELLE 02\") {\n        const col = parseInt(key.replace(\"__EMPTY_\", \"\"), 10);\n        const muelleKey = (value === \"MUELLE 01\") ? 'muelle1' : 'muelle2';\n        if (!muellesInfo[muelleKey]) {\n          muellesInfo[muelleKey] = [];\n        }\n        muellesInfo[muelleKey].push(col);\n      }\n    });\n  });\n  if (muellesInfo.muelle1) muellesInfo.muelle1.sort((a, b) => a - b);\n  if (muellesInfo.muelle2) muellesInfo.muelle2.sort((a, b) => a - b);\n  \n  // D) Generar los 5 días (lunes-viernes) con su fecha\n  parsearRangoDias();\n  \n  // E) Extraer Citas\n  extraerCitas(datos, muellesInfo);\n  \n  return mallaEstructurada;\n}\n\n/**\n * Parsea la cadena \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n * (o \"LUNES 31 AL VIERNES 04 DE ABRIL\") y maneja el cruce de mes.\n * Ej.: si dayStart=31 y dayEnd=4, la 1ª fecha es 31 de MARZO,\n * luego 1,2,3,4 de ABRIL, en vez de 32,33, etc.\n */\nfunction parsearRangoDias() {\n  const texto = mallaEstructurada.rangoDias;\n  // Regex simple: p.ej. \"31 AL ... 4 DE ABRIL\"\n  // Captura: dayStart, dayEnd, mesFin\n  // Ojo: si dice \"LUNES 31 DE MARZO AL VIERNES 4 DE ABRIL\",\n  // quedará: dayStart=31, dayEnd=4, month=ABRIL (al final).\n  const regex = /(\\d+)\\s+AL\\s+\\D+(\\d+)\\s+DE\\s+(\\w+)/i;\n  const match = regex.exec(texto);\n  \n  // Por defecto, creamos 5 días vacíos sin fecha\n  diasSemana.forEach(d => {\n    mallaEstructurada.dias[d] = {\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  if (!match) {\n    // Sin coincidencia, dejamos los días sin fecha\n    return;\n  }\n  \n  const dayStart = parseInt(match[1], 10); // 31\n  const dayEnd   = parseInt(match[2], 10); // 4\n  const finalMonthName = match[3].toLowerCase(); // \"abril\"\n  \n  // Convertimos a número\n  const finalMonth = meses[finalMonthName] || 3; // fallback marzo\n  const yearNum = parseInt(mallaEstructurada.año, 10) || 2025;\n  \n  // Función para obtener la fecha formateada\n  function fechaFormateada(d, m, y) {\n    return `${d} de ${nombreMes[m]} de ${y}`;\n  }\n  \n  // Comprobamos cuántos días tiene el mes final, considerando bisiestos\n  const diasMesFinal = getDiasMes(finalMonth, yearNum);\n  // y del mes previo\n  const monthPrev = (finalMonth === 1) ? 12 : finalMonth - 1;\n  const yearPrev = (finalMonth === 1) ? yearNum - 1 : yearNum;\n  \n  // Arreglo final con 5 fechas\n  const fechasDias = [];\n  \n  if (dayStart <= dayEnd) {\n    // Caso \"normal\": todo en el mismo mes\n    let d = dayStart;\n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: finalMonth,\n        yearNum: yearNum\n      });\n      d++;\n      if (d > diasMesFinal) {\n        d = 1;\n        const nextMonth = finalMonth % 12 + 1;\n        const nextYear = (nextMonth === 1) ? yearNum + 1 : yearNum;\n        fechasDias[fechasDias.length - 1].mesNum = nextMonth;\n        fechasDias[fechasDias.length - 1].yearNum = nextYear;\n      }\n    }\n  } else {\n    // Caso \"cruza de mes\": dayStart > dayEnd\n    let d = dayStart;\n    let m = monthPrev;\n    let y = yearPrev;\n    \n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: m,\n        yearNum: y\n      });\n      d++;\n      if (d > getDiasMes(m, y)) {\n        d = 1;\n        m = m % 12 + 1;\n        if (m === 1) {\n          y++;\n        }\n      }\n    }\n  }\n  \n  // Ahora volcamos esas 5 fechas en la estructura\n  fechasDias.forEach(fd => {\n    const { diaSem, diaNum, mesNum, yearNum } = fd;\n    mallaEstructurada.dias[diaSem] = {\n      fechaDia: fechaFormateada(diaNum, mesNum, yearNum),\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  // Inicializamos las franjas a 'disponible'\n  if (mallaEstructurada.franjas.length > 0) {\n    diasSemana.forEach(d => {\n      mallaEstructurada.franjas.forEach(f => {\n        mallaEstructurada.dias[d].muelle1[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n        mallaEstructurada.dias[d].muelle2[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n      });\n    });\n  }\n}\n\n/**\n * Función auxiliar: decide a qué día pertenece una columna,\n * corrigiendo 2 columnas de offset (porque 'Extract from XLSX'\n * deja todo desplazado).\n */\nfunction getDayForColumn(colNumber) {\n  // Ajuste de offset +2\n  const realCol = colNumber + 2;\n\n  // Rangos:\n  //  Lunes:      3..8\n  //  Martes:     9..14\n  //  Miércoles: 15..20\n  //  Jueves:    21..26\n  //  Viernes:   27..32\n  if (realCol >= 3 && realCol <= 8) {\n    return \"lunes\";\n  }\n  if (realCol >= 9 && realCol <= 14) {\n    return \"martes\";\n  }\n  if (realCol >= 15 && realCol <= 20) {\n    return \"miércoles\";\n  }\n  if (realCol >= 21 && realCol <= 26) {\n    return \"jueves\";\n  }\n  if (realCol >= 27 && realCol <= 32) {\n    return \"viernes\";\n  }\n  // Si nada coincide, devolvemos null\n  return null;\n}\n\n/**\n * Extraer las citas para cada franja:\n * - Para cada franja, miramos 3 filas:\n *    - Fila base => proveedor\n *    - Fila base+1 => orden\n *    - Fila base+2 => peso, categoría, unidades\n */\nfunction extraerCitas(datos, muellesInfo) {\n  mallaEstructurada.franjas.forEach(franja => {\n    const indiceBase = franja.indice;\n    if (indiceBase < 0 || indiceBase + 2 >= datos.length) {\n      return; // no hay suficientes filas\n    }\n    \n    // Recorremos muelle1, muelle2 y sus columnas\n    const asignarCita = (muelleKey, cols) => {\n      cols.forEach(col => {\n        const provKey = `__EMPTY_${col}`;\n        const filaProv = datos[indiceBase];\n        \n        // Si en esta fila hay un proveedor o algún texto\n        if (\n          filaProv &&\n          typeof filaProv[provKey] === 'string' &&\n          filaProv[provKey].length > 2\n        ) {\n          // Determinar el día real\n          const diaOk = getDayForColumn(col);\n          if (!diaOk || !mallaEstructurada.dias[diaOk]) {\n            return; // si no coincide con ninguno, saltamos\n          }\n          \n          // Recuperar valores para proveedor, ordenCompra y demás\n          const filaOrden = datos[indiceBase + 1];\n          const filaDet = datos[indiceBase + 2];\n          \n          const proveedor = filaProv[provKey] || \"\";\n          const ordenCompra = filaOrden && filaOrden[provKey] ? filaOrden[provKey] : \"\";\n          const peso = filaDet && filaDet[provKey] ? filaDet[provKey] : \"\";\n          const cat  = filaDet && filaDet[`__EMPTY_${col + 1}`] ? filaDet[`__EMPTY_${col + 1}`] : \"\";\n          const und  = filaDet && filaDet[`__EMPTY_${col + 2}`] ? filaDet[`__EMPTY_${col + 2}`] : \"\";\n          \n          // Antes poníamos estado=\"ocupado\" directamente\n          // Ahora verificamos si el texto contiene \"reagendado\", \"cancelado\" o \"fuera de servicio\".\n          const nuevoEstado = determinarEstadoOcupado(proveedor, ordenCompra, peso, cat, und);\n          \n          // Asignamos los datos\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].estado = nuevoEstado;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].proveedor = proveedor;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].ordenCompra = ordenCompra;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].peso = peso;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].categoria = cat;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].unidades = und;\n        }\n      });\n    };\n    \n    if (muellesInfo.muelle1) {\n      asignarCita('muelle1', muellesInfo.muelle1);\n    }\n    if (muellesInfo.muelle2) {\n      asignarCita('muelle2', muellesInfo.muelle2);\n    }\n  });\n}\n\n// -------------------------------------------------------------\n// 2) FUNCIONES PARA CONSULTAR LA MALLA\n// -------------------------------------------------------------\nfunction buscarFranjasDisponibles(categoria, duracionHoras) {\n  const muelle = \"muelle1\"; // Ajusta si usas \"categoria -> muelle\" real\n  \n  const franjasDisponibles = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const libres = [];\n    for (let i = 0; i <= mallaEstructurada.franjas.length - duracionHoras; i++) {\n      let disponible = true;\n      for (let h = 0; h < duracionHoras; h++) {\n        const idxF = i + h;\n        const horaAct = mallaEstructurada.franjas[idxF].hora;\n        if (\n          mallaEstructurada.dias[dia][muelle][horaAct].estado !== 'disponible'\n        ) {\n          disponible = false;\n          break;\n        }\n      }\n      if (disponible) {\n        libres.push({\n          horaInicio: mallaEstructurada.franjas[i].hora,\n          duracion: duracionHoras\n        });\n      }\n    }\n    if (libres.length > 0) {\n      franjasDisponibles.push({ dia, franjas: libres });\n    }\n  });\n  return franjasDisponibles;\n}\n\nfunction buscarCitasProveedor(nombreProveedor) {\n  const citas = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const muelle1 = mallaEstructurada.dias[dia].muelle1;\n    const muelle2 = mallaEstructurada.dias[dia].muelle2;\n    mallaEstructurada.franjas.forEach(f => {\n      const hora = f.hora;\n      // muelle1\n      if (normalizarTexto(muelle1[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 01\",\n          ordenCompra: muelle1[hora].ordenCompra,\n          peso: muelle1[hora].peso,\n          categoria: muelle1[hora].categoria,\n          unidades: muelle1[hora].unidades,\n          estado: muelle1[hora].estado\n        });\n      }\n      // muelle2\n      if (normalizarTexto(muelle2[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 02\",\n          ordenCompra: muelle2[hora].ordenCompra,\n          peso: muelle2[hora].peso,\n          categoria: muelle2[hora].categoria,\n          unidades: muelle2[hora].unidades,\n          estado: muelle2[hora].estado\n        });\n      }\n    });\n  });\n  return citas;\n}\n\nfunction consultarFranjasDisponibles(categoria, duracionHoras) {\n  return buscarFranjasDisponibles(categoria, duracionHoras);\n}\n\nfunction consultarCitasProveedor(nombreProveedor) {\n  return buscarCitasProveedor(nombreProveedor);\n}\n\nfunction obtenerInfoMalla() {\n  return {\n    titulo: mallaEstructurada.titulo,\n    año: mallaEstructurada.año,\n    semana: mallaEstructurada.semana,\n    rangoDias: mallaEstructurada.rangoDias,\n    franjas: mallaEstructurada.franjas.map(f => f.hora)\n  };\n}\n\nfunction estaDisponible(dia, hora, muelle) {\n  const info = mallaEstructurada.dias[dia]?.[muelle]?.[hora];\n  return info ? (info.estado === 'disponible') : false;\n}\n\nfunction obtenerCoordenadasCita(dia, hora, muelle) {\n  // Ajustar con tu mapeo de celdas en Excel\n  return {\n    proveedor: `${dia}_${hora}_${muelle}_proveedor`,\n    ordenCompra: `${dia}_${hora}_${muelle}_ordenCompra`,\n    peso: `${dia}_${hora}_${muelle}_peso`,\n    categoria: `${dia}_${hora}_${muelle}_categoria`,\n    unidades: `${dia}_${hora}_${muelle}_unidades`\n  };\n}\n\n// -------------------------------------------------------------\n// 3) EJECUTAR TODO Y RETORNAR\n// -------------------------------------------------------------\n// Procesar todos los datos\nconst malla = procesarDatos(excelData);\n\n// Aplicar el filtro de días válidos según la hora actual\nconst diasPermitidos = diasValidosSemanaActual(diaSemanaActual, pasoLimiteDia);\nObject.keys(malla.dias).forEach(dia => {\n  if (!diasPermitidos.includes(dia)) {\n    delete malla.dias[dia]; // eliminar días no válidos\n  }\n});\n\nconst resultado = {\n  datosMalla: malla,\n  funciones: {\n    consultarFranjasDisponibles,\n    consultarCitasProveedor,\n    obtenerInfoMalla,\n    estaDisponible,\n    obtenerCoordenadasCita\n  }\n};\n\nreturn [resultado];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -41776,
        -7072
      ],
      "id": "c97000d6-4860-44e0-9ce5-13294822247e",
      "name": "Estructuración, Datos, Consulta, Citas3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -41456,
        -6976
      ],
      "id": "09d23864-5618-407e-99d8-7f2aed2bd485",
      "name": "Merge datos Excel3"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    datosMalla: $items(\"Merge datos Excel3\")[0].json.datosMalla,\n    datosMallaProxSemana: $items(\"Merge datos Excel3\")[1].json.datosMallaProxSemana,\n    hojaSeleccionada: $items(\"Merge datos Excel3\")[0].json.datosMalla.semana\n  }\n}];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -41200,
        -6976
      ],
      "id": "4091a803-bd30-42f8-968b-8589b04f1ab2",
      "name": "Unificación y consistencia de datos4"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "ExcelMallaRecibido2025",
        "options": {
          "sheetName": "={{    (function() {     const semanaActual = $('Unificación y consistencia de datos').item.json.hojaSeleccionada;     const numeroSemana = parseInt(semanaActual.replace(\"SEMANA \", \"\"));     return `SEMANA ${numeroSemana + 1}`;   })() }}"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -42032,
        -6864
      ],
      "id": "6152f132-fa24-41c2-b773-13f26aafc724",
      "name": "Extract MALLA DE RECIBO Semana Siguiente3",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Si el nodo anterior no devolvió datos (por error al no existir la hoja), retornamos estructura vacía con mensaje\n// Obtener los datos del Excel\nconst excelData = $input.all();\n\n// Mejora en la detección de errores: verificar si hay error explícito o si los datos no son válidos\nconst hayError = excelData.some(item => item.json && item.json.error);\nconst datosInvalidos = !excelData || excelData.length === 0 || hayError;\n\nif (datosInvalidos) {\n  return [{\n    datosMallaProxSemana: {\n      titulo: \"⚠️ La malla de la próxima semana no existe en el archivo Excel o aún no ha sido creada.\",\n      año: \"\",\n      semana: \"\",\n      rangoDias: \"\",\n      franjas: [],\n      dias: {\n        lunes: { muelle1: {}, muelle2: {} },\n        martes: { muelle1: {}, muelle2: {} },\n        miércoles: { muelle1: {}, muelle2: {} },\n        jueves: { muelle1: {}, muelle2: {} },\n        viernes: { muelle1: {}, muelle2: {} }\n      }\n    },\n    funciones: {\n      consultarFranjasDisponibles: \"function not available\",\n      consultarCitasProveedor: \"function not available\",\n      obtenerInfoMalla: \"function not available\",\n      estaDisponible: \"function not available\",\n      obtenerCoordenadasCita: \"function not available\"\n    }\n  }];\n}\n\n// El resto del código permanece igual...\nconst hojaSeleccionada = $('Unificación y consistencia de datos').first().json.hojaSeleccionada;\n\n// Definir estructura de la semana y los días\nconst diasSemana = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes'];\n\n// Objeto para almacenar la malla estructurada\nconst mallaEstructurada = {\n  titulo: \"\",\n  año: \"\",\n  semana: \"\",\n  rangoDias: \"\",\n  franjas: [],\n  dias: {}\n};\n\n// Tabla de meses y días. Ajusta si necesitas contemplar bisiestos, etc.\nconst meses = {\n  \"enero\": 1,\n  \"febrero\": 2,\n  \"marzo\": 3,\n  \"abril\": 4,\n  \"mayo\": 5,\n  \"junio\": 6,\n  \"julio\": 7,\n  \"agosto\": 8,\n  \"septiembre\": 9,\n  \"octubre\": 10,\n  \"noviembre\": 11,\n  \"diciembre\": 12\n};\n\nconst nombreMes = {\n  1: \"enero\",\n  2: \"febrero\",\n  3: \"marzo\",\n  4: \"abril\",\n  5: \"mayo\",\n  6: \"junio\",\n  7: \"julio\",\n  8: \"agosto\",\n  9: \"septiembre\",\n  10: \"octubre\",\n  11: \"noviembre\",\n  12: \"diciembre\"\n};\n\n/**\n * Función para determinar si un año es bisiesto\n * Un año es bisiesto si es divisible por 4, excepto aquellos divisibles por 100 \n * que no son divisibles por 400\n */\nfunction esBisiesto(year) {\n  return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n}\n\n/**\n * Función para obtener el número de días en un mes, considerando años bisiestos\n */\nfunction getDiasMes(mes, año) {\n  const diasPorMes = {\n    1: 31, // enero\n    2: esBisiesto(año) ? 29 : 28, // febrero - ajustado para año bisiesto\n    3: 31, // marzo\n    4: 30, // abril\n    5: 31, // mayo\n    6: 30, // junio\n    7: 31, // julio\n    8: 31, // agosto\n    9: 30, // septiembre\n    10: 31, // octubre\n    11: 30, // noviembre\n    12: 31  // diciembre\n  };\n  \n  return diasPorMes[mes];\n}\n\n/**\n * Función para eliminar acentos y pasar a minúsculas (para buscar palabras clave sin importar tildes ni mayúsculas).\n */\nfunction normalizarTexto(texto) {\n  if (typeof texto !== 'string') return \"\";\n  // Normaliza (NFD) y elimina diacríticos, luego pasa a minúsculas.\n  return texto\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\") // quita acentos\n    .toLowerCase();\n}\n\n/**\n * Dada la información de proveedor, ordenCompra, peso, categoría y unidades,\n * revisa si existe la palabra 'fuera de servicio', 'cancelado' o 'reagendado'\n * en cualquiera de esos campos. De ser así, retorna ese estado especial;\n * de lo contrario, retorna 'ocupado'.\n * \n * Se ignoran mayúsculas, minúsculas y tildes.\n */\nfunction determinarEstadoOcupado(proveedor, ordenCompra, peso, categoria, unidades) {\n  const conjunto = `${proveedor} ${ordenCompra} ${peso} ${categoria} ${unidades}`;\n  const texto = normalizarTexto(conjunto);\n\n  if (texto.includes(\"fuera de servicio\")) {\n    return \"fuera de servicio\";\n  }\n  if (texto.includes(\"cancelado\")) {\n    return \"cancelado\";\n  }\n  if (texto.includes(\"reagendado\")) {\n    return \"reagendado\";\n  }\n  return \"ocupado\";  \n}\n\n// -------------------------------------------------------------\n// 1) PROCESAR DATOS (Cabecera, Horas, Muelles, etc.)\n// -------------------------------------------------------------\nfunction procesarDatos(excelData) {\n  // Verificación adicional de datos válidos\n  if (!excelData || !Array.isArray(excelData) || excelData.length === 0) {\n    return {\n      titulo: \"⚠️ La malla de la próxima semana no existe en el archivo Excel o aún no ha sido creada.\",\n      año: \"\",\n      semana: \"\",\n      rangoDias: \"\",\n      franjas: [],\n      dias: {\n        lunes: { muelle1: {}, muelle2: {} },\n        martes: { muelle1: {}, muelle2: {} },\n        miércoles: { muelle1: {}, muelle2: {} },\n        jueves: { muelle1: {}, muelle2: {} },\n        viernes: { muelle1: {}, muelle2: {} }\n      }\n    };\n  }\n  \n  // Intentar mapear datos, con manejo de errores para cada item\n  const datos = excelData.map(item => {\n    try {\n      return item.json || {};\n    } catch (e) {\n      return {};\n    }\n  });\n  \n  // A) Cabecera (Título, Año, Rango)\n  datos.forEach((dato, index) => {\n    // Buscar título\n    if (dato.__EMPTY_2 === \"MALLA DE RECIBO CEDI KONFIE IA\") {\n      mallaEstructurada.titulo = dato.__EMPTY_2;\n      \n      // En la siguiente fila puede estar año, semana, rango\n      if (index + 1 < datos.length) {\n        const datoSiguiente = datos[index + 1];\n        if (datoSiguiente) {\n          // Año\n          if (datoSiguiente.__EMPTY_2 && !isNaN(datoSiguiente.__EMPTY_2)) {\n            mallaEstructurada.año = datoSiguiente.__EMPTY_2;\n          }\n          // Semana\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"SEMANA\")) {\n              mallaEstructurada.semana = v;\n            }\n          });\n          // Rango: p.ej. \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"LUNES\") && v.includes(\"VIERNES\")) {\n              mallaEstructurada.rangoDias = v;\n            }\n          });\n        }\n      }\n    }\n  });\n  \n  // Si después de procesar no encontramos título, es que no hay malla válida\n  if (!mallaEstructurada.titulo) {\n    mallaEstructurada.titulo = \"⚠️ La malla de la próxima semana no existe en el archivo Excel o aún no ha sido creada.\";\n    return mallaEstructurada;\n  }\n  \n  // B) Detectar franjas horarias (.__EMPTY = fracción de día)\n  const franjasHorarias = [];\n  datos.forEach(dato => {\n    if (\n      dato.__EMPTY !== undefined &&\n      typeof dato.__EMPTY === 'number' &&\n      dato.__EMPTY > 0 &&\n      dato.__EMPTY < 1\n    ) {\n      const totalMin = Math.round(dato.__EMPTY * 24 * 60);\n      const hh = Math.floor(totalMin / 60);\n      const mm = totalMin % 60;\n      \n      let periodo = \"AM\";\n      let hora12 = hh;\n      if (hh >= 12) {\n        periodo = \"PM\";\n        hora12 = (hh === 12 ? 12 : hh - 12);\n      }\n      if (hh === 0) {\n        hora12 = 12;\n      }\n      \n      const horaStr = `${hora12}:${String(mm).padStart(2, '0')} ${periodo}`;\n      franjasHorarias.push({\n        hora: horaStr,\n        indice: datos.indexOf(dato) // fila base\n      });\n    }\n  });\n  franjasHorarias.sort((a, b) => a.indice - b.indice);\n  mallaEstructurada.franjas = franjasHorarias;\n  \n  // C) Detectar muelles (col)\n  const muellesInfo = {};\n  datos.forEach(dato => {\n    Object.entries(dato).forEach(([key, value]) => {\n      if (value === \"MUELLE 01\" || value === \"MUELLE 02\") {\n        const col = parseInt(key.replace(\"__EMPTY_\", \"\"), 10);\n        const muelleKey = (value === \"MUELLE 01\") ? 'muelle1' : 'muelle2';\n        if (!muellesInfo[muelleKey]) {\n          muellesInfo[muelleKey] = [];\n        }\n        muellesInfo[muelleKey].push(col);\n      }\n    });\n  });\n  if (muellesInfo.muelle1) muellesInfo.muelle1.sort((a, b) => a - b);\n  if (muellesInfo.muelle2) muellesInfo.muelle2.sort((a, b) => a - b);\n  \n  // D) Generar los 5 días (lunes-viernes) con su fecha\n  parsearRangoDias();\n  \n  // E) Extraer Citas\n  extraerCitas(datos, muellesInfo);\n  \n  return mallaEstructurada;\n}\n\n/**\n * Parsea la cadena \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n * (o \"LUNES 31 AL VIERNES 04 DE ABRIL\") y maneja el cruce de mes.\n * Ej.: si dayStart=31 y dayEnd=4, la 1ª fecha es 31 de MARZO,\n * luego 1,2,3,4 de ABRIL, en vez de 32,33, etc.\n */\nfunction parsearRangoDias() {\n  const texto = mallaEstructurada.rangoDias;\n  // Regex simple: p.ej. \"31 AL ... 4 DE ABRIL\"\n  // Captura: dayStart, dayEnd, mesFin\n  // Ojo: si dice \"LUNES 31 DE MARZO AL VIERNES 4 DE ABRIL\",\n  // quedará: dayStart=31, dayEnd=4, month=ABRIL (al final).\n  const regex = /(\\d+)\\s+AL\\s+\\D+(\\d+)\\s+DE\\s+(\\w+)/i;\n  const match = regex.exec(texto);\n  \n  // Por defecto, creamos 5 días vacíos sin fecha\n  diasSemana.forEach(d => {\n    mallaEstructurada.dias[d] = {\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  if (!match) {\n    // Sin coincidencia, dejamos los días sin fecha\n    return;\n  }\n  \n  const dayStart = parseInt(match[1], 10); // 31\n  const dayEnd   = parseInt(match[2], 10); // 4\n  const finalMonthName = match[3].toLowerCase(); // \"abril\"\n  \n  // Convertimos a número\n  const finalMonth = meses[finalMonthName] || 3; // fallback marzo\n  const yearNum = parseInt(mallaEstructurada.año, 10) || 2025;\n  \n  // Función para obtener la fecha formateada\n  function fechaFormateada(d, m, y) {\n    return `${d} de ${nombreMes[m]} de ${y}`;\n  }\n  \n  // Comprobamos cuántos días tiene el mes final, considerando bisiestos\n  const diasMesFinal = getDiasMes(finalMonth, yearNum);\n  // y del mes previo\n  const monthPrev = (finalMonth === 1) ? 12 : finalMonth - 1;\n  const yearPrev = (finalMonth === 1) ? yearNum - 1 : yearNum;\n  \n  // Arreglo final con 5 fechas\n  const fechasDias = [];\n  \n  if (dayStart <= dayEnd) {\n    // Caso \"normal\": todo en el mismo mes\n    let d = dayStart;\n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: finalMonth,\n        yearNum: yearNum\n      });\n      d++;\n      if (d > diasMesFinal) {\n        d = 1;\n        const nextMonth = finalMonth % 12 + 1;\n        const nextYear = (nextMonth === 1) ? yearNum + 1 : yearNum;\n        fechasDias[fechasDias.length - 1].mesNum = nextMonth;\n        fechasDias[fechasDias.length - 1].yearNum = nextYear;\n      }\n    }\n  } else {\n    // Caso \"cruza de mes\": dayStart > dayEnd\n    let d = dayStart;\n    let m = monthPrev;\n    let y = yearPrev;\n    \n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: m,\n        yearNum: y\n      });\n      d++;\n      if (d > getDiasMes(m, y)) {\n        d = 1;\n        m = m % 12 + 1;\n        if (m === 1) {\n          y++;\n        }\n      }\n    }\n  }\n  \n  // Ahora volcamos esas 5 fechas en la estructura\n  fechasDias.forEach(fd => {\n    const { diaSem, diaNum, mesNum, yearNum } = fd;\n    mallaEstructurada.dias[diaSem] = {\n      fechaDia: fechaFormateada(diaNum, mesNum, yearNum),\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  // Inicializamos las franjas a 'disponible'\n  if (mallaEstructurada.franjas.length > 0) {\n    diasSemana.forEach(d => {\n      mallaEstructurada.franjas.forEach(f => {\n        mallaEstructurada.dias[d].muelle1[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n        mallaEstructurada.dias[d].muelle2[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n      });\n    });\n  }\n}\n\n/**\n * Función auxiliar: decide a qué día pertenece una columna,\n * corrigiendo 2 columnas de offset (porque 'Extract from XLSX'\n * deja todo desplazado).\n */\nfunction getDayForColumn(colNumber) {\n  // Ajuste de offset +2\n  const realCol = colNumber + 2;\n\n  // Rangos:\n  //  Lunes:      3..8\n  //  Martes:     9..14\n  //  Miércoles: 15..20\n  //  Jueves:    21..26\n  //  Viernes:   27..32\n  if (realCol >= 3 && realCol <= 8) {\n    return \"lunes\";\n  }\n  if (realCol >= 9 && realCol <= 14) {\n    return \"martes\";\n  }\n  if (realCol >= 15 && realCol <= 20) {\n    return \"miércoles\";\n  }\n  if (realCol >= 21 && realCol <= 26) {\n    return \"jueves\";\n  }\n  if (realCol >= 27 && realCol <= 32) {\n    return \"viernes\";\n  }\n  // Si nada coincide, devolvemos null\n  return null;\n}\n\n/**\n * Extraer las citas para cada franja:\n * - Para cada franja, miramos 3 filas:\n *    - Fila base => proveedor\n *    - Fila base+1 => orden\n *    - Fila base+2 => peso, categoría, unidades\n */\nfunction extraerCitas(datos, muellesInfo) {\n  mallaEstructurada.franjas.forEach(franja => {\n    const indiceBase = franja.indice;\n    if (indiceBase < 0 || indiceBase + 2 >= datos.length) {\n      return; // no hay suficientes filas\n    }\n    \n    // Recorremos muelle1, muelle2 y sus columnas\n    const asignarCita = (muelleKey, cols) => {\n      cols.forEach(col => {\n        const provKey = `__EMPTY_${col}`;\n        const filaProv = datos[indiceBase];\n        \n        // Si en esta fila hay un proveedor o algún texto\n        if (\n          filaProv &&\n          typeof filaProv[provKey] === 'string' &&\n          filaProv[provKey].length > 2\n        ) {\n          // Determinar el día real\n          const diaOk = getDayForColumn(col);\n          if (!diaOk || !mallaEstructurada.dias[diaOk]) {\n            return; // si no coincide con ninguno, saltamos\n          }\n          \n          // Recuperar valores para proveedor, ordenCompra y demás\n          const filaOrden = datos[indiceBase + 1];\n          const filaDet = datos[indiceBase + 2];\n          \n          const proveedor = filaProv[provKey] || \"\";\n          const ordenCompra = filaOrden && filaOrden[provKey] ? filaOrden[provKey] : \"\";\n          const peso = filaDet && filaDet[provKey] ? filaDet[provKey] : \"\";\n          const cat  = filaDet && filaDet[`__EMPTY_${col + 1}`] ? filaDet[`__EMPTY_${col + 1}`] : \"\";\n          const und  = filaDet && filaDet[`__EMPTY_${col + 2}`] ? filaDet[`__EMPTY_${col + 2}`] : \"\";\n          \n          // Antes poníamos estado=\"ocupado\" directamente\n          // Ahora verificamos si el texto contiene \"reagendado\", \"cancelado\" o \"fuera de servicio\".\n          const nuevoEstado = determinarEstadoOcupado(proveedor, ordenCompra, peso, cat, und);\n          \n          // Asignamos los datos\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].estado = nuevoEstado;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].proveedor = proveedor;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].ordenCompra = ordenCompra;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].peso = peso;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].categoria = cat;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].unidades = und;\n        }\n      });\n    };\n    \n    if (muellesInfo.muelle1) {\n      asignarCita('muelle1', muellesInfo.muelle1);\n    }\n    if (muellesInfo.muelle2) {\n      asignarCita('muelle2', muellesInfo.muelle2);\n    }\n  });\n}\n\n// -------------------------------------------------------------\n// 2) FUNCIONES PARA CONSULTAR LA MALLA\n// -------------------------------------------------------------\nfunction buscarFranjasDisponibles(categoria, duracionHoras) {\n  const muelle = \"muelle1\"; // Ajusta si usas \"categoria -> muelle\" real\n  \n  const franjasDisponibles = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const libres = [];\n    for (let i = 0; i <= mallaEstructurada.franjas.length - duracionHoras; i++) {\n      let disponible = true;\n      for (let h = 0; h < duracionHoras; h++) {\n        const idxF = i + h;\n        const horaAct = mallaEstructurada.franjas[idxF].hora;\n        if (\n          mallaEstructurada.dias[dia][muelle][horaAct].estado !== 'disponible'\n        ) {\n          disponible = false;\n          break;\n        }\n      }\n      if (disponible) {\n        libres.push({\n          horaInicio: mallaEstructurada.franjas[i].hora,\n          duracion: duracionHoras\n        });\n      }\n    }\n    if (libres.length > 0) {\n      franjasDisponibles.push({ dia, franjas: libres });\n    }\n  });\n  return franjasDisponibles;\n}\n\nfunction buscarCitasProveedor(nombreProveedor) {\n  const citas = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const muelle1 = mallaEstructurada.dias[dia].muelle1;\n    const muelle2 = mallaEstructurada.dias[dia].muelle2;\n    mallaEstructurada.franjas.forEach(f => {\n      const hora = f.hora;\n      // muelle1\n      if (normalizarTexto(muelle1[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 01\",\n          ordenCompra: muelle1[hora].ordenCompra,\n          peso: muelle1[hora].peso,\n          categoria: muelle1[hora].categoria,\n          unidades: muelle1[hora].unidades,\n          estado: muelle1[hora].estado\n        });\n      }\n      // muelle2\n      if (normalizarTexto(muelle2[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 02\",\n          ordenCompra: muelle2[hora].ordenCompra,\n          peso: muelle2[hora].peso,\n          categoria: muelle2[hora].categoria,\n          unidades: muelle2[hora].unidades,\n          estado: muelle2[hora].estado\n        });\n      }\n    });\n  });\n  return citas;\n}\n\nfunction consultarFranjasDisponibles(categoria, duracionHoras) {\n  return buscarFranjasDisponibles(categoria, duracionHoras);\n}\n\nfunction consultarCitasProveedor(nombreProveedor) {\n  return buscarCitasProveedor(nombreProveedor);\n}\n\nfunction obtenerInfoMalla() {\n  return {\n    titulo: mallaEstructurada.titulo,\n    año: mallaEstructurada.año,\n    semana: mallaEstructurada.semana,\n    rangoDias: mallaEstructurada.rangoDias,\n    franjas: mallaEstructurada.franjas.map(f => f.hora)\n  };\n}\n\nfunction estaDisponible(dia, hora, muelle) {\n  const info = mallaEstructurada.dias[dia]?.[muelle]?.[hora];\n  return info ? (info.estado === 'disponible') : false;\n}\n\nfunction obtenerCoordenadasCita(dia, hora, muelle) {\n  // Ajustar con tu mapeo de celdas en Excel\n  return {\n    proveedor: `${dia}_${hora}_${muelle}_proveedor`,\n    ordenCompra: `${dia}_${hora}_${muelle}_ordenCompra`,\n    peso: `${dia}_${hora}_${muelle}_peso`,\n    categoria: `${dia}_${hora}_${muelle}_categoria`,\n    unidades: `${dia}_${hora}_${muelle}_unidades`\n  };\n}\n\n// -------------------------------------------------------------\n// 3) EJECUTAR TODO Y RETORNAR\n// -------------------------------------------------------------\nconst malla = procesarDatos(excelData);\n\nconst resultado = {\n  datosMallaProxSemana: malla,\n  funciones: {\n    consultarFranjasDisponibles,\n    consultarCitasProveedor,\n    obtenerInfoMalla,\n    estaDisponible,\n    obtenerCoordenadasCita\n  }\n};\n\nreturn [resultado];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -41776,
        -6864
      ],
      "id": "b39b898e-cf96-4cb3-a6b4-b7eb71c87bbf",
      "name": "Estructuración, Datos, Consulta, Citas Proxima Semana3"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Validación de reprogramación de citas - SOLUCIÓN CORREGIDA\n * \n * Correcciones aplicadas:\n * 1. Referencias dinámicas en lugar de hardcodeadas (SEMANA 20/21)\n * 2. Permite reprogramación cuando es la misma cita\n * 3. Normalización flexible de fechas (06 ↔ 6)\n * 4. Normalización flexible de horas (09:00 AM ↔ 9:00 AM)\n */\n\n// Función principal\ntry {\n    // 1. Obtener datos necesarios\n    const datosReprogramacion = $node[\"Code Validación de datos para reprogramación de citas\"].json;\n    const citaOriginal = $node[\"Microsoft SQL Obtener Cita\"].json;\n    const mallas = $node[\"Unificación y consistencia de datos4\"].json;\n    \n    // Extraer los datos importantes\n    const idCita = datosReprogramacion.idCita;\n    const ordenCompra = datosReprogramacion.ordenCompra;\n    const nuevaFecha = datosReprogramacion.nuevaFecha; // \"06 de junio de 2025\"\n    const nuevaHoraConFormato = datosReprogramacion.nuevaHora; // \"10:00 AM\"\n    \n    // Normalizar el formato de hora para que coincida con las mallas\n    const nuevaHora = normalizarHora(nuevaHoraConFormato);\n    \n    console.log(`Hora original: \"${nuevaHoraConFormato}\", hora normalizada: \"${nuevaHora}\"`);\n    \n    // Extraer datos de la cita original\n    const idCitaDB = citaOriginal.id;\n    const ordenCompraDB = citaOriginal.orden_compra;\n    const horasEntrega = parseInt(citaOriginal.horas_entrega);\n    const muelleOriginal = citaOriginal.muelle;\n    const horaInicioOriginal = citaOriginal.hora_inicio;\n    const horaFinOriginal = citaOriginal.hora_fin;\n    const proveedorOriginal = citaOriginal.nombre; // Para verificar si es la misma cita\n    \n    // Normalizar número de muelle\n    let numeroMuelle = 1;\n    if (muelleOriginal && muelleOriginal.toLowerCase().includes(\"muelle\")) {\n        const match = muelleOriginal.match(/\\d+/);\n        if (match) numeroMuelle = parseInt(match[0]);\n    }\n    \n    // 2. Validar coincidencia de ID y orden de compra\n    if (idCita != idCitaDB || ordenCompra !== ordenCompraDB) {\n        return [{\n            json: {\n                franjaDisponible: false,\n                mensaje: `La información de la cita no coincide. ID Cita proporcionado: ${idCita}, ID en sistema: ${idCitaDB}. Orden de compra proporcionada: ${ordenCompra}, Orden en sistema: ${ordenCompraDB}.`\n            }\n        }];\n    }\n    \n    // 3. Buscar la fecha en AMBAS mallas usando normalización flexible\n    let fechaEncontrada = false;\n    let nombreHoja = null;\n    let diaSemana = null;\n    let datosDia = null;\n    \n    // Buscar primero en la malla principal\n    for (const dia in mallas.datosMalla.dias) {\n        if (compararFechasFlexible(mallas.datosMalla.dias[dia].fechaDia, nuevaFecha)) {\n            console.log(`Fecha encontrada en ${mallas.datosMalla.semana} (${dia})`);\n            fechaEncontrada = true;\n            diaSemana = dia;\n            datosDia = mallas.datosMalla.dias[dia];\n            nombreHoja = mallas.datosMalla.semana;\n            break;\n        }\n    }\n    \n    // Si no se encuentra en la malla principal, buscar en la próxima semana\n    if (!fechaEncontrada) {\n        for (const dia in mallas.datosMallaProxSemana.dias) {\n            if (compararFechasFlexible(mallas.datosMallaProxSemana.dias[dia].fechaDia, nuevaFecha)) {\n                console.log(`Fecha encontrada en ${mallas.datosMallaProxSemana.semana} (${dia})`);\n                fechaEncontrada = true;\n                diaSemana = dia;\n                datosDia = mallas.datosMallaProxSemana.dias[dia];\n                nombreHoja = mallas.datosMallaProxSemana.semana;\n                break;\n            }\n        }\n    }\n    \n    // Si la fecha no se encuentra en ninguna malla\n    if (!fechaEncontrada) {\n        return [{\n            json: {\n                franjaDisponible: false,\n                mensaje: `La fecha ${nuevaFecha} no se encuentra en la programación disponible.`\n            }\n        }];\n    }\n    \n    // 4. Verificar disponibilidad en la malla correcta\n    // Verificar que exista el muelle para ese día\n    const muelleKey = `muelle${numeroMuelle}`;\n    if (!datosDia[muelleKey]) {\n        return [{\n            json: {\n                franjaDisponible: false,\n                mensaje: `No existe el muelle ${numeroMuelle} para el día ${diaSemana}.`\n            }\n        }];\n    }\n    \n    // Verificar que la hora exista en el muelle\n    const muelle = datosDia[muelleKey];\n    \n    console.log(`Verificando hora: ${nuevaHora} en muelle ${numeroMuelle}`);\n    console.log(`Estado: ${muelle[nuevaHora]?.estado || 'no definido'}`);\n    \n    if (!muelle[nuevaHora]) {\n        return [{\n            json: {\n                franjaDisponible: false,\n                mensaje: `La hora ${nuevaHoraConFormato} no está definida para el día ${diaSemana}.`\n            }\n        }];\n    }\n    \n    // Verificar disponibilidad para horas consecutivas\n    let disponible = true;\n    let franjasNoDisponibles = [];\n    let esMismaCita = false; // Nueva bandera para verificar si es reprogramación de la misma cita\n    \n    // Encontrar la hora en las franjas\n    const franjas = nombreHoja === mallas.datosMalla.semana \n        ? mallas.datosMalla.franjas \n        : mallas.datosMallaProxSemana.franjas;\n    \n    let indiceInicio = -1;\n    \n    // Buscar usando normalización flexible de horas\n    for (let i = 0; i < franjas.length; i++) {\n        if (compararHorasFlexible(franjas[i].hora, nuevaHora)) {\n            indiceInicio = i;\n            console.log(`¡Coincidencia encontrada en índice ${i}!`);\n            break;\n        }\n    }\n    \n    if (indiceInicio === -1) {\n        console.log(\"No se encontró la hora en las franjas\");\n        return [{\n            json: {\n                franjaDisponible: false,\n                mensaje: `La hora ${nuevaHoraConFormato} no se encuentra en las franjas horarias disponibles.`\n            }\n        }];\n    }\n    \n    // Verificar disponibilidad para cada hora necesaria\n    for (let i = 0; i < horasEntrega; i++) {\n        if (indiceInicio + i >= franjas.length) {\n            disponible = false;\n            console.log(\"No hay suficientes horas disponibles en el día\");\n            break;\n        }\n        \n        const franja = franjas[indiceInicio + i];\n        const estadoFranja = muelle[franja.hora];\n        \n        console.log(`Verificando franja ${franja.hora}: ${estadoFranja?.estado || 'no definido'}`);\n        \n        if (!estadoFranja) {\n            disponible = false;\n            franjasNoDisponibles.push(franja.hora);\n        } else if (estadoFranja.estado === \"disponible\") {\n            // Franja disponible, todo bien\n            continue;\n        } else if (estadoFranja.estado === \"ocupado\") {\n            // Verificar si está ocupada por la misma cita\n            if (estadoFranja.ordenCompra === ordenCompra && \n                estadoFranja.proveedor === proveedorOriginal) {\n                console.log(`Franja ${franja.hora} ocupada por la misma cita - permitir reprogramación`);\n                esMismaCita = true;\n                continue;\n            } else {\n                // Ocupada por otra cita\n                disponible = false;\n                franjasNoDisponibles.push(franja.hora);\n            }\n        } else {\n            // Fuera de servicio u otro estado\n            disponible = false;\n            franjasNoDisponibles.push(franja.hora);\n        }\n    }\n    \n    // CÁLCULO PRECISO DEL nombreHoja PARA LA CITA ORIGINAL\n    let nombreHojaOriginal = calcularNombreHojaOriginal(citaOriginal.fecha_cita, mallas);\n    \n    // Si hay disponibilidad o es reprogramación de la misma cita, retornar respuesta positiva\n    if (disponible || esMismaCita) {\n        const horaFin = calcularHoraFin(nuevaHoraConFormato, horasEntrega);\n        const fechaFormateada = convertirFechaAFormatoISO(nuevaFecha);\n        \n        // Normalizar horaInicio para la respuesta (quitar cero inicial si existe)\n        const horaInicioNormalizada = nuevaHoraConFormato.replace(/^0(\\d:00 [AP]M)$/, \"$1\");\n        \n        const tipoOperacion = esMismaCita ? \"reprogramación\" : \"nueva programación\";\n        \n        const respuesta = {\n            franjaDisponible: true,\n            mensaje: `¡Genial! Hay espacio para la ${tipoOperacion} el ${nuevaFecha}, de ${horaInicioNormalizada} a ${horaFin} en MUELLE ${numeroMuelle}.`,\n            datosValidados: {\n                fecha: nuevaFecha,\n                fechaFormateada: fechaFormateada,\n                horaInicio: horaInicioNormalizada,\n                horaFin: horaFin,\n                muelle: `MUELLE ${numeroMuelle}`,\n                duracionHoras: horasEntrega,\n                disponibilidadConfirmada: true,\n                tipoOperacion: tipoOperacion\n            },\n            nombreHoja: nombreHoja,\n            citaAntigua: {\n                id: idCitaDB,\n                fechaFormateada: citaOriginal.fecha_cita ? citaOriginal.fecha_cita.split('T')[0] : \"\",\n                horaInicio: horaInicioOriginal,\n                horaFin: horaFinOriginal,\n                muelle: muelleOriginal,\n                nombreHoja: nombreHojaOriginal || nombreHoja // Usar valor calculado o default\n            }\n        };\n        \n        return [{ json: respuesta }];\n    } else {\n        // Si no hay disponibilidad, buscar alternativas\n        const franjasSemana = nombreHoja === mallas.datosMalla.semana \n            ? mallas.datosMalla.franjas \n            : mallas.datosMallaProxSemana.franjas;\n            \n        const alternativas = buscarAlternativasParaDia(\n            datosDia,\n            franjasSemana,\n            horasEntrega,\n            numeroMuelle\n        );\n        \n        let mensajeAlternativas = `Lo siento, la franja horaria seleccionada ya no está disponible. `;\n        \n        if (alternativas.length > 0) {\n            mensajeAlternativas += `Aquí hay algunas alternativas disponibles en el muelle ${numeroMuelle}:\\n\\n`;\n            \n            alternativas.forEach((alt, index) => {\n                mensajeAlternativas += `Opción ${index + 1}: ${alt.fecha} - Muelle ${alt.muelle} - De ${alt.horaInicio} a ${alt.horaFin}\\n`;\n            });\n            \n            mensajeAlternativas += \"\\nSi desea elegir una de estas alternativas, por favor envíe un nuevo mensaje con todos los datos de reprogramación. Este chat se reiniciará para evitar confusiones con mensajes anteriores.\";\n        } else {\n            mensajeAlternativas += `No se encontraron horarios alternativos disponibles para el muelle ${numeroMuelle} en las próximas fechas. Por favor, intente con otra fecha u horario. Este chat se reiniciará para evitar confusiones con mensajes anteriores.`;\n        }\n        \n        return [{\n            json: {\n                franjaDisponible: false,\n                mensaje: mensajeAlternativas,\n                alternativas: alternativas\n            }\n        }];\n    }\n} catch (error) {\n    console.error(\"Error en la validación:\", error);\n    return [{\n        json: {\n            franjaDisponible: false,\n            mensaje: \"Error en el proceso de validación: \" + error.message\n        }\n    }];\n}\n\n// FUNCIONES AUXILIARES MEJORADAS\n\n// Función para normalizar horas (maneja ambas direcciones)\nfunction normalizarHora(hora) {\n    if (!hora) return hora;\n    \n    // Convertir a string si no lo es\n    const horaStr = hora.toString().trim();\n    \n    // Patrón para capturar horas con posible cero inicial\n    const patron = /^(0?)(\\d{1,2}):(\\d{2})\\s*([AP]M)$/i;\n    const match = horaStr.match(patron);\n    \n    if (match) {\n        const [, ceroInicial, hora, minutos, periodo] = match;\n        // Quitar cero inicial si existe y la hora es de un dígito\n        const horaSinCero = parseInt(hora, 10);\n        return `${horaSinCero}:${minutos} ${periodo.toUpperCase()}`;\n    }\n    \n    return horaStr;\n}\n\n// Función para comparar horas de manera flexible\nfunction compararHorasFlexible(hora1, hora2) {\n    const horaNormalizada1 = normalizarHora(hora1);\n    const horaNormalizada2 = normalizarHora(hora2);\n    \n    console.log(`Comparando horas: \"${horaNormalizada1}\" con \"${horaNormalizada2}\"`);\n    \n    return horaNormalizada1 === horaNormalizada2;\n}\n\n// Función para normalizar fechas (maneja ambas direcciones)\nfunction normalizarFecha(fecha) {\n    if (!fecha) return fecha;\n    \n    const fechaStr = fecha.toString().trim();\n    \n    // Patrón para capturar fecha con posible cero inicial en el día\n    const patron = /^(0?)(\\d{1,2})\\s+de\\s+(\\w+)(?:\\s+de\\s+(\\d{4}))?$/i;\n    const match = fechaStr.match(patron);\n    \n    if (match) {\n        const [, ceroInicial, dia, mes, año] = match;\n        // Quitar cero inicial si existe\n        const diaSinCero = parseInt(dia, 10);\n        \n        if (año) {\n            return `${diaSinCero} de ${mes.toLowerCase()} de ${año}`;\n        } else {\n            return `${diaSinCero} de ${mes.toLowerCase()}`;\n        }\n    }\n    \n    return fechaStr;\n}\n\n// Función para comparar fechas de manera flexible\nfunction compararFechasFlexible(fecha1, fecha2) {\n    const fechaNormalizada1 = normalizarFecha(fecha1);\n    const fechaNormalizada2 = normalizarFecha(fecha2);\n    \n    console.log(`Comparando fechas: \"${fechaNormalizada1}\" con \"${fechaNormalizada2}\"`);\n    \n    // Comparación exacta\n    if (fechaNormalizada1 === fechaNormalizada2) {\n        return true;\n    }\n    \n    // Comparación sin año (para casos donde una tiene año y otra no)\n    const fecha1SinAño = fechaNormalizada1.replace(/\\s+de\\s+\\d{4}$/, '');\n    const fecha2SinAño = fechaNormalizada2.replace(/\\s+de\\s+\\d{4}$/, '');\n    \n    return fecha1SinAño === fecha2SinAño;\n}\n\n// Función para calcular el nombreHoja de la cita original\nfunction calcularNombreHojaOriginal(fechaCitaOriginal, mallas) {\n    if (!fechaCitaOriginal) return null;\n    \n    const formatosFechaOriginal = convertirFechaISOaLegible(fechaCitaOriginal);\n    console.log(\"Formatos de fecha original:\", formatosFechaOriginal);\n    \n    // Buscar en malla principal\n    for (const dia in mallas.datosMalla.dias) {\n        const fechaDiaMalla = mallas.datosMalla.dias[dia].fechaDia;\n        \n        if (compararFechasFlexible(fechaDiaMalla, formatosFechaOriginal.conAño) || \n            compararFechasFlexible(fechaDiaMalla, formatosFechaOriginal.sinAño)) {\n            console.log(`¡Cita original encontrada en ${mallas.datosMalla.semana}!`);\n            return mallas.datosMalla.semana;\n        }\n    }\n    \n    // Buscar en próxima semana\n    for (const dia in mallas.datosMallaProxSemana.dias) {\n        const fechaDiaMalla = mallas.datosMallaProxSemana.dias[dia].fechaDia;\n        \n        if (compararFechasFlexible(fechaDiaMalla, formatosFechaOriginal.conAño) || \n            compararFechasFlexible(fechaDiaMalla, formatosFechaOriginal.sinAño)) {\n            console.log(`¡Cita original encontrada en ${mallas.datosMallaProxSemana.semana}!`);\n            return mallas.datosMallaProxSemana.semana;\n        }\n    }\n    \n    // Método adicional: por día de la semana y rango de fechas\n    const fechaISO = new Date(fechaCitaOriginal);\n    const diaNumerico = fechaISO.getDate();\n    const mes = fechaISO.getMonth();\n    \n    // Función para extraer rango de días de un string como \"LUNES 02 AL VIERNES 06 DE JUNIO\"\n    function extraerRangoDias(rango) {\n        const partes = rango.split(\" \");\n        let diaInicio = null;\n        let diaFin = null;\n        let mesTexto = null;\n        \n        for (let i = 0; i < partes.length; i++) {\n            if (/^\\d+$/.test(partes[i])) {\n                if (diaInicio === null) {\n                    diaInicio = parseInt(partes[i]);\n                } else {\n                    diaFin = parseInt(partes[i]);\n                }\n            }\n            if (i > 0 && partes[i-1] === \"DE\") {\n                mesTexto = partes[i].toLowerCase();\n            }\n        }\n        \n        const meses = {\n            'enero': 0, 'febrero': 1, 'marzo': 2, 'abril': 3, 'mayo': 4, 'junio': 5,\n            'julio': 6, 'agosto': 7, 'septiembre': 8, 'octubre': 9, 'noviembre': 10, 'diciembre': 11\n        };\n        \n        return { diaInicio, diaFin, mes: meses[mesTexto] };\n    }\n    \n    // Verificar rangos\n    const rangoMallaPrincipal = extraerRangoDias(mallas.datosMalla.rangoDias);\n    console.log(\"Rango malla principal:\", rangoMallaPrincipal);\n    \n    if (mes === rangoMallaPrincipal.mes && \n        diaNumerico >= rangoMallaPrincipal.diaInicio && \n        diaNumerico <= rangoMallaPrincipal.diaFin) {\n        console.log(`Cita original en rango de ${mallas.datosMalla.semana}`);\n        return mallas.datosMalla.semana;\n    }\n    \n    const rangoProxSemana = extraerRangoDias(mallas.datosMallaProxSemana.rangoDias);\n    console.log(\"Rango próxima semana:\", rangoProxSemana);\n    \n    if (mes === rangoProxSemana.mes && \n        diaNumerico >= rangoProxSemana.diaInicio && \n        diaNumerico <= rangoProxSemana.diaFin) {\n        console.log(`Cita original en rango de ${mallas.datosMallaProxSemana.semana}`);\n        return mallas.datosMallaProxSemana.semana;\n    }\n    \n    console.log(`No se pudo determinar la hoja original, usando default: ${mallas.datosMalla.semana}`);\n    return mallas.datosMalla.semana;\n}\n\n// Función para convertir una fecha ISO a un formato legible\nfunction convertirFechaISOaLegible(fechaISO) {\n    const fechaObj = new Date(fechaISO);\n    const dia = fechaObj.getDate();\n    const meses = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];\n    const mes = meses[fechaObj.getMonth()];\n    const año = fechaObj.getFullYear();\n    \n    return {\n        conAño: `${dia} de ${mes} de ${año}`,\n        sinAño: `${dia} de ${mes}`\n    };\n}\n\n// Función para calcular la hora final\nfunction calcularHoraFin(horaInicio, horasNecesarias) {\n    try {\n        const partes = horaInicio.trim().split(/\\s+/);\n        const horaMinutos = partes[0].split(':');\n        const periodo = partes[1]; // AM o PM\n        \n        let hora = parseInt(horaMinutos[0], 10);\n        let minutos = parseInt(horaMinutos[1] || \"0\", 10);\n        \n        // Convertir a formato 24 horas para el cálculo\n        if (periodo.toUpperCase() === \"PM\" && hora < 12) {\n            hora += 12;\n        } else if (periodo.toUpperCase() === \"AM\" && hora === 12) {\n            hora = 0;\n        }\n        \n        // Sumar las horas necesarias\n        hora = (hora + horasNecesarias) % 24;\n        \n        // Convertir de nuevo a formato 12 horas\n        let nuevoPeriodo = \"AM\";\n        if (hora >= 12) {\n            nuevoPeriodo = \"PM\";\n            if (hora > 12) {\n                hora -= 12;\n            }\n        }\n        if (hora === 0) {\n            hora = 12;\n        }\n        \n        return `${hora}:${minutos.toString().padStart(2, '0')} ${nuevoPeriodo}`;\n    } catch (error) {\n        console.error(\"Error al calcular hora fin:\", error);\n        return \"Hora desconocida\";\n    }\n}\n\n// Función para convertir fecha a formato ISO\nfunction convertirFechaAFormatoISO(fechaTexto) {\n    try {\n        const partes = fechaTexto.split(\" de \");\n        const dia = parseInt(partes[0], 10);\n        const mes = partes[1].toLowerCase();\n        \n        const meses = {\n            'enero': 0, 'febrero': 1, 'marzo': 2, 'abril': 3, 'mayo': 4, 'junio': 5,\n            'julio': 6, 'agosto': 7, 'septiembre': 8, 'octubre': 9, 'noviembre': 10, 'diciembre': 11\n        };\n        \n        const mesNum = meses[mes];\n        if (mesNum === undefined) {\n            throw new Error(`Mes no válido: ${mes}`);\n        }\n        \n        let anio = new Date().getFullYear();\n        if (partes.length > 2) {\n            anio = parseInt(partes[2], 10);\n        }\n        \n        return `${anio}-${(mesNum + 1).toString().padStart(2, '0')}-${dia.toString().padStart(2, '0')}`;\n    } catch (error) {\n        console.error(\"Error al convertir fecha a formato ISO:\", error);\n        return \"\";\n    }\n}\n\n// Función para buscar alternativas en un día\nfunction buscarAlternativasParaDia(datoDia, franjas, horasNecesarias, numeroMuelle) {\n    const alternativas = [];\n    const muelleKey = `muelle${numeroMuelle}`;\n    const muelle = datoDia[muelleKey];\n    \n    if (!muelle) return alternativas;\n    \n    // Para cada posible hora de inicio\n    for (let i = 0; i <= franjas.length - horasNecesarias; i++) {\n        let disponible = true;\n        \n        // Verificar franjas consecutivas\n        for (let j = 0; j < horasNecesarias; j++) {\n            const franja = franjas[i + j];\n            if (!muelle[franja.hora] || muelle[franja.hora].estado !== \"disponible\") {\n                disponible = false;\n                break;\n            }\n        }\n        \n        if (disponible) {\n            const horaInicio = franjas[i].hora;\n            const horaFin = calcularHoraFin(horaInicio, horasNecesarias);\n            \n            alternativas.push({\n                fecha: datoDia.fechaDia,\n                muelle: numeroMuelle,\n                horaInicio: horaInicio,\n                horaFin: horaFin,\n                franjasHorarias: franjas.slice(i, i + horasNecesarias).map(f => f.hora)\n            });\n        }\n    }\n    \n    return alternativas;\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40960,
        -6976
      ],
      "id": "87d84fbd-9eeb-4008-a461-7442192ea28c",
      "name": "Code Validacion de Cita en cronograma para reprogramación"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "de7a1d59-037e-48c1-8ef4-b5667443ca11",
              "leftValue": "={{ $json.franjaDisponible }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -40752,
        -6976
      ],
      "id": "456b958e-65db-4f82-b81b-b458684974eb",
      "name": "If validacion de reprogramacion"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('Code Validacion de Cita en cronograma para reprogramación').first().json.mensaje.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -40304,
        -6896
      ],
      "id": "edd9430a-f25e-42ce-83f3-73cb009279cc",
      "name": "Validación de longitud de caracteres9"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Code Validacion de Cita en cronograma para reprogramación').first().json.mensaje }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Code Validacion de Cita en cronograma para reprogramación').first().json.mensaje.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -40032,
        -6832
      ],
      "id": "f2cf4cd8-959d-475b-984c-64208b111898",
      "name": "Organiza variables del mensaje9"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -39840,
        -7024
      ],
      "id": "0c641081-8cd4-4ce4-b210-58b830cbd4bf",
      "name": "No Operation, do nothing13"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -40032,
        -7024
      ],
      "id": "75de8cd3-31ca-4a9e-8fed-76db3c387292",
      "name": "HTTP Request Enviar Mensaje por WhatsApp12"
    },
    {
      "parameters": {
        "jsCode": "// Código optimizado para el nodo \"Code (Preparar Cuerpo de Petición)1\"\nconst datosValidados = $input.first().json.datosValidados;\nconst datosCita = $('Microsoft SQL Obtener Cita').first().json;\n// Obtener ambas mallas\nconst mallaActual = $('Unificación y consistencia de datos4').first().json.datosMalla;\nconst mallaProxima = $('Unificación y consistencia de datos4').first().json.datosMallaProxSemana;\n\n// Usar fecha de cita original para determinar malla\nconst fechaCitaOriginal = new Date(datosCita.fecha_cita);\n\nfunction fechaEnMalla(fecha, malla) {\n  if (!malla.dias) return false;\n  \n  const fechaBuscada = fecha.toLocaleDateString('es-ES', { \n    day: 'numeric', \n    month: 'long', \n    year: 'numeric' \n  });\n  \n  for (const dia of Object.keys(malla.dias)) {\n    const diaData = malla.dias[dia];\n    if (diaData.fechaDia && diaData.fechaDia === fechaBuscada) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Seleccionar malla correcta\nlet datosMalla;\nif (fechaEnMalla(fechaCitaOriginal, mallaActual)) {\n  datosMalla = mallaActual;\n  console.log(\"Usando malla actual para edición\");\n} else if (fechaEnMalla(fechaCitaOriginal, mallaProxima)) {\n  datosMalla = mallaProxima;\n  console.log(\"Usando malla próxima para edición\");\n} else {\n  return {\n    json: {\n      error: true,\n      mensaje: \"No se encontró la cita original en ninguna malla\"\n    }\n  };\n}\n\nconst citaAntigua = $input.first().json.citaAntigua || null;\nconst nombreHojaActual = $input.first().json.nombreHoja || datosMalla.semana || \"\";\n\n// Extraer la información relevante para la nueva cita\nconst {\n  fecha,\n  fechaFormateada,\n  horaInicio,\n  horaFin,\n  muelle,\n  duracionHoras\n} = datosValidados;\n\n// Mapear correctamente los campos del nodo \"Microsoft SQL Obtener Cita\"\nconst {\n  nombre: proveedor = \"\",\n  orden_compra: ordenCompra = \"\",\n  peso = \"\",\n  categoria = \"\",\n  unidades = \"\"\n} = datosCita;\n\n// **NUEVA FUNCIONALIDAD: Optimización de franjas cruzadas**\nfunction calcularFranjasOptimizadas() {\n  if (!citaAntigua) {\n    // Si no hay cita antigua, proceder normalmente\n    return {\n      franjasAEliminar: [],\n      franjasAInsertar: generarFranjasNuevas(),\n      optimizacionAplicada: false,\n      tipoOperacion: \"nueva_cita\"\n    };\n  }\n\n  // Verificar si es el mismo día\n  const fechaNueva = new Date(fechaFormateada);\n  const fechaAntigua = new Date(citaAntigua.fechaFormateada);\n  \n  const esMismoDia = fechaNueva.toDateString() === fechaAntigua.toDateString();\n  \n  if (!esMismoDia) {\n    // Días diferentes: eliminar todas las antiguas, insertar todas las nuevas\n    return {\n      franjasAEliminar: generarFranjasAntiguas(),\n      franjasAInsertar: generarFranjasNuevas(),\n      optimizacionAplicada: false,\n      tipoOperacion: \"cambio_dia\"\n    };\n  }\n\n  // **MISMO DÍA: Aplicar optimización**\n  const franjasAntiguas = generarFranjasAntiguas();\n  const franjasNuevas = generarFranjasNuevas();\n  \n  // Calcular intersección (franjas que se cruzan)\n  const franjasAntiguasSet = new Set(franjasAntiguas.map(f => f.hora));\n  const franjasNuevasSet = new Set(franjasNuevas.map(f => f.hora));\n  \n  const franjasComunes = franjasAntiguas.filter(f => franjasNuevasSet.has(f.hora));\n  const franjasComnesSet = new Set(franjasComunes.map(f => f.hora));\n  \n  // Calcular operaciones optimizadas\n  const franjasAEliminar = franjasAntiguas.filter(f => !franjasComnesSet.has(f.hora));\n  const franjasAInsertar = franjasNuevas.filter(f => !franjasComnesSet.has(f.hora));\n  \n  console.log(`Optimización aplicada:\\n    - Franjas antiguas: ${franjasAntiguas.length}\\n    - Franjas nuevas: ${franjasNuevas.length}\\n    - Franjas comunes (mantenidas): ${franjasComunes.length}\\n    - Franjas a eliminar: ${franjasAEliminar.length}\\n    - Franjas a insertar: ${franjasAInsertar.length}\\n    - Operaciones evitadas: ${franjasComunes.length * 2}`);\n\n  return {\n    franjasAEliminar,\n    franjasAInsertar,\n    franjasComunes,\n    optimizacionAplicada: true,\n    tipoOperacion: \"mismo_dia_optimizado\",\n    estadisticas: {\n      operacionesEvitadas: franjasComunes.length * 2,\n      eficiencia: ((franjasComunes.length * 2) / (franjasAntiguas.length + franjasNuevas.length) * 100).toFixed(2) + '%'\n    }\n  };\n}\n\nfunction generarFranjasNuevas() {\n  const franjas = [];\n  let horaActual = horaInicio;\n  let horasRestantes = duracionHoras;\n  \n  while (horasRestantes > 0) {\n    const franjaActual = datosMalla.franjas.find(f => horasIguales(f.hora, horaActual));\n    \n    if (!franjaActual) {\n      console.log(`No se encontró información para la franja: ${horaActual}`);\n      break;\n    }\n    \n    const filaBase = calcularFilaExcel(horaActual, datosMalla.franjas);\n    if (!filaBase) {\n      console.log(`No se pudo determinar la fila para la franja: ${horaActual}`);\n      break;\n    }\n\n    franjas.push({\n      hora: horaActual,\n      fila: filaBase,\n      datos: {\n        proveedor,\n        ordenCompra,\n        peso,\n        categoria,\n        unidades\n      }\n    });\n    \n    horasRestantes--;\n    if (horasRestantes > 0) {\n      const siguienteFranja = encontrarSiguienteFranja(horaActual, datosMalla.franjas);\n      if (siguienteFranja) {\n        horaActual = siguienteFranja.hora;\n      } else {\n        break;\n      }\n    }\n  }\n  \n  return franjas;\n}\n\nfunction generarFranjasAntiguas() {\n  if (!citaAntigua) return [];\n  \n  const franjas = [];\n  let horaActual = citaAntigua.horaInicio;\n  let horasRestantes = duracionHoras; // Usar la misma duración\n  \n  while (horasRestantes > 0) {\n    const franjaActual = datosMalla.franjas.find(f => horasIguales(f.hora, horaActual));\n    \n    if (!franjaActual) {\n      console.log(`No se encontró información para la franja antigua: ${horaActual}`);\n      break;\n    }\n    \n    const filaBase = calcularFilaExcel(horaActual, datosMalla.franjas);\n    if (!filaBase) {\n      console.log(`No se pudo determinar la fila para la franja antigua: ${horaActual}`);\n      break;\n    }\n\n    franjas.push({\n      hora: horaActual,\n      fila: filaBase,\n      datos: {\n        proveedor: \"\",\n        ordenCompra: \"\",\n        peso: \"\",\n        categoria: \"\",\n        unidades: \"\"\n      }\n    });\n    \n    horasRestantes--;\n    if (horasRestantes > 0) {\n      const siguienteFranja = encontrarSiguienteFranja(horaActual, datosMalla.franjas);\n      if (siguienteFranja) {\n        horaActual = siguienteFranja.hora;\n      } else {\n        break;\n      }\n    }\n  }\n  \n  return franjas;\n}\n\n// --- INICIO DE LA CORRECCIÓN ---\n\n// Nueva función auxiliar para obtener el día de la semana desde una fecha ISO (YYYY-MM-DD)\nfunction obtenerDiaSemanaDesdeISO(fechaISO) {\n  if (!fechaISO) return null;\n  // Se añade T12:00:00Z para evitar problemas de zona horaria al parsear la fecha\n  const fecha = new Date(`${fechaISO}T12:00:00Z`);\n  const diasSemana = [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"];\n  // getUTCDay() es más seguro para evitar desplazamientos de día por zona horaria\n  return diasSemana[fecha.getUTCDay()];\n}\n\n// Función modificada para aceptar el día de la semana como parámetro\nfunction procesarFranjas(franjas, nombreHoja, diaSemana) {\n  let actualizaciones = [];\n  \n  const muelleKey = muelle.toLowerCase().includes(\"1\") ? \"muelle1\" : \"muelle2\";\n  \n  const mapeoColumnas = {\n    'lunes': { 'muelle1': 'C', 'muelle2': 'F' },\n    'martes': { 'muelle1': 'I', 'muelle2': 'L' },\n    'miércoles': { 'muelle1': 'O', 'muelle2': 'R' },\n    'jueves': { 'muelle1': 'U', 'muelle2': 'X' },\n    'viernes': { 'muelle1': 'AA', 'muelle2': 'AD' }\n  };\n  \n  if (!mapeoColumnas[diaSemana] || !mapeoColumnas[diaSemana][muelleKey]) {\n    console.log(`No hay mapeo para: día=${diaSemana}, muelle=${muelleKey}`);\n    return [];\n  }\n  \n  const columnaBase = mapeoColumnas[diaSemana][muelleKey];\n  \n  function siguienteColumna(columna) {\n    if (columna.length === 1) {\n      return String.fromCharCode(columna.charCodeAt(0) + 1);\n    } else {\n      const primerChar = columna.charAt(0);\n      const segundoChar = columna.charAt(1);\n      \n      if (segundoChar === 'Z') {\n        return String.fromCharCode(primerChar.charCodeAt(0) + 1) + 'A';\n      } else {\n        return primerChar + String.fromCharCode(segundoChar.charCodeAt(0) + 1);\n      }\n    }\n  }\n  \n  franjas.forEach(franja => {\n    const filaBase = franja.fila;\n    const columnaLineas = siguienteColumna(columnaBase);\n    const columnaUnd = siguienteColumna(columnaLineas);\n    \n    const rangoCeldas = {\n      proveedor: `${columnaBase}${filaBase}`,\n      ordenCompra: `${columnaBase}${filaBase + 1}`,\n      peso: `${columnaBase}${filaBase + 2}`,\n      categoria: `${columnaLineas}${filaBase + 2}`,\n      unidades: `${columnaUnd}${filaBase + 2}`\n    };\n    \n    actualizaciones.push(\n      { celda: rangoCeldas.proveedor, valor: franja.datos.proveedor, nombreHoja },\n      { celda: rangoCeldas.ordenCompra, valor: franja.datos.ordenCompra, nombreHoja },\n      { celda: rangoCeldas.peso, valor: franja.datos.peso, nombreHoja },\n      { celda: rangoCeldas.categoria, valor: franja.datos.categoria, nombreHoja },\n      { celda: rangoCeldas.unidades, valor: franja.datos.unidades, nombreHoja }\n    );\n  });\n  \n  return actualizaciones;\n}\n\n// --- FIN DE LA CORRECCIÓN ---\n\n// Funciones auxiliares (mantener las existentes)\nfunction obtenerDiaSemanaDesdeTexto(fechaStr) {\n  const regex = /(\\d+)\\s+de\\s+(\\w+)\\s+de\\s+(\\d+)/;\n  const match = regex.exec(fechaStr);\n  \n  if (!match) return null;\n  \n  const dia = parseInt(match[1], 10);\n  const mesStr = match[2].toLowerCase();\n  const año = parseInt(match[3], 10);\n  \n  const meses = {\n    \"enero\": 0, \"febrero\": 1, \"marzo\": 2, \"abril\": 3, \"mayo\": 4, \"junio\": 5,\n    \"julio\": 6, \"agosto\": 7, \"septiembre\": 8, \"octubre\": 9, \"noviembre\": 10, \"diciembre\": 11\n  };\n  \n  const mesNum = meses[mesStr];\n  if (mesNum === undefined) return null;\n  \n  const fecha = new Date(año, mesNum, dia);\n  const diaSemana = fecha.getDay();\n  const diasSemana = [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"];\n  \n  return diasSemana[diaSemana];\n}\n\nfunction horasIguales(h1, h2) {\n  const normalizar = (h) =>\n    h.toString().trim().toLowerCase().replace(/\\./g, '').replace(/\\s+/g, '').replace(/^0+/, '');\n  return normalizar(h1) === normalizar(h2);\n}\n\nfunction calcularFilaExcel(hora, franjas) {\n  const franjasOrdenadas = [...franjas].sort((a, b) => {\n    function horaAMinutos(hora) {\n      const match = hora.match(/(\\d+):(\\d+)\\s*([AP]M)/i);\n      if (!match) return 0;\n      \n      let horas = parseInt(match[1], 10);\n      const minutos = parseInt(match[2], 10);\n      const periodo = match[3].toUpperCase();\n      \n      if (periodo === 'PM' && horas !== 12) {\n        horas += 12;\n      } else if (periodo === 'AM' && horas === 12) {\n        horas = 0;\n      }\n      \n      return horas * 60 + minutos;\n    }\n    \n    return horaAMinutos(a.hora) - horaAMinutos(b.hora);\n  });\n  \n  const posicion = franjasOrdenadas.findIndex(f => horasIguales(f.hora, hora));\n  \n  if (posicion === -1) {\n    console.log(`No se encontró la posición para la hora ${hora}`);\n    return null;\n  }\n  \n  const FILA_PRIMERA_FRANJA = 12;\n  const INCREMENTO_ESTANDAR = 3;\n  \n  if (posicion === 3) {\n    return 21;\n  } else if (posicion === 4) {\n    return 24;\n  } else if (posicion === 5) {\n    return 27;\n  } else if (posicion < 3) {\n    return FILA_PRIMERA_FRANJA + (posicion * INCREMENTO_ESTANDAR);\n  } else {\n    return 27 + ((posicion - 5) * INCREMENTO_ESTANDAR);\n  }\n}\n\nfunction encontrarSiguienteFranja(horaActual, franjas) {\n  const franjasOrdenadas = [...franjas].sort((a, b) => {\n    function horaAMinutos(hora) {\n      const match = hora.match(/(\\d+):(\\d+)\\s*([AP]M)/i);\n      if (!match) return 0;\n      \n      let horas = parseInt(match[1], 10);\n      const minutos = parseInt(match[2], 10);\n      const periodo = match[3].toUpperCase();\n      \n      if (periodo === 'PM' && horas !== 12) {\n        horas += 12;\n      } else if (periodo === 'AM' && horas === 12) {\n        horas = 0;\n      }\n      \n      return horas * 60 + minutos;\n    }\n    \n    return horaAMinutos(a.hora) - horaAMinutos(b.hora);\n  });\n  \n  const posicionActual = franjasOrdenadas.findIndex(f => horasIguales(f.hora, horaActual));\n  \n  if (posicionActual === -1 || posicionActual >= franjasOrdenadas.length - 1) {\n    return null;\n  }\n  \n  return franjasOrdenadas[posicionActual + 1];\n}\n\n// **EJECUTAR OPTIMIZACIÓN**\nconst resultadoOptimizacion = calcularFranjasOptimizadas();\n\n// --- LLAMADAS CORREGIDAS A procesarFranjas ---\nconst diaSemanaNuevo = obtenerDiaSemanaDesdeTexto(fecha);\nconst diaSemanaAntiguo = citaAntigua ? obtenerDiaSemanaDesdeISO(citaAntigua.fechaFormateada) : null;\n\nconst actualizacionesNuevaCita = procesarFranjas(resultadoOptimizacion.franjasAInsertar, nombreHojaActual, diaSemanaNuevo);\nconst actualizacionesCitaAntigua = citaAntigua ? \n  procesarFranjas(resultadoOptimizacion.franjasAEliminar, citaAntigua.nombreHoja || nombreHojaActual, diaSemanaAntiguo) : [];\n\n// Combinar todas las actualizaciones\nconst todasLasActualizaciones = [...actualizacionesNuevaCita, ...actualizacionesCitaAntigua];\n\n// Preparar el formato final para la petición a Microsoft Graph\nconst actualizacionesGraph = todasLasActualizaciones.map(act => ({\n  address: act.celda,\n  values: [[act.valor]],\n  nombreHoja: act.nombreHoja\n}));\n\n// Preparar el resultado para el siguiente nodo\nreturn {\n  json: {\n    success: true,\n    mensaje: `Preparadas ${todasLasActualizaciones.length} actualizaciones optimizadas para la cita del ${fecha} de ${horaInicio} a ${horaFin} en ${muelle} (${duracionHoras} horas)`,\n    nombreHoja: nombreHojaActual,\n    optimizacion: resultadoOptimizacion,\n    graphRequestData: {\n      updates: actualizacionesGraph\n    },\n    detalles: {\n      actualizacionesDetalladas: todasLasActualizaciones,\n      diaSemana: obtenerDiaSemanaDesdeTexto(fecha),\n      informacionCita: {\n        fecha, horaInicio, horaFin, muelle, proveedor, ordenCompra, peso, categoria, unidades, duracionHoras\n      }\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40288,
        -7792
      ],
      "id": "7556b150-d092-4d79-8c1d-a88b7cba085d",
      "name": "Code (Preparar Cuerpo de Petición)1"
    },
    {
      "parameters": {
        "jsCode": "// Código optimizado para \"Code Agrupar Franjas2\"\nconst input = $input.first().json;\n\n// Verificar que tenemos la estructura esperada\nif (!input || !input.graphRequestData || !input.graphRequestData.updates) {\n  console.log('Estructura de datos de entrada no válida');\n  return {\n    json: {\n      error: \"FORMATO_INVALIDO\",\n      mensaje: \"La estructura de datos de entrada no es válida\"\n    }\n  };\n}\n\nconst updates = input.graphRequestData.updates;\nconst optimizacion = input.optimizacion || {};\n\nconsole.log(`Procesando con optimización: ${optimizacion.optimizacionAplicada ? 'SÍ' : 'NO'}`);\nif (optimizacion.optimizacionAplicada) {\n  console.log(`Tipo de operación: ${optimizacion.tipoOperacion}`);\n  console.log(`Estadísticas: ${JSON.stringify(optimizacion.estadisticas)}`);\n}\n\n// **NUEVA LÓGICA: Agrupar considerando optimización**\nfunction agruparActualizacionesOptimizada() {\n  const actualizacionesInsercion = updates.filter(u => u.values[0][0] !== \"\");\n  const actualizacionesEliminacion = updates.filter(u => u.values[0][0] === \"\");\n  \n  // Si no hay optimización, usar la lógica original\n  if (!optimizacion.optimizacionAplicada) {\n    return agruparModeLegacy(actualizacionesInsercion, actualizacionesEliminacion);\n  }\n  \n  // **MODO OPTIMIZADO**: Agrupar solo las operaciones necesarias\n  console.log(`Modo optimizado activado:\n    - Inserciones necesarias: ${actualizacionesInsercion.length}\n    - Eliminaciones necesarias: ${actualizacionesEliminacion.length}\n    - Operaciones evitadas: ${optimizacion.estadisticas?.operacionesEvitadas || 0}`);\n  \n  const resultados = [];\n  const maxOperaciones = Math.max(actualizacionesInsercion.length, actualizacionesEliminacion.length);\n  \n  for (let i = 0; i < maxOperaciones; i++) {\n    const insercion = i < actualizacionesInsercion.length ? actualizacionesInsercion[i] : null;\n    const eliminacion = i < actualizacionesEliminacion.length ? actualizacionesEliminacion[i] : null;\n    \n    const parActualizaciones = {\n      json: {\n        insercion: insercion ? {\n          address: insercion.address,\n          values: insercion.values,\n          nombreHoja: insercion.nombreHoja || input.nombreHoja\n        } : null,\n        eliminacion: eliminacion ? {\n          address: eliminacion.address,\n          values: eliminacion.values,\n          nombreHoja: eliminacion.nombreHoja || input.nombreHoja\n        } : null,\n        indice: i + 1,\n        informacionCita: input.detalles?.informacionCita,\n        optimizacion: {\n          aplicada: true,\n          tipo: optimizacion.tipoOperacion,\n          estadisticas: optimizacion.estadisticas\n        }\n      }\n    };\n    \n    resultados.push(parActualizaciones);\n  }\n  \n  return resultados;\n}\n\nfunction agruparModeLegacy(actualizacionesInsercion, actualizacionesEliminacion) {\n  console.log('Usando modo legacy - sin optimización');\n  \n  const resultados = [];\n  const maxOperaciones = Math.max(actualizacionesInsercion.length, actualizacionesEliminacion.length);\n  \n  for (let i = 0; i < maxOperaciones; i++) {\n    const insercion = i < actualizacionesInsercion.length ? actualizacionesInsercion[i] : null;\n    const eliminacion = i < actualizacionesEliminacion.length ? actualizacionesEliminacion[i] : null;\n    \n    const parActualizaciones = {\n      json: {\n        insercion: insercion ? {\n          address: insercion.address,\n          values: insercion.values,\n          nombreHoja: insercion.nombreHoja || input.nombreHoja\n        } : null,\n        eliminacion: eliminacion ? {\n          address: eliminacion.address,\n          values: eliminacion.values,\n          nombreHoja: eliminacion.nombreHoja || input.nombreHoja\n        } : null,\n        indice: i + 1,\n        informacionCita: input.detalles?.informacionCita,\n        optimizacion: {\n          aplicada: false,\n          tipo: optimizacion.tipoOperacion || 'legacy',\n          estadisticas: { operacionesEvitadas: 0, eficiencia: '0%' }\n        }\n      }\n    };\n    \n    resultados.push(parActualizaciones);\n  }\n  \n  return resultados;\n}\n\n// Ejecutar agrupación\nconst resultados = agruparActualizacionesOptimizada();\n\nconsole.log(`Se crearon ${resultados.length} pares de actualizaciones`);\n\nreturn resultados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40080,
        -7792
      ],
      "id": "91ac5c2f-c04f-47b0-a44e-b42c509cd859",
      "name": "Code Agrupar Franjas2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -39792,
        -7792
      ],
      "id": "b0238c82-e64c-48eb-8b93-43883f8494f0",
      "name": "Loop Over Uno a Uno1"
    },
    {
      "parameters": {
        "jsCode": "// Código optimizado para \"Code Preparar cada Insercion1\"\nconst input = $input.first().json;\n\n// Constantes para los IDs de SharePoint/OneDrive\nconst siteId = \"gexpresscargo.sharepoint.com,a592f886-4560-4e62-9646-1eee7add7abe,8b514073-41ae-4619-8f76-724bd912bc65\";\nconst driveId = \"b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8\";\nconst itemId = \"01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME\";\n\n// Verificar que tenemos la estructura esperada\nif (!input || (!input.insercion && !input.eliminacion)) {\n  console.log('Estructura de datos de entrada no válida para las operaciones');\n  return {\n    json: {\n      error: \"FORMATO_INVALIDO\",\n      mensaje: \"La estructura de datos de entrada no es válida para las operaciones combinadas\"\n    }\n  };\n}\n\nconst optimizacion = input.optimizacion || { aplicada: false };\nconst indice = input.indice;\nconst informacionCita = input.informacionCita || {};\n\n// **NUEVA LÓGICA: Preparar solicitudes considerando optimización**\nfunction prepararSolicitudOptimizada() {\n  const solicitudes = [];\n  \n  // Log de optimización\n  if (optimizacion.aplicada) {\n    console.log(`Preparando solicitud optimizada - Tipo: ${optimizacion.tipo}`);\n    console.log(`Estadísticas de optimización: ${JSON.stringify(optimizacion.estadisticas)}`);\n  } else {\n    console.log('Preparando solicitud en modo legacy');\n  }\n  \n  // Preparar solicitud de inserción si existe\n  if (input.insercion && input.insercion.address && input.insercion.values) {\n    const requestIdInsercion = `insercion_${input.insercion.address}_${indice}_${Date.now()}`;\n    const nombreHojaInsercion = input.insercion.nombreHoja;\n    \n    if (!nombreHojaInsercion) {\n      console.log('Nombre de hoja faltante para inserción');\n      return {\n        json: {\n          error: \"HOJA_NO_ESPECIFICADA\",\n          mensaje: \"No se especificó el nombre de la hoja para la inserción\"\n        }\n      };\n    }\n    \n    solicitudes.push({\n      id: requestIdInsercion,\n      method: \"PATCH\",\n      url: `/sites/${siteId}/drives/${driveId}/items/${itemId}/workbook/worksheets/${encodeURIComponent(nombreHojaInsercion)}/range(address='${input.insercion.address}')`,\n      body: {\n        values: input.insercion.values\n      },\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    \n    console.log(`Solicitud de inserción: \"${input.insercion.values[0][0]}\" en celda ${input.insercion.address} de hoja \"${nombreHojaInsercion}\"`);\n  }\n  \n  // Preparar solicitud de eliminación si existe\n  if (input.eliminacion && input.eliminacion.address && input.eliminacion.values) {\n    const requestIdEliminacion = `eliminacion_${input.eliminacion.address}_${indice}_${Date.now()}`;\n    const nombreHojaEliminacion = input.eliminacion.nombreHoja;\n    \n    if (!nombreHojaEliminacion) {\n      console.log('Nombre de hoja faltante para eliminación');\n      return {\n        json: {\n          error: \"HOJA_NO_ESPECIFICADA\",\n          mensaje: \"No se especificó el nombre de la hoja para la eliminación\"\n        }\n      };\n    }\n    \n    solicitudes.push({\n      id: requestIdEliminacion,\n      method: \"PATCH\",\n      url: `/sites/${siteId}/drives/${driveId}/items/${itemId}/workbook/worksheets/${encodeURIComponent(nombreHojaEliminacion)}/range(address='${input.eliminacion.address}')`,\n      body: {\n        values: input.eliminacion.values\n      },\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    \n    console.log(`Solicitud de eliminación: limpiar celda ${input.eliminacion.address} en hoja \"${nombreHojaEliminacion}\"`);\n  }\n  \n  // **VALIDACIÓN DE OPTIMIZACIÓN**: Verificar que no estamos procesando franjas innecesarias\n  if (optimizacion.aplicada && optimizacion.tipo === \"mismo_dia_optimizado\") {\n    // En este caso, deberíamos tener menos solicitudes que en el modo legacy\n    console.log(`Optimización aplicada: procesando ${solicitudes.length} solicitudes en lugar de las operaciones completas`);\n  }\n  \n  return {\n    requests: solicitudes,\n    _metadata: {\n      indice: indice,\n      optimizacion: optimizacion,\n      operaciones: {\n        insercion: input.insercion ? {\n          celda: input.insercion.address,\n          valor: input.insercion.values[0][0],\n          hoja: input.insercion.nombreHoja\n        } : null,\n        eliminacion: input.eliminacion ? {\n          celda: input.eliminacion.address,\n          valor: \"\",\n          hoja: input.eliminacion.nombreHoja\n        } : null\n      },\n      informacionCita: informacionCita\n    }\n  };\n}\n\n// Verificar si alguna operación es realmente necesaria\nif (!input.insercion && !input.eliminacion) {\n  console.log('No hay operaciones que procesar - posible optimización completa');\n  return {\n    json: {\n      requests: [],\n      _metadata: {\n        indice: indice,\n        optimizacion: { ...optimizacion, operacionCompleta: true },\n        mensaje: \"No se requieren operaciones - franjas mantenidas por optimización\"\n      }\n    }\n  };\n}\n\n// Preparar y retornar la solicitud\nconst requestBody = prepararSolicitudOptimizada();\n\nconsole.log(`Solicitud preparada con ${requestBody.requests.length} operaciones`);\n\nreturn {\n  json: requestBody\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39520,
        -7696
      ],
      "id": "75b0e89a-4c67-4e55-bc18-7a340705f53c",
      "name": "Code Preparar cada Insercion1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.microsoft.com/v1.0/$batch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -39264,
        -7696
      ],
      "id": "939c6e04-eb0d-40d5-952d-540eb4f0dbbd",
      "name": "HTTP Request Actualizar Excel",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Código actualizado para verificar tanto la inserción como la eliminación\nconst input = $input.first().json;\n\n// Verificar que tenemos la estructura esperada en la respuesta\nif (!input || !input.responses || !Array.isArray(input.responses) || input.responses.length === 0) {\n  console.log('Estructura de datos de respuesta no válida');\n  return {\n    json: {\n      error: \"RESPUESTA_INVALIDA\",\n      mensaje: \"La estructura de datos de la respuesta no es válida\",\n      exito: false\n    }\n  };\n}\n\n// Buscar las respuestas de inserción y eliminación\nconst respuestaInsercion = input.responses.find(r => r.id && r.id.includes('insercion_'));\nconst respuestaEliminacion = input.responses.find(r => r.id && r.id.includes('eliminacion_'));\n\n// Verificar si encontramos ambas respuestas\nif (!respuestaInsercion || !respuestaEliminacion) {\n  console.log('No se encontraron respuestas para inserción y/o eliminación');\n  return {\n    json: {\n      error: \"RESPUESTAS_INCOMPLETAS\",\n      mensaje: \"No se encontraron respuestas para inserción y/o eliminación\",\n      exito: false,\n      respuestasDisponibles: input.responses.map(r => r.id)\n    }\n  };\n}\n\n// Extraer información de las respuestas\nfunction extraerInfoCelda(respuesta) {\n  // Extraer información del ID\n  const idPartes = respuesta.id.split('_');\n  const tipoOperacion = idPartes[0]; // \"insercion\" o \"eliminacion\"\n  const celda = idPartes[1];         // Por ejemplo \"I21\"\n  \n  // Extraer información de dirección de la respuesta\n  let direccionRespuesta = \"\";\n  let hoja = \"\";\n  \n  if (respuesta.body && respuesta.body.address) {\n    // Formato típico: 'SEMANA 21'!I21\n    const direccionCompleta = respuesta.body.address;\n    const partesDireccion = direccionCompleta.split('!');\n    \n    if (partesDireccion.length > 1) {\n      // Eliminar comillas simples y extraer el nombre de la hoja\n      hoja = partesDireccion[0].replace(/'/g, '');\n      direccionRespuesta = partesDireccion[1];\n    }\n  }\n  \n  // Obtener el valor de la celda\n  const valor = respuesta.body && respuesta.body.values && \n                respuesta.body.values[0] && respuesta.body.values[0][0] !== undefined ? \n                respuesta.body.values[0][0] : null;\n  \n  // Verificar el código de estado HTTP\n  const estadoExitoso = respuesta.status >= 200 && respuesta.status < 300;\n  \n  return {\n    id: respuesta.id,\n    tipoOperacion,\n    celda,\n    direccionRespuesta,\n    hoja,\n    valor,\n    estadoExitoso,\n    statusCode: respuesta.status\n  };\n}\n\n// Procesar ambas respuestas\nconst infoInsercion = extraerInfoCelda(respuestaInsercion);\nconst infoEliminacion = extraerInfoCelda(respuestaEliminacion);\n\n// Determinar éxito global\nconst exitoGlobal = infoInsercion.estadoExitoso && infoEliminacion.estadoExitoso;\n\n// Crear resultado detallado\nconst resultado = {\n  exito: exitoGlobal,\n  operaciones: {\n    insercion: {\n      exito: infoInsercion.estadoExitoso,\n      celda: infoInsercion.celda,\n      celdaRespuesta: infoInsercion.direccionRespuesta,\n      hoja: infoInsercion.hoja,\n      valor: infoInsercion.valor,\n      statusCode: infoInsercion.statusCode\n    },\n    eliminacion: {\n      exito: infoEliminacion.estadoExitoso,\n      celda: infoEliminacion.celda,\n      celdaRespuesta: infoEliminacion.direccionRespuesta,\n      hoja: infoEliminacion.hoja,\n      valor: infoEliminacion.valor,\n      statusCode: infoEliminacion.statusCode\n    }\n  },\n  mensaje: exitoGlobal ? \n    `Operaciones completadas exitosamente - Inserción en ${infoInsercion.hoja} y eliminación en ${infoEliminacion.hoja}` :\n    `Hubo problemas con una o ambas operaciones`,\n  respuestasOriginales: {\n    insercion: respuestaInsercion,\n    eliminacion: respuestaEliminacion\n  }\n};\n\n// Mantener compatibilidad con el formato antiguo para no romper flujos subsiguientes\nconst resultadoCompatible = {\n  exito: exitoGlobal,\n  celdaOriginal: infoInsercion.tipoOperacion,\n  celdaInsertada: infoInsercion.celda,\n  valorInsertado: infoInsercion.valor,\n  statusCode: infoInsercion.statusCode,\n  requestId: infoInsercion.id,\n  indice: infoInsercion.celda,\n  celdasDiferentes: false, // Ya no es relevante con la nueva estructura\n  falloEstado: !exitoGlobal,\n  respuestaOriginal: respuestaInsercion,\n  // Nuevos campos para la versión mejorada\n  resultadoDetallado: resultado\n};\n\n// Obtener chat_id si existe\nconst chatId = $('Organiza el Mensaje').first()?.json?.infoMensaje?.chat_id;\n\n// Registrar resultado en consola\nif (exitoGlobal) {\n  console.log(`Operaciones completadas exitosamente:`);\n  console.log(`- Inserción en hoja ${infoInsercion.hoja}, celda ${infoInsercion.celda}, valor: \"${infoInsercion.valor}\"`);\n  console.log(`- Eliminación en hoja ${infoEliminacion.hoja}, celda ${infoEliminacion.celda}`);\n} else {\n  console.log(`Hubo problemas con una o ambas operaciones:`);\n  if (!infoInsercion.estadoExitoso) {\n    console.log(`- Fallo en inserción: status ${infoInsercion.statusCode}`);\n  }\n  if (!infoEliminacion.estadoExitoso) {\n    console.log(`- Fallo en eliminación: status ${infoEliminacion.statusCode}`);\n  }\n}\n\n// Retornar el resultado\nreturn {\n  json: resultadoCompatible,\n  chat_id: chatId\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39040,
        -7696
      ],
      "id": "cb70a0f9-07f6-47e4-8f6c-2887e0a8f94b",
      "name": "Code Verificar Inserción1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fb1eda05-eb5e-4683-8556-1cf2b5b8e4d5",
              "leftValue": "={{ $json.exito }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -38800,
        -7632
      ],
      "id": "c8f4d163-7d6b-406c-a442-837216cb2c66",
      "name": "If Verificar Inserción1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "15a95144-dd82-4ea5-b9ba-9eb924d2ae5c",
              "leftValue": "={{ $json.celdasDiferentes }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -38592,
        -7552
      ],
      "id": "fea23744-8ed9-4a11-badb-3e38f8687e13",
      "name": "If Diferente Caso1"
    },
    {
      "parameters": {
        "jsCode": "// Código para limpiar una celda donde se insertó incorrectamente un valor\n// Actualizado para manejar la nueva estructura con operaciones de inserción y eliminación\nconst input = $input.first().json;\n\n// Constantes para los IDs de SharePoint/OneDrive\nconst siteId = \"gexpresscargo.sharepoint.com,a592f886-4560-4e62-9646-1eee7add7abe,8b514073-41ae-4619-8f76-724bd912bc65\";\nconst driveId = \"b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8\";\nconst itemId = \"01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME\";\n\n// Verificar que tenemos la información necesaria\nif (!input || (!input.operaciones && !input.celdaInsertada)) {\n  console.log('Información insuficiente para limpiar la celda incorrecta');\n  return {\n    json: {\n      error: \"INFORMACION_INSUFICIENTE\",\n      mensaje: \"No hay suficiente información para limpiar la celda incorrecta\"\n    }\n  };\n}\n\n// Determinar qué celdas necesitan limpieza\nconst celdasALimpiar = [];\n\n// Verificar si estamos usando la nueva estructura con operaciones\nif (input.operaciones) {\n  // Nueva estructura: usar información de las operaciones\n  const { insercion, eliminacion } = input.operaciones;\n  \n  // Si la inserción falló, agregarla para limpieza\n  if (insercion && !insercion.exito && insercion.celdaRespuesta) {\n    celdasALimpiar.push({\n      celda: insercion.celdaRespuesta,\n      hoja: insercion.hoja || \"\"\n    });\n  }\n  \n  // Si la eliminación falló, agregarla para limpieza\n  if (eliminacion && !eliminacion.exito && eliminacion.celdaRespuesta) {\n    celdasALimpiar.push({\n      celda: eliminacion.celdaRespuesta,\n      hoja: eliminacion.hoja || \"\"\n    });\n  }\n} else {\n  // Estructura anterior: solo tenemos información de inserción\n  // Obtener la celda a limpiar y la información de la hoja\n  const celdaALimpiar = input.celdaInsertada;\n  let hojaExcel = input.nombreHoja || \"\"; // Usar el nombreHoja del input\n  \n  // Intentar extraer el nombre de la hoja de la dirección en la respuesta si no está disponible\n  if ((!hojaExcel || hojaExcel === \"\") && input.respuestaOriginal?.body?.address) {\n    const direccionCompleta = input.respuestaOriginal.body.address;\n    hojaExcel = direccionCompleta.split('!')[0].replace(/'/g, '');\n  }\n  \n  celdasALimpiar.push({\n    celda: celdaALimpiar,\n    hoja: hojaExcel\n  });\n}\n\n// Si no hay celdas para limpiar, devolver error\nif (celdasALimpiar.length === 0) {\n  console.log('No se identificaron celdas para limpiar');\n  return {\n    json: {\n      error: \"NO_HAY_CELDAS\",\n      mensaje: \"No se identificaron celdas que necesiten limpieza\",\n      input: input\n    }\n  };\n}\n\n// Crear solicitudes para limpiar cada celda identificada\nconst solicitudes = celdasALimpiar.map((info, index) => {\n  console.log(`Limpiando celda incorrecta ${info.celda} en hoja ${info.hoja}`);\n  \n  return {\n    id: `Limpiar_${info.celda}_${Date.now()}_${index}`,\n    method: \"PATCH\",\n    url: `/sites/${siteId}/drives/${driveId}/items/${itemId}/workbook/worksheets/${encodeURIComponent(info.hoja)}/range(address='${info.celda}')`,\n    body: {\n      values: [[\"\"]] // Valor vacío para limpiar la celda\n    },\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n});\n\n// Crear la solicitud para limpiar las celdas\nconst requestBody = {\n  requests: solicitudes,\n  _metadata: {\n    accion: \"limpiar\",\n    celdasLimpiadas: celdasALimpiar,\n    datoOriginal: input\n  }\n};\n\n// Retornar el request para limpiar la celda\nreturn {\n  json: requestBody\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -38288,
        -7728
      ],
      "id": "bb2c2792-fc33-4595-9297-607a961163de",
      "name": "Code Limpiar Celda Incorrecta1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.microsoft.com/v1.0/$batch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -38064,
        -7728
      ],
      "id": "8acf85b5-181b-489b-ace3-1b9b7dd3a714",
      "name": "HTTP Request Limpiar Celda1",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e570827e-13d0-4d6f-b23e-184ca2d3368c",
              "leftValue": "={{ $json.falloEstado }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -38128,
        -7344
      ],
      "id": "509b2e7d-509f-458a-a4ee-71b0e6031408",
      "name": "If fallo Estado1"
    },
    {
      "parameters": {
        "jsCode": "// Código para reintentar la inserción en la celda correcta\n// Actualizado para manejar la nueva estructura con operaciones de inserción y eliminación\nconst input = $input.first().json;\n\n// Constantes para los IDs de SharePoint/OneDrive\nconst siteId = \"gexpresscargo.sharepoint.com,a592f886-4560-4e62-9646-1eee7add7abe,8b514073-41ae-4619-8f76-724bd912bc65\";\nconst driveId = \"b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8\";\nconst itemId = \"01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME\";\n\n// Si el input viene del nodo anterior de limpiar celda, extraer el dato original\nconst datoOriginal = input._metadata?.datoOriginal || input;\n\n// Verificar que tenemos la información necesaria\nif (!datoOriginal) {\n  console.log('Información insuficiente para reintentar la inserción/eliminación');\n  return {\n    json: {\n      error: \"INFORMACION_INSUFICIENTE\",\n      mensaje: \"No hay suficiente información para reintentar las operaciones\"\n    }\n  };\n}\n\n// Operaciones a reintentar\nconst operacionesAReintentar = [];\n\n// Determinar qué operaciones necesitan reintento\nif (datoOriginal.operaciones) {\n  // Nueva estructura: evaluar inserción y eliminación\n  const { insercion, eliminacion } = datoOriginal.operaciones;\n  \n  // Verificar si la inserción necesita reintento\n  if (insercion && !insercion.exito) {\n    operacionesAReintentar.push({\n      tipo: \"insercion\",\n      celda: insercion.celda,\n      valor: insercion.valor,\n      hoja: insercion.hoja || datoOriginal.resultadoDetallado?.operaciones?.insercion?.hoja || \"\"\n    });\n  }\n  \n  // Verificar si la eliminación necesita reintento\n  if (eliminacion && !eliminacion.exito) {\n    operacionesAReintentar.push({\n      tipo: \"eliminacion\",\n      celda: eliminacion.celda,\n      valor: \"\", // Para eliminación, siempre usamos valor vacío\n      hoja: eliminacion.hoja || datoOriginal.resultadoDetallado?.operaciones?.eliminacion?.hoja || \"\"\n    });\n  }\n} else {\n  // Estructura anterior: solo tenemos información de inserción\n  // Obtener la celda correcta donde insertar y el valor a insertar\n  const celdaCorrecta = datoOriginal.celdaOriginal;\n  \n  // Intentar obtener el valor correcto a insertar\n  let valorAInsertar;\n  \n  // Primero, verificar si tenemos el valor de la respuesta original\n  if (datoOriginal.valorInsertado !== undefined) {\n    valorAInsertar = datoOriginal.valorInsertado;\n  } \n  // Si no, intentar obtenerlo del body de la respuesta\n  else if (datoOriginal.respuestaOriginal?.body?.values?.[0]?.[0] !== undefined) {\n    valorAInsertar = datoOriginal.respuestaOriginal.body.values[0][0];\n  } \n  // Como último recurso, usar un valor vacío\n  else {\n    valorAInsertar = \"\";\n    console.log('No se pudo determinar el valor a insertar, usando valor vacío');\n  }\n  \n  // Obtener la hoja de Excel - primero del dato original\n  let hojaExcel = datoOriginal.nombreHoja || \"\"; \n  \n  // Si no está disponible en el objeto principal, intentar obtenerlo de otros lugares\n  if (!hojaExcel || hojaExcel === \"\") {\n    // Verificar si está en el _metadata\n    hojaExcel = input._metadata?.hoja || \"\";\n    \n    // Como último recurso, extraer de la dirección en la respuesta\n    if ((!hojaExcel || hojaExcel === \"\") && datoOriginal.respuestaOriginal?.body?.address) {\n      const direccionCompleta = datoOriginal.respuestaOriginal.body.address;\n      hojaExcel = direccionCompleta.split('!')[0].replace(/'/g, '');\n    }\n  }\n  \n  operacionesAReintentar.push({\n    tipo: \"insercion\",\n    celda: celdaCorrecta,\n    valor: valorAInsertar,\n    hoja: hojaExcel\n  });\n}\n\n// Si no hay operaciones para reintentar, devolver error\nif (operacionesAReintentar.length === 0) {\n  console.log('No se identificaron operaciones para reintentar');\n  return {\n    json: {\n      error: \"NO_HAY_OPERACIONES\",\n      mensaje: \"No se identificaron operaciones que necesiten reintento\",\n      input: datoOriginal\n    }\n  };\n}\n\n// Crear solicitudes para cada operación a reintentar\nconst solicitudes = operacionesAReintentar.map((op, index) => {\n  // Determinar el tipo de valor y formatearlo adecuadamente\n  let valorFormateado;\n  if (typeof op.valor === 'number') {\n    valorFormateado = [[op.valor]]; // Mantener el tipo numérico\n  } else {\n    valorFormateado = [[op.valor.toString()]]; // Convertir a string para otros tipos\n  }\n  \n  console.log(`Reintentando ${op.tipo} en celda ${op.celda} de la hoja ${op.hoja} con valor \"${op.valor}\"`);\n  \n  return {\n    id: `Reintento_${op.tipo}_${op.celda}_${Date.now()}_${index}`,\n    method: \"PATCH\",\n    url: `/sites/${siteId}/drives/${driveId}/items/${itemId}/workbook/worksheets/${encodeURIComponent(op.hoja)}/range(address='${op.celda}')`,\n    body: {\n      values: valorFormateado\n    },\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n});\n\n// Crear la solicitud para reintentar las operaciones\nconst requestBody = {\n  requests: solicitudes,\n  _metadata: {\n    accion: \"reintentar\",\n    operaciones: operacionesAReintentar,\n    datoOriginal: datoOriginal,\n    intentos: (datoOriginal._metadata?.intentos || 0) + 1\n  }\n};\n\n// Retornar el request para reintentar las operaciones\nreturn {\n  json: requestBody\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -37792,
        -7664
      ],
      "id": "1a3540e1-de25-49d2-b2da-7865e31a7119",
      "name": "Code Reintentar Inserción1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.microsoft.com/v1.0/$batch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -37552,
        -7552
      ],
      "id": "337c7f4e-fd55-4d7d-8e36-93d2bc9da67b",
      "name": "HTTP Request Reintentar Inserción1",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Código para verificar si la inserción y eliminación fueron exitosas\n// Actualizado para manejar la nueva estructura\nconst input = $input.first().json;\n\n// Verificar que tenemos la estructura esperada en la respuesta\nif (!input || !input.responses || !Array.isArray(input.responses)) {\n  console.log('Estructura de datos de respuesta no válida');\n  return {\n    json: {\n      error: \"RESPUESTA_INVALIDA\",\n      mensaje: \"La estructura de datos de la respuesta no es válida\",\n      exito: false\n    }\n  };\n}\n\n// Si no hay respuestas, devolver error\nif (input.responses.length === 0) {\n  console.log('No se recibieron respuestas del servidor');\n  return {\n    json: {\n      error: \"SIN_RESPUESTAS\",\n      mensaje: \"No se recibieron respuestas del servidor\",\n      exito: false\n    }\n  };\n}\n\n// Analizar las respuestas para determinar a qué operación corresponde cada una\nconst respuestas = input.responses.map(response => {\n  // Extraer información del ID de la respuesta\n  const idPartes = response.id.split('_');\n  const tipoOperacion = idPartes[0].toLowerCase(); // \"reintento\", \"limpiar\", etc.\n  const tipoEntidad = idPartes[1]?.toLowerCase(); // \"insercion\", \"eliminacion\", etc.\n  const celda = idPartes[2] || \"\"; // La celda como I21, K23, etc.\n  \n  // Extraer información de la dirección en la respuesta\n  let direccionRespuesta = \"\";\n  let hojaExcel = \"\";\n  \n  if (response.body && response.body.address) {\n    const direccionCompleta = response.body.address;\n    const partesDireccion = direccionCompleta.split('!');\n    \n    if (partesDireccion.length > 1) {\n      // Quitar las comillas simples del nombre de la hoja\n      hojaExcel = partesDireccion[0].replace(/'/g, '');\n      direccionRespuesta = partesDireccion[1];\n    }\n  }\n  \n  // Obtener el valor de la respuesta\n  const valor = response.body?.values?.[0]?.[0];\n  \n  // Verificar si la operación fue exitosa (código 200-299)\n  const estadoExitoso = response.status >= 200 && response.status < 300;\n  \n  // Verificar si la celda en la respuesta coincide con la esperada\n  const celdaCorrecta = direccionRespuesta === celda;\n  \n  return {\n    id: response.id,\n    tipoOperacion,\n    tipoEntidad,\n    celda,\n    direccionRespuesta,\n    hoja: hojaExcel,\n    valor,\n    estadoExitoso,\n    celdaCorrecta,\n    statusCode: response.status,\n    respuesta: response\n  };\n});\n\n// Separar las respuestas por tipo de operación\nconst respuestasInsercion = respuestas.filter(r => \n  r.tipoEntidad === \"insercion\" || \n  (r.tipoOperacion === \"reintento\" && input._metadata?.operaciones?.[0]?.tipo === \"insercion\")\n);\n\nconst respuestasEliminacion = respuestas.filter(r => \n  r.tipoEntidad === \"eliminacion\" || \n  (r.tipoOperacion === \"reintento\" && input._metadata?.operaciones?.[0]?.tipo === \"eliminacion\")\n);\n\n// Determinar éxito por tipo de operación\nconst insercionExitosa = respuestasInsercion.length > 0 && \n                        respuestasInsercion.every(r => r.estadoExitoso && r.celdaCorrecta);\n\nconst eliminacionExitosa = respuestasEliminacion.length > 0 && \n                          respuestasEliminacion.every(r => r.estadoExitoso && r.celdaCorrecta);\n\n// Determinar éxito global basado en las operaciones presentes\nlet exitoGlobal;\n\nif (respuestasInsercion.length > 0 && respuestasEliminacion.length > 0) {\n  // Si hay ambas operaciones, ambas deben ser exitosas\n  exitoGlobal = insercionExitosa && eliminacionExitosa;\n} else if (respuestasInsercion.length > 0) {\n  // Si solo hay inserción, solo esa debe ser exitosa\n  exitoGlobal = insercionExitosa;\n} else if (respuestasEliminacion.length > 0) {\n  // Si solo hay eliminación, solo esa debe ser exitosa\n  exitoGlobal = eliminacionExitosa;\n} else {\n  // Si no hay operaciones identificables, considerar como no exitoso\n  exitoGlobal = false;\n}\n\n// Obtener la información más relevante para cada tipo de operación\nconst infoInsercion = respuestasInsercion.length > 0 ? respuestasInsercion[0] : null;\nconst infoEliminacion = respuestasEliminacion.length > 0 ? respuestasEliminacion[0] : null;\n\n// Crear el resultado detallado\nconst resultadoDetallado = {\n  exito: exitoGlobal,\n  operaciones: {\n    insercion: infoInsercion ? {\n      exito: infoInsercion.estadoExitoso && infoInsercion.celdaCorrecta,\n      celda: infoInsercion.celda,\n      direccionRespuesta: infoInsercion.direccionRespuesta,\n      hoja: infoInsercion.hoja,\n      valor: infoInsercion.valor,\n      statusCode: infoInsercion.statusCode\n    } : null,\n    eliminacion: infoEliminacion ? {\n      exito: infoEliminacion.estadoExitoso && infoEliminacion.celdaCorrecta,\n      celda: infoEliminacion.celda,\n      direccionRespuesta: infoEliminacion.direccionRespuesta,\n      hoja: infoEliminacion.hoja,\n      valor: infoEliminacion.valor,\n      statusCode: infoEliminacion.statusCode\n    } : null\n  },\n  mensaje: exitoGlobal ? \n    \"Todas las operaciones se completaron exitosamente\" : \n    \"Hubo problemas con una o más operaciones\",\n  respuestasCompletas: respuestas\n};\n\n// Crear el resultado compatible con el formato anterior\nconst resultadoCompatible = {\n  exito: exitoGlobal,\n  // Usar la primera respuesta para compatibilidad\n  celdaOriginal: infoInsercion?.celda || infoEliminacion?.celda || \"\",\n  celdaInsertada: infoInsercion?.direccionRespuesta || infoEliminacion?.direccionRespuesta || \"\",\n  valorInsertado: infoInsercion?.valor || infoEliminacion?.valor || \"\",\n  statusCode: infoInsercion?.statusCode || infoEliminacion?.statusCode || 0,\n  requestId: infoInsercion?.id || infoEliminacion?.id || \"\",\n  indice: infoInsercion?.celda || infoEliminacion?.celda || \"\",\n  celdasDiferentes: (infoInsercion && infoInsercion.celda !== infoInsercion.direccionRespuesta) ||\n                   (infoEliminacion && infoEliminacion.celda !== infoEliminacion.direccionRespuesta),\n  falloEstado: !exitoGlobal,\n  // Información adicional para la versión mejorada\n  resultadoDetallado: resultadoDetallado\n};\n\n// Registrar el resultado en consola\nif (exitoGlobal) {\n  console.log(\"Operaciones completadas exitosamente:\");\n  if (infoInsercion) {\n    console.log(`- Inserción en hoja ${infoInsercion.hoja}, celda ${infoInsercion.celda}, valor: \"${infoInsercion.valor}\"`);\n  }\n  if (infoEliminacion) {\n    console.log(`- Eliminación en hoja ${infoEliminacion.hoja}, celda ${infoEliminacion.celda}`);\n  }\n} else {\n  console.log(\"Problemas detectados en las operaciones:\");\n  if (infoInsercion && (!infoInsercion.estadoExitoso || !infoInsercion.celdaCorrecta)) {\n    console.log(`- Fallo en inserción: celda=${infoInsercion.celda}, dirección respuesta=${infoInsercion.direccionRespuesta}, status=${infoInsercion.statusCode}`);\n  }\n  if (infoEliminacion && (!infoEliminacion.estadoExitoso || !infoEliminacion.celdaCorrecta)) {\n    console.log(`- Fallo en eliminación: celda=${infoEliminacion.celda}, dirección respuesta=${infoEliminacion.direccionRespuesta}, status=${infoEliminacion.statusCode}`);\n  }\n}\n\n// Retornar el resultado\nreturn {\n  json: resultadoCompatible\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -37328,
        -7552
      ],
      "id": "7d0467fb-4258-4020-844f-eaddf21147e2",
      "name": "Code Volver a validar Inserción1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f7205e4e-147c-4e77-8fa8-08d082980b48",
              "leftValue": "={{ $json.exito }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -37104,
        -7552
      ],
      "id": "3a89967a-e0df-403a-b8eb-e49c8c09879e",
      "name": "If Verificar Inserción "
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -38208,
        -7552
      ],
      "id": "dae993b0-4867-4dcb-bdb1-70dc1dbfb1a4",
      "name": "Wait4",
      "webhookId": "a4bbf2b1-ea0c-4b02-af2c-64b29f2bdb5c"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -36800,
        -7376
      ],
      "id": "72297189-8c20-43ae-814c-14efe74439c1",
      "name": "Wait5",
      "webhookId": "9d944db7-9c4f-439e-9990-d9937f2fb18e"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -36368,
        -7008
      ],
      "id": "ee4a87ea-53bc-4e07-96c4-59f929ee4ba9",
      "name": "OpenAI Chat Model15",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=Eres un asistente de un sistema de agendamiento de citas para la entrega de mercancía en bodega. Debes notificar al cliente que ha ocurrido un error en el sistema durante el proceso de inserción de la cita.\n\nGenera un mensaje directo aplicando estos principios de UX para WhatsApp:\n\n**FORMATO Y ESTRUCTURA:**\n1. Usa *negritas* para información crítica como tiempo límite y acciones urgentes\n2. Usa emojis estratégicos: 🚨 (urgente), ⚠️ (error), ⏰ (tiempo límite), 📞 (contacto), 🛠️ (técnico)\n3. Estructura la información de forma jerárquica y visual\n4. Destaca el tiempo límite de *5 minutos* con formato apropiado\n\n**CONTENIDO REQUERIDO:**\n1. 🚨 Comunica claramente que ocurrió un *error técnico* al registrar la cita\n2. ⏰ Indica urgentemente que se comunique con el área de bodega en los próximos *5 minutos*\n3. ⚠️ Menciona el riesgo de *perder la franja horaria* por alta demanda de muelles\n4. 🛠️ Aclara que es una situación *poco común* por inconveniente técnico\n5. 🙏 Pide disculpas y agradece la comprensión\n\n**TONO:** Urgente pero profesional, enfatizando acción inmediata para mantener la franja horaria.\n\n**EJEMPLO DE ESTRUCTURA ESPERADA:**\n🚨 *Error técnico en el sistema*\n\n⚠️ No pudimos registrar tu cita debido a un *inconveniente técnico* en el sistema.\n\n⏰ *URGENTE:* Comunícate con el área de bodega en los próximos *5 minutos* para que puedan agendar tu cita manualmente.\n\n🚨 Si no estableces contacto en ese tiempo, podrías *perder la franja horaria* seleccionada...\n\n🙏 Disculpas por los inconvenientes...\n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -36288,
        -7232
      ],
      "id": "1e99015a-ef21-4afc-82af-988535b13743",
      "name": "Basic LLM Notificar No Disponibilidad3",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('Basic LLM Notificar No Disponibilidad3').item.json.text.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -35888,
        -7056
      ],
      "id": "cf55667c-cc81-4908-aa93-b7dc93d2889c",
      "name": "Validación de longitud de caracteres10"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Basic LLM Notificar No Disponibilidad3').item.json.text }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Basic LLM Notificar No Disponibilidad3').item.json.text.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -35584,
        -7024
      ],
      "id": "e14a27cc-a136-43db-a45c-e3e441035cdb",
      "name": "Organiza variables del mensaje10"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -35408,
        -7248
      ],
      "id": "04b9991c-3246-4bcd-8e8c-32844fa35a56",
      "name": "No Operation, do nothing14"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -35584,
        -7248
      ],
      "id": "446a984a-137a-4723-aff0-a9bc81a298c8",
      "name": "HTTP Request Enviar Mensaje por WhatsApp13"
    },
    {
      "parameters": {
        "jsCode": "/*\n===========================================================\n  Nodo Code - VALIDAR INSERCIONES EN EXCEL (n8n)\n  • Analiza la salida del “Loop Over Uno a Uno”.\n  • Agrupa los ítems por franja (campo `indice` si existe;\n    de lo contrario, cada bloque de 5 ítems forma una franja).\n  • Verifica que cada inserción tenga:\n        exito === true\n        statusCode === 200\n        falloEstado === false\n  • Devuelve un único objeto JSON con:\n        – Resumen global.\n        – Detalle por franja (éxitos / fallos y celdas con error).\n===========================================================\n*/\n\n// 1) Obtener todos los ítems que llegan al nodo\nconst items = $input.all();\n\n// 2) Función auxiliar para determinar el identificador de la franja\nfunction obtenerIdFranja(item, idx) {\n  // Si existe 'indice', úsalo; de lo contrario agrupa cada 5 ítems\n  if (item.json && item.json.indice !== undefined && item.json.indice !== null) {\n    return String(item.json.indice).trim();\n  }\n  // +1 para que las franjas queden 1-basadas\n  return String(Math.floor(idx / 5) + 1);\n}\n\n// 3) Agrupar ítems por franja\nconst franjas = {};\nitems.forEach((item, idx) => {\n  const idFranja = obtenerIdFranja(item, idx);\n  if (!franjas[idFranja]) {\n    franjas[idFranja] = { id: idFranja, items: [] };\n  }\n  franjas[idFranja].items.push(item.json);\n});\n\n// 4) Analizar cada franja y construir el detalle\nconst detallesPorFranja = Object.values(franjas).map(franja => {\n  const totalOps   = franja.items.length;\n  const exitosas   = franja.items.filter(i =>\n    i.exito === true &&\n    i.statusCode === 200 &&\n    i.falloEstado === false\n  ).length;\n\n  const fallidas   = totalOps - exitosas;\n  const exitoTotal = fallidas === 0;\n\n  // Celdas con error para un diagnóstico claro\n  const celdasFallidas = franja.items\n    .filter(i => !(i.exito && i.statusCode === 200 && !i.falloEstado))\n    .map(i => ({\n      celdaOriginal   : i.celdaOriginal,\n      celdaInsertada  : i.celdaInsertada,\n      statusCode      : i.statusCode,\n      falloEstado     : i.falloEstado,\n      celdasDiferentes: i.celdasDiferentes,\n      mensaje         : 'Inserción fallida'\n    }));\n\n  return {\n    idFranja                : franja.id,\n    exitoFranja             : exitoTotal,\n    operacionesTotales      : totalOps,\n    operacionesExitosas     : exitosas,\n    operacionesFallidas     : fallidas,\n    porcentajeExitosas      : ((exitosas / totalOps) * 100).toFixed(2) + '%',\n    celdasFallidas\n  };\n});\n\n// 5) Resumen global\nconst operacionesTotales   = items.length;\nconst operacionesExitosas  = detallesPorFranja.reduce((sum, f) => sum + f.operacionesExitosas, 0);\nconst operacionesFallidas  = operacionesTotales - operacionesExitosas;\n\nconst franjasTotales   = detallesPorFranja.length;\nconst franjasExitosas  = detallesPorFranja.filter(f => f.exitoFranja).length;\nconst franjasFallidas  = franjasTotales - franjasExitosas;\n\n\nconst resumen = {\n  estadoGeneral              : franjasFallidas === 0 ? 'ÉXITO_COMPLETO' : 'ÉXITO_PARCIAL',\n  franjasTotales,\n  franjasExitosas,\n  franjasFallidas,\n  porcentajeFranjasExitosas  : ((franjasExitosas / franjasTotales) * 100).toFixed(2) + '%',\n  operacionesTotales,\n  operacionesExitosas,\n  operacionesFallidas,\n  porcentajeOperacionesExitosas : ((operacionesExitosas / operacionesTotales) * 100).toFixed(2) + '%',\n  detallesPorFranja\n};\n\n// 6) Devolver un único ítem con el resumen\nreturn [\n  {\n    json: resumen\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39408,
        -7888
      ],
      "id": "6158e0c1-c9ab-4e42-bc22-d5f58f4815b7",
      "name": "Code Validar inserciones1"
    },
    {
      "parameters": {
        "jsCode": "// 1) Leer chat_id una sola vez\nconst chatId = $node[\"Organiza el Mensaje\"].json.infoMensaje.chat_id;\n\n// 2) Tomamos los datos de informacionCita una sola vez\nconst cita = $input.first().json.informacionCita || {};\nconst historialMensajes = $('Unificación y consistencia de datos').first().json.infoMensaje.historialMensajes;\n\n// Función para convertir fechas en formato \"06 de mayo de 2025\" a \"YYYY-MM-DD HH:mm:ss\"\nfunction convertirFecha(fechaTexto) {\n  const meses = {\n    enero: '01', febrero: '02', marzo: '03', abril: '04', mayo: '05',\n    junio: '06', julio: '07', agosto: '08', septiembre: '09',\n    octubre: '10', noviembre: '11', diciembre: '12'\n  };\n\n  // Dividir la fecha y mapear el mes\n  const [dia, de, mes, deNuevo, anio] = fechaTexto.split(' ');\n  const mesNumerico = meses[mes.toLowerCase()]; // Convertir el mes a número\n  return `${anio}-${mesNumerico}-${dia.padStart(2, '0')} 00:00:00`; // Formato DATETIME\n}\n\n// Convertimos la fecha aquí\nconst fechaCitaConvertida = convertirFecha(cita.fecha);\n\n// 3) Retornamos un solo objeto con todos los datos necesarios\nreturn {\n  json: {\n    chat_id: chatId,\n    proveedor: cita.proveedor,\n    orden_compra: cita.ordenCompra,\n    peso: cita.peso,\n    unidades: cita.unidades,\n    categoria: cita.categoria,\n    muelle: cita.muelle,\n    fecha_cita: fechaCitaConvertida, // Fecha ya convertida\n    hora_inicio: cita.horaInicio,\n    hora_fin: cita.horaFin,\n    chat_historial: historialMensajes,\n    // Incluimos cualquier otro dato que necesites\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39408,
        -8032
      ],
      "id": "1870a42f-ef7d-490e-98df-ea035ee7c636",
      "name": "Code Datos Insert Cita1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8c501d95-bdf3-4635-a037-224926c2528d",
              "leftValue": "={{ $json.estadoGeneral }}",
              "rightValue": "ÉXITO_COMPLETO",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -39072,
        -7888
      ],
      "id": "74728961-dafc-438e-a2c0-8c722a17f13a",
      "name": "If Validar inserciones1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -38768,
        -8016
      ],
      "id": "581491e2-7584-40d1-b19d-60ff0c4fa25d",
      "name": "Merge4"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -35920,
        -7568
      ],
      "id": "8cb43829-aa20-4f17-988a-30f75b54c339",
      "name": "Merge5"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO CitasRecepcion\n(\n    chat_id,\n    nombre,              \n    orden_compra,\n    peso,\n    unidades,\n    horas_entrega,\n    categoria,\n    muelle,\n    fecha_cita,\n    hora_inicio,\n    hora_fin,\n    estado,\n    fecha_creacion,\n    fecha_modificacion,\n    chat_historial,\n    chat_historial_datos\n)\n/* ─── AQUÍ ─── */\nOUTPUT INSERTED.id          --  ←  devolverá el IDENTITY de la fila recién insertada\nVALUES\n(\n    '{{ $('Code Datos Insert Cita1').item.json.chat_id }}',\n    '{{ $('Code Datos Insert Cita1').item.json.proveedor }}',\n    '{{ $('Code Datos Insert Cita1').item.json.orden_compra }}',\n     {{ $('Code Datos Insert Cita1').item.json.peso }},\n     {{ $('Code Datos Insert Cita1').item.json.unidades }},\n     {{ $json.horas_entrega }},\n    '{{ $('Code Datos Insert Cita1').item.json.categoria }}',\n    '{{ $('Code Datos Insert Cita1').item.json.muelle }}',\n    '{{ $('Code Datos Insert Cita1').item.json.fecha_cita }}',\n    '{{ $('Code Datos Insert Cita1').item.json.hora_inicio }}',\n    '{{ $('Code Datos Insert Cita1').item.json.hora_fin }}',   \n      'PROGRAMADA',                   \n    (SYSDATETIMEOFFSET() AT TIME ZONE 'SA Pacific Standard Time'), \n    NULL,                            \n    '{{ $items(\"Code Datos Insert Cita1\")\n        .map(i => i.json.chat_historial)\n        .join(\"\\n\")\n        .replace(/'/g,\"''\") }}',\n    'SIN DATOS'\n);\n\n"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -36480,
        -7808
      ],
      "id": "ea660f3c-486c-4963-bc68-96f0d2e3c8b0",
      "name": "Microsoft SQL Insertar Cita1",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -35600,
        -7472
      ],
      "id": "0264bd37-699a-43a1-a30a-ffbd0f31dd1b",
      "name": "OpenAI Chat Model16",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('Basic LLM Notificar Cita Exitosa1').item.json.text.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -35072,
        -7504
      ],
      "id": "fcfcce3e-99e0-499d-bd33-4b17571ae6e9",
      "name": "Validación de longitud de caracteres11"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Basic LLM Notificar Cita Exitosa1').item.json.text }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Basic LLM Notificar Cita Exitosa1').item.json.text.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -34768,
        -7392
      ],
      "id": "c363b378-1bf7-4da0-893b-d05377e154df",
      "name": "Organiza variables del mensaje11"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -34608,
        -7616
      ],
      "id": "6a5f69df-93ca-424a-b2a0-5eb4ad017d38",
      "name": "No Operation, do nothing15"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -34784,
        -7616
      ],
      "id": "d7ee66d2-3eb7-4ca1-86e0-1ce731c5e151",
      "name": "HTTP Request Enviar Mensaje por WhatsApp14"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=# Rol y Objetivo\nEres el asistente virtual de **Konfíe Logistics** especializado en comunicación WhatsApp profesional. Tu objetivo es notificar al proveedor que su cita se **reprogramó con éxito**, utilizando formato WhatsApp con excelente UX.\n\n# Datos disponibles  \n- idCita           = {{ $(\"Microsoft SQL Insertar Cita1\").first().json.id }}  \n- fechaCita        = {{ $(\"Code Datos Insert Cita1\").first().json.fecha_cita }}  \n- horaInicio       = {{ $(\"Code Datos Insert Cita1\").first().json.hora_inicio }}  \n- horaFin          = {{ $(\"Code Datos Insert Cita1\").first().json.hora_fin }}  \n- muelle           = {{ $(\"Code Datos Insert Cita1\").first().json.muelle }}  \n- ordenCompra      = {{ $(\"Code Datos Insert Cita1\").first().json.orden_compra }}  \n- categoria        = {{ $(\"Code Datos Insert Cita1\").first().json.categoria }}  \n- pesoKg           = {{ $(\"Code Datos Insert Cita1\").first().json.peso }}  \n- unidades         = {{ $(\"Code Datos Insert Cita1\").first().json.unidades }}\n\n> Ajusta los nombres de nodos/propiedades si tu flujo usa otros.\n\n# Instrucciones de redacción\n1. Mantén un tono profesional, cordial y positivo.  \n2. Empieza con una breve expresión de entusiasmo por la **reprogramación exitosa** (p. ej.: “¡Cita reprogramada con éxito!” o “¡Reprogramación confirmada!”).  \n3. Presenta los **nuevos detalles** de la cita en una lista con viñetas y emojis adecuados:  \n   • 🆔 **Número de cita:** antepón 🔖 → 🔖 {{ $(\"Microsoft SQL Insertar Cita1\").first().json.id }}   \n   • 📅 **Fecha:** {{ $(\"Code Datos Insert Cita1\").first().json.fecha_cita.split(\" \")[0] }}  \n   • ⏰ **Horario:** {{ $(\"Code Datos Insert Cita1\").first().json.hora_inicio }} – {{ $(\"Code Datos Insert Cita1\").first().json.hora_fin }}  \n   • 🚩 **Muelle:** {{ $(\"Code Datos Insert Cita1\").first().json.muelle }}  \n   • 🏷️ **O/C:** {{ $(\"Code Datos Insert Cita1\").first().json.orden_compra }}  \n   • 📦 **Categoría:** {{ $(\"Code Datos Insert Cita1\").first().json.categoria }}  \n   • ⚖️ **Peso:** {{ $(\"Code Datos Insert Cita1\").first().json.peso }} kg  \n   • 📦 **Unidades:** {{ $(\"Code Datos Insert Cita1\").first().json.unidades }}  \n4. Reitera el número de cita con el emoji 🔖 y aclara que con ese número el proveedor podrá **volver a modificar o cancelar** la cita si lo necesita.  \n5. Explica claramente la política: “Las modificaciones o cancelaciones deben solicitarse **hasta un día hábil antes** y **antes de las 4:30 p. m.**; después de ese plazo no podremos realizar cambios.”  \n6. Cierra agradeciendo su colaboración y confirmando que estaremos atentos a su llegada.  \n7. Devuelve **solo** el mensaje final, sin encabezados ni explicaciones adicionales.\n\n# Salida esperada (ejemplo de estilo)\n\n🔄 *¡Cita reprogramada con éxito!* 🎉\n\n🆔 *Número de cita:* ```12345```\n\n📋 *Nuevos detalles:*\n📅 *Fecha:* 10 de junio de 2025\n⏰ *Horario:* 14:00 - 16:00\n🚩 *Muelle:* 3\n🏷️ *Orden de Compra:* OC-98765\n📦 *Categoría:* Electrodomésticos\n⚖️ *Peso:* 500 kg\n📊 *Unidades:* 800\n\n🔑 *Importante:* Tu número de cita ```12345``` sigue siendo el mismo para futuras gestiones.\n\n⚠️ *Política de cambios:*\nPuedes modificar o cancelar hasta *un día hábil antes* y antes de las *4:30 p.m.*\n\n🙏 ¡Gracias por tu confianza! Te esperamos en la nueva fecha.\n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -35504,
        -7648
      ],
      "id": "d0e25836-ad5f-4ee6-bf53-a53d4956a5e9",
      "name": "Basic LLM Notificar Cita Exitosa1",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "BEGIN TRANSACTION;\n\nDELETE FROM MensajesWhatsApp\nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n   OR (chat_id = 'agenteAI'\n       AND message_id IN (\n           SELECT message_id \n           FROM MensajesWhatsApp\n           WHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n       )\n   );\n\nDELETE FROM FranjasDisponiblesTemp \nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}';\n\n-- Resetear estado conversacional a INICIAL después de reprogramación exitosa\nUPDATE EstadoConversacional \nSET estado_actual = 'INICIAL', \n    contexto_proceso = '{\"descripcion\": \"Cita reprogramada exitosamente, conversación reiniciada\", \"ultima_accion\": \"cita_reprogramada\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n    contador_fuera_contexto = 0,\n    ultimo_mensaje_fuera_contexto = NULL,\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}';\n\n-- Si no existe el registro, crear uno en estado INICIAL\nIF @@ROWCOUNT = 0\nBEGIN\n    INSERT INTO EstadoConversacional (chat_id, estado_actual, contexto_proceso, fecha_creacion, fecha_actualizacion)\n    VALUES (\n        '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}', \n        'INICIAL', \n        '{\"descripcion\": \"Cita reprogramada exitosamente, conversación reiniciada\", \"ultima_accion\": \"cita_reprogramada\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n        GETDATE(),\n        GETDATE()\n    );\nEND\n\nCOMMIT;\n"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -36480,
        -7344
      ],
      "id": "e2fd2e1c-a55f-4f04-9852-8bef34be40fc",
      "name": "Microsoft SQL Eliminar Mensajes4",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "/*  ⬇⬇  PEGAR TODO ESTO EN EL CAMPO “Query” DEL NODO SQL  ⬇⬇  */\n\n/* ───────────────────────────\n   Parámetro recibido de n8n\n   ───────────────────────────\n   Asume que en la sección “Query Parameters” del nodo tienes\n   un parámetro llamado  id   con el valor  {{ $json.id }}\n   (o la propiedad que traiga tu flujo).\n*/\nDECLARE @id           INT = {{ $('Code Validacion de Cita en cronograma para reprogramación').first().json.citaAntigua.id }};          -- parámetro que llega de n8n\nDECLARE @nowBogota    DATETIME;\n\n/* Obtener la fecha/hora actual en zona horaria de Bogotá           */\n/* (SQL Server 2016+ ‑ requiere soporte AT TIME ZONE)                */\nSET @nowBogota =\n    CONVERT(DATETIME, SYSDATETIMEOFFSET() AT TIME ZONE 'SA Pacific Standard Time');\n\n/* ─────────────  UPDATE  ───────────── */\nUPDATE  dbo.CitasRecepcion\nSET     estado            = N'REPROGRAMADA',\n        fecha_modificacion = @nowBogota\nWHERE   id = @id;\n\n/* Devuelve la fila modificada (útil para depurar en n8n) */\nSELECT  *\nFROM    dbo.CitasRecepcion\nWHERE   id = @id;\n"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -36816,
        -7824
      ],
      "id": "f98606a0-60f1-4ad9-a08a-8cb1ca3b32b1",
      "name": "Microsoft SQLUpdate Cita Anterior",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -44912,
        -3424
      ],
      "id": "6959cf1c-4b39-486f-ad4c-4277983a0dfa",
      "name": "OpenAI Chat Model17",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\"idCita\": \"\",\n\"ordenCompra\": \"\",\n\"camposFaltantes\": []\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -44752,
        -3424
      ],
      "id": "8dd869a5-27cc-4ac6-9f2f-24b02c0231f6",
      "name": "Structured Output Parser5"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=# Extracción de datos para cancelación de citas\n\nAnaliza el historial completo de mensajes y el mensaje actual para extraer los datos necesarios para cancelar una cita existente. **Tu única responsabilidad es extraer datos, no validarlos ni tomar decisiones.**\n\n## Datos a extraer\n- ID de la cita (por ejemplo, \"Cita 12345\", \"Número 12345\", etc.)\n- Número de orden de compra asociado a la cita\n\n## Fuentes de datos a analizar\n- Mensaje actual: {{ $('Unificación y consistencia de datos').first().json.infoMensaje.mensajeActual }}\n- Historial de mensajes: {{ $node[\"Unificación y consistencia de datos\"].json[\"infoMensaje\"][\"historialMensajes\"] }}\n\n## Instrucciones específicas\n1. Buscar PRIMERO el ID de la cita en formato numérico en CUALQUIER mensaje previo\n2. Buscar el número de orden de compra en CUALQUIER mensaje previo\n3. Considera expresiones como \"cancelar cita\", \"anular cita\", \"no puedo asistir\", etc.\n4. Si no encuentras alguno de los datos requeridos, márcalo como faltante\n\n## Estructura de salida JSON\n{\n  \"idCita\": string,          // ID de la cita\n  \"ordenCompra\": string,     // Número de orden de compra\n  \"camposFaltantes\": array   // Lista de campos que no pudieron ser extraídos\n}",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -44832,
        -3632
      ],
      "id": "afbf37f9-74a1-4940-a29e-46770bdb42c9",
      "name": "Basic LLM Extracción Datos Cancelar Cita"
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos extraídos\nconst datosExtraidos = $('Basic LLM Extracción Datos Cancelar Cita').first().json.output;\n\n// Estructura de respuesta\nconst respuesta = {\n  todoCorrecto: false,\n  idCita: datosExtraidos.idCita || \"\",\n  ordenCompra: datosExtraidos.ordenCompra || \"\",\n  camposFaltantes: datosExtraidos.camposFaltantes || [],\n  mensajeSistema: \"\"\n};\n\n// Verificar si hay campos faltantes\nif (respuesta.camposFaltantes && respuesta.camposFaltantes.length > 0) {\n  respuesta.todoCorrecto = false;\n  respuesta.mensajeSistema = generarMensajeCamposFaltantes(respuesta.camposFaltantes);\n} else {\n  respuesta.todoCorrecto = true;\n  respuesta.mensajeSistema = `Entendido. Estás solicitando cancelar la cita 🔖 ${respuesta.idCita} con orden de compra ${respuesta.ordenCompra}. Verificaré si es posible realizar la cancelación.`;\n}\n\nfunction generarMensajeCamposFaltantes(camposFaltantes) {\n  let mensaje = \"Para poder cancelar tu cita, necesito \";\n  \n  if (camposFaltantes.includes(\"idCita\")) {\n    mensaje += \"el número de cita 🔖 que aparece en tu confirmación, \";\n  }\n  \n  if (camposFaltantes.includes(\"ordenCompra\")) {\n    mensaje += \"el número de orden de compra para verificación, \";\n  }\n  \n  mensaje = mensaje.slice(0, -2) + \". \";\n  mensaje += \"Por ejemplo: 'Quiero cancelar mi cita 12345 con orden de compra ARGM47896'.\";\n  \n  return mensaje;\n}\n\nreturn respuesta;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -44464,
        -3632
      ],
      "id": "69c9761f-fabe-42e3-8a26-09e1e0f3c398",
      "name": "Code Validación datos para cancelación de citas"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2b68e9c6-bb33-49e0-b323-c6ed61e3d98e",
              "leftValue": "={{ $json.todoCorrecto }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -44256,
        -3632
      ],
      "id": "4f6c9e8f-8799-40d7-b797-3477b1d006c7",
      "name": "If Validar si los datos están completos"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @Id          INT          = {{ $json.idCita }};\nDECLARE @OrdenCompra VARCHAR(50)  = '{{ $json.ordenCompra }}';\n\nIF EXISTS (SELECT 1\n           FROM   CitasRecepcion\n           WHERE  id           = @Id\n             AND  orden_compra = @OrdenCompra\n             AND  estado       = 'PROGRAMADA')\nBEGIN\n    SELECT *\n    FROM   CitasRecepcion\n    WHERE  id           = @Id\n      AND  orden_compra = @OrdenCompra\n      AND  estado       = 'PROGRAMADA';\nEND\nELSE\nBEGIN\n    -- Código y severidad personalizados\n    THROW 50001, 'La cita no se encuentra en estado PROGRAMADA o los datos no coinciden.', 16;\nEND\n"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -43824,
        -3808
      ],
      "id": "97b5272a-21f3-4264-9b6b-3e2a618d08dd",
      "name": "Microsoft SQL Obtener Cita para Cancelar",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('If Validar si los datos están completos').first().json.mensajeSistema.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -43232,
        -2928
      ],
      "id": "fc212fa3-03c0-4f37-b67a-17694ddd79d8",
      "name": "Validación de longitud de caracteres12"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('If Validar si los datos están completos').first().json.mensajeSistema }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('If Validar si los datos están completos').first().json.mensajeSistema.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -42928,
        -2848
      ],
      "id": "97686b93-c7e8-4d57-a48c-3be58b1d9eb2",
      "name": "Organiza variables del mensaje12"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -42768,
        -3072
      ],
      "id": "5c9cf7b3-b0d4-4d25-a7ce-47b5b3a00aeb",
      "name": "No Operation, do nothing16"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -42944,
        -3072
      ],
      "id": "40a7ddd8-ab9c-40eb-a1f0-315fe9a09b8f",
      "name": "HTTP Request Enviar Mensaje por WhatsApp15"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1cc112df-9a2d-4ad5-acf5-74b0fbadc479",
              "leftValue": "={{ $json.error === undefined }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -43616,
        -3808
      ],
      "id": "bf0fd8c9-9757-4467-9d19-e9ac7cbe2aa3",
      "name": "If cita para cancelar"
    },
    {
      "parameters": {
        "jsCode": "// Generar respuesta de error para cita no programada\nfor (const item of $input.all()) {\n  item.json = {\n    \"error\": true,\n    \"mensaje\": \"🚨 *Error de validación* ⚠️\\n\\n\" +\n              \"La cita que intentas cancelar ya fue *cancelada* o *reprogramada* anteriormente.\\n\\n\" +\n              \"📋 *Verificaciones necesarias:*\\n\" +\n              \"• 🔍 *Número de cita* correcto\\n\" +\n              \"• 🏷️ *Orden de compra* correcta\\n\" +\n              \"• ✅ Estado de la cita: *PROGRAMADA*\\n\\n\" +\n              \"🔄 *Acción requerida:*\\n\" +\n              \"Por temas de *trazabilidad*, esta conversación será eliminada.\\n\\n\" +\n              \"👉 Inicia un *nuevo chat* con los datos correctos para proceder.\",\n    \"codigo_error\": \"CITA_NO_PROGRAMADA\",\n    \"accion_requerida\": \"REINICIAR_CONVERSACION\",\n    \"timestamp\": new Date().toISOString()\n  };\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -43328,
        -3632
      ],
      "id": "111bbd9e-f3de-4871-a2a3-295b8b99c591",
      "name": "Code respuesta cita no programada"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('Code respuesta cita no programada').first().json.mensaje.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -42976,
        -3392
      ],
      "id": "d42f9125-d962-443c-9cb3-ee9fba280a07",
      "name": "Validación de longitud de caracteres13"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Code respuesta cita no programada').first().json.mensaje }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Code respuesta cita no programada').first().json.mensaje.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -42688,
        -3296
      ],
      "id": "994e9ec4-ac0f-428a-9b5b-668a7c5f9cc5",
      "name": "Organiza variables del mensaje13"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -42512,
        -3536
      ],
      "id": "e1d9f10e-bf20-4fc4-a44e-727ab4740037",
      "name": "No Operation, do nothing17"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -42688,
        -3536
      ],
      "id": "ece64d69-46f2-4155-88d8-0211bf158c66",
      "name": "HTTP Request Enviar Mensaje por WhatsApp16"
    },
    {
      "parameters": {
        "url": "https://graph.microsoft.com/v1.0/sites/a592f886-4560-4e62-9646-1eee7add7abe/drives/b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8/items/01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME/content",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "ExcelMallaRecibido2025"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -43184,
        -4336
      ],
      "id": "ea6cc066-7433-4945-9663-c4121171118f",
      "name": "HTTP Request MALLA DE RECIBO 3",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "ExcelMallaRecibido2025",
        "options": {
          "sheetName": "={{ $('Unificación y consistencia de datos').item.json.hojaSeleccionada }}"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -42928,
        -4448
      ],
      "id": "347c7a87-8896-4a25-a1f3-dfff6f41085c",
      "name": "Extract MALLA DE RECIBO 3"
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos del Excel\nconst excelData = $input.all();\nconst hojaSeleccionada = $('Unificación y consistencia de datos').first().json.hojaSeleccionada;\n\n// Obtener hora local en Bogotá\nconst ahora = new Date(new Date().toLocaleString(\"en-US\", { timeZone: \"America/Bogota\" }));\nconst diaSemanaActual = ahora.getDay(); // 0=domingo, 1=lunes, ..., 5=viernes\nconst horaActual = ahora.getHours();\nconst minutosActual = ahora.getMinutes();\n// Determinar si es después de las 16:30\nconst pasoLimiteDia = horaActual > 16 || (horaActual === 16 && minutosActual >= 30);\n\n// Definir estructura de la semana y los días\nconst diasSemana = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes'];\n\n// Mapeo para saber qué días incluir si hoy es x día y pasó el límite\n/**\n * Dado el día de la semana actual (0=domingo ... 6=sábado),\n * devuelve qué días de la semana actual deben incluirse según si pasó el límite.\n */\nfunction diasValidosSemanaActual(diaSemanaActual, pasoLimite) {\n  const mapa = {\n    1: ['martes', 'miércoles', 'jueves', 'viernes'],   // lunes\n    2: ['miércoles', 'jueves', 'viernes'],             // martes\n    3: ['jueves', 'viernes'],                          // miércoles\n    4: ['viernes'],                                     // jueves\n    5: []                                               // viernes (muy tarde para sábado)\n  };\n  if (diaSemanaActual < 1 || diaSemanaActual > 5) {\n    return []; // sábado o domingo no se agendan en semana actual\n  }\n  if (!pasoLimite) {\n    // aún está antes de las 4:30 p.m., se puede incluir el día siguiente\n    const siguiente = diasSemana[diaSemanaActual];\n    return [siguiente, ...mapa[diaSemanaActual]];\n  }\n  return mapa[diaSemanaActual];\n}\n\n// Objeto para almacenar la malla estructurada\nconst mallaEstructurada = {\n  titulo: \"\",\n  año: \"\",\n  semana: \"\",\n  rangoDias: \"\",\n  franjas: [],\n  dias: {}\n};\n\n// Tabla de meses y días. Ajusta si necesitas contemplar bisiestos, etc.\nconst meses = {\n  \"enero\": 1,\n  \"febrero\": 2,\n  \"marzo\": 3,\n  \"abril\": 4,\n  \"mayo\": 5,\n  \"junio\": 6,\n  \"julio\": 7,\n  \"agosto\": 8,\n  \"septiembre\": 9,\n  \"octubre\": 10,\n  \"noviembre\": 11,\n  \"diciembre\": 12\n};\n\nconst nombreMes = {\n  1: \"enero\",\n  2: \"febrero\",\n  3: \"marzo\",\n  4: \"abril\",\n  5: \"mayo\",\n  6: \"junio\",\n  7: \"julio\",\n  8: \"agosto\",\n  9: \"septiembre\",\n  10: \"octubre\",\n  11: \"noviembre\",\n  12: \"diciembre\"\n};\n\n/**\n * Función para determinar si un año es bisiesto\n * Un año es bisiesto si es divisible por 4, excepto aquellos divisibles por 100 \n * que no son divisibles por 400\n */\nfunction esBisiesto(year) {\n  return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n}\n\n/**\n * Función para obtener el número de días en un mes, considerando años bisiestos\n */\nfunction getDiasMes(mes, año) {\n  const diasPorMes = {\n    1: 31, // enero\n    2: esBisiesto(año) ? 29 : 28, // febrero - ajustado para año bisiesto\n    3: 31, // marzo\n    4: 30, // abril\n    5: 31, // mayo\n    6: 30, // junio\n    7: 31, // julio\n    8: 31, // agosto\n    9: 30, // septiembre\n    10: 31, // octubre\n    11: 30, // noviembre\n    12: 31  // diciembre\n  };\n  \n  return diasPorMes[mes];\n}\n\n/**\n * Función para eliminar acentos y pasar a minúsculas (para buscar palabras clave sin importar tildes ni mayúsculas).\n */\nfunction normalizarTexto(texto) {\n  if (typeof texto !== 'string') return \"\";\n  // Normaliza (NFD) y elimina diacríticos, luego pasa a minúsculas.\n  return texto\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\") // quita acentos\n    .toLowerCase();\n}\n\n/**\n * Dada la información de proveedor, ordenCompra, peso, categoría y unidades,\n * revisa si existe la palabra 'fuera de servicio', 'cancelado' o 'reagendado'\n * en cualquiera de esos campos. De ser así, retorna ese estado especial;\n * de lo contrario, retorna 'ocupado'.\n * \n * Se ignoran mayúsculas, minúsculas y tildes.\n */\nfunction determinarEstadoOcupado(proveedor, ordenCompra, peso, categoria, unidades) {\n  const conjunto = `${proveedor} ${ordenCompra} ${peso} ${categoria} ${unidades}`;\n  const texto = normalizarTexto(conjunto);\n\n  if (texto.includes(\"fuera de servicio\")) {\n    return \"fuera de servicio\";\n  }\n  if (texto.includes(\"cancelado\")) {\n    return \"cancelado\";\n  }\n  if (texto.includes(\"reagendado\")) {\n    return \"reagendado\";\n  }\n  return \"ocupado\";  \n}\n\n// -------------------------------------------------------------\n// 1) PROCESAR DATOS (Cabecera, Horas, Muelles, etc.)\n// -------------------------------------------------------------\nfunction procesarDatos(excelData) {\n  const datos = excelData.map(item => item.json);\n  \n  // A) Cabecera (Título, Año, Rango)\n  datos.forEach((dato, index) => {\n    // Buscar título\n    if (dato.__EMPTY_2 === \"MALLA DE RECIBO CEDI KONFIE IA\") {\n      mallaEstructurada.titulo = dato.__EMPTY_2;\n      \n      // En la siguiente fila puede estar año, semana, rango\n      if (index + 1 < datos.length) {\n        const datoSiguiente = datos[index + 1];\n        if (datoSiguiente) {\n          // Año\n          if (datoSiguiente.__EMPTY_2 && !isNaN(datoSiguiente.__EMPTY_2)) {\n            mallaEstructurada.año = datoSiguiente.__EMPTY_2;\n          }\n          // Semana\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"SEMANA\")) {\n              mallaEstructurada.semana = v;\n            }\n          });\n          // Rango: p.ej. \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"LUNES\") && v.includes(\"VIERNES\")) {\n              mallaEstructurada.rangoDias = v;\n            }\n          });\n        }\n      }\n    }\n  });\n  \n  // B) Detectar franjas horarias (.__EMPTY = fracción de día)\n  const franjasHorarias = [];\n  datos.forEach(dato => {\n    if (\n      dato.__EMPTY !== undefined &&\n      typeof dato.__EMPTY === 'number' &&\n      dato.__EMPTY > 0 &&\n      dato.__EMPTY < 1\n    ) {\n      const totalMin = Math.round(dato.__EMPTY * 24 * 60);\n      const hh = Math.floor(totalMin / 60);\n      const mm = totalMin % 60;\n      \n      let periodo = \"AM\";\n      let hora12 = hh;\n      if (hh >= 12) {\n        periodo = \"PM\";\n        hora12 = (hh === 12 ? 12 : hh - 12);\n      }\n      if (hh === 0) {\n        hora12 = 12;\n      }\n      \n      const horaStr = `${hora12}:${String(mm).padStart(2, '0')} ${periodo}`;\n      franjasHorarias.push({\n        hora: horaStr,\n        indice: datos.indexOf(dato) // fila base\n      });\n    }\n  });\n  franjasHorarias.sort((a, b) => a.indice - b.indice);\n  mallaEstructurada.franjas = franjasHorarias;\n  \n  // C) Detectar muelles (col)\n  const muellesInfo = {};\n  datos.forEach(dato => {\n    Object.entries(dato).forEach(([key, value]) => {\n      if (value === \"MUELLE 01\" || value === \"MUELLE 02\") {\n        const col = parseInt(key.replace(\"__EMPTY_\", \"\"), 10);\n        const muelleKey = (value === \"MUELLE 01\") ? 'muelle1' : 'muelle2';\n        if (!muellesInfo[muelleKey]) {\n          muellesInfo[muelleKey] = [];\n        }\n        muellesInfo[muelleKey].push(col);\n      }\n    });\n  });\n  if (muellesInfo.muelle1) muellesInfo.muelle1.sort((a, b) => a - b);\n  if (muellesInfo.muelle2) muellesInfo.muelle2.sort((a, b) => a - b);\n  \n  // D) Generar los 5 días (lunes-viernes) con su fecha\n  parsearRangoDias();\n  \n  // E) Extraer Citas\n  extraerCitas(datos, muellesInfo);\n  \n  return mallaEstructurada;\n}\n\n/**\n * Parsea la cadena \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n * (o \"LUNES 31 AL VIERNES 04 DE ABRIL\") y maneja el cruce de mes.\n * Ej.: si dayStart=31 y dayEnd=4, la 1ª fecha es 31 de MARZO,\n * luego 1,2,3,4 de ABRIL, en vez de 32,33, etc.\n */\nfunction parsearRangoDias() {\n  const texto = mallaEstructurada.rangoDias;\n  // Regex simple: p.ej. \"31 AL ... 4 DE ABRIL\"\n  // Captura: dayStart, dayEnd, mesFin\n  // Ojo: si dice \"LUNES 31 DE MARZO AL VIERNES 4 DE ABRIL\",\n  // quedará: dayStart=31, dayEnd=4, month=ABRIL (al final).\n  const regex = /(\\d+)\\s+AL\\s+\\D+(\\d+)\\s+DE\\s+(\\w+)/i;\n  const match = regex.exec(texto);\n  \n  // Por defecto, creamos 5 días vacíos sin fecha\n  diasSemana.forEach(d => {\n    mallaEstructurada.dias[d] = {\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  if (!match) {\n    // Sin coincidencia, dejamos los días sin fecha\n    return;\n  }\n  \n  const dayStart = parseInt(match[1], 10); // 31\n  const dayEnd   = parseInt(match[2], 10); // 4\n  const finalMonthName = match[3].toLowerCase(); // \"abril\"\n  \n  // Convertimos a número\n  const finalMonth = meses[finalMonthName] || 3; // fallback marzo\n  const yearNum = parseInt(mallaEstructurada.año, 10) || 2025;\n  \n  // Función para obtener la fecha formateada\n  function fechaFormateada(d, m, y) {\n    return `${d} de ${nombreMes[m]} de ${y}`;\n  }\n  \n  // Comprobamos cuántos días tiene el mes final, considerando bisiestos\n  const diasMesFinal = getDiasMes(finalMonth, yearNum);\n  // y del mes previo\n  const monthPrev = (finalMonth === 1) ? 12 : finalMonth - 1;\n  const yearPrev = (finalMonth === 1) ? yearNum - 1 : yearNum;\n  \n  // Arreglo final con 5 fechas\n  const fechasDias = [];\n  \n  if (dayStart <= dayEnd) {\n    // Caso \"normal\": todo en el mismo mes\n    let d = dayStart;\n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: finalMonth,\n        yearNum: yearNum\n      });\n      d++;\n      if (d > diasMesFinal) {\n        d = 1;\n        const nextMonth = finalMonth % 12 + 1;\n        const nextYear = (nextMonth === 1) ? yearNum + 1 : yearNum;\n        fechasDias[fechasDias.length - 1].mesNum = nextMonth;\n        fechasDias[fechasDias.length - 1].yearNum = nextYear;\n      }\n    }\n  } else {\n    // Caso \"cruza de mes\": dayStart > dayEnd\n    let d = dayStart;\n    let m = monthPrev;\n    let y = yearPrev;\n    \n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: m,\n        yearNum: y\n      });\n      d++;\n      if (d > getDiasMes(m, y)) {\n        d = 1;\n        m = m % 12 + 1;\n        if (m === 1) {\n          y++;\n        }\n      }\n    }\n  }\n  \n  // Ahora volcamos esas 5 fechas en la estructura\n  fechasDias.forEach(fd => {\n    const { diaSem, diaNum, mesNum, yearNum } = fd;\n    mallaEstructurada.dias[diaSem] = {\n      fechaDia: fechaFormateada(diaNum, mesNum, yearNum),\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  // Inicializamos las franjas a 'disponible'\n  if (mallaEstructurada.franjas.length > 0) {\n    diasSemana.forEach(d => {\n      mallaEstructurada.franjas.forEach(f => {\n        mallaEstructurada.dias[d].muelle1[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n        mallaEstructurada.dias[d].muelle2[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n      });\n    });\n  }\n}\n\n/**\n * Función auxiliar: decide a qué día pertenece una columna,\n * corrigiendo 2 columnas de offset (porque 'Extract from XLSX'\n * deja todo desplazado).\n */\nfunction getDayForColumn(colNumber) {\n  // Ajuste de offset +2\n  const realCol = colNumber + 2;\n\n  // Rangos:\n  //  Lunes:      3..8\n  //  Martes:     9..14\n  //  Miércoles: 15..20\n  //  Jueves:    21..26\n  //  Viernes:   27..32\n  if (realCol >= 3 && realCol <= 8) {\n    return \"lunes\";\n  }\n  if (realCol >= 9 && realCol <= 14) {\n    return \"martes\";\n  }\n  if (realCol >= 15 && realCol <= 20) {\n    return \"miércoles\";\n  }\n  if (realCol >= 21 && realCol <= 26) {\n    return \"jueves\";\n  }\n  if (realCol >= 27 && realCol <= 32) {\n    return \"viernes\";\n  }\n  // Si nada coincide, devolvemos null\n  return null;\n}\n\n/**\n * Extraer las citas para cada franja:\n * - Para cada franja, miramos 3 filas:\n *    - Fila base => proveedor\n *    - Fila base+1 => orden\n *    - Fila base+2 => peso, categoría, unidades\n */\nfunction extraerCitas(datos, muellesInfo) {\n  mallaEstructurada.franjas.forEach(franja => {\n    const indiceBase = franja.indice;\n    if (indiceBase < 0 || indiceBase + 2 >= datos.length) {\n      return; // no hay suficientes filas\n    }\n    \n    // Recorremos muelle1, muelle2 y sus columnas\n    const asignarCita = (muelleKey, cols) => {\n      cols.forEach(col => {\n        const provKey = `__EMPTY_${col}`;\n        const filaProv = datos[indiceBase];\n        \n        // Si en esta fila hay un proveedor o algún texto\n        if (\n          filaProv &&\n          typeof filaProv[provKey] === 'string' &&\n          filaProv[provKey].length > 2\n        ) {\n          // Determinar el día real\n          const diaOk = getDayForColumn(col);\n          if (!diaOk || !mallaEstructurada.dias[diaOk]) {\n            return; // si no coincide con ninguno, saltamos\n          }\n          \n          // Recuperar valores para proveedor, ordenCompra y demás\n          const filaOrden = datos[indiceBase + 1];\n          const filaDet = datos[indiceBase + 2];\n          \n          const proveedor = filaProv[provKey] || \"\";\n          const ordenCompra = filaOrden && filaOrden[provKey] ? filaOrden[provKey] : \"\";\n          const peso = filaDet && filaDet[provKey] ? filaDet[provKey] : \"\";\n          const cat  = filaDet && filaDet[`__EMPTY_${col + 1}`] ? filaDet[`__EMPTY_${col + 1}`] : \"\";\n          const und  = filaDet && filaDet[`__EMPTY_${col + 2}`] ? filaDet[`__EMPTY_${col + 2}`] : \"\";\n          \n          // Antes poníamos estado=\"ocupado\" directamente\n          // Ahora verificamos si el texto contiene \"reagendado\", \"cancelado\" o \"fuera de servicio\".\n          const nuevoEstado = determinarEstadoOcupado(proveedor, ordenCompra, peso, cat, und);\n          \n          // Asignamos los datos\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].estado = nuevoEstado;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].proveedor = proveedor;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].ordenCompra = ordenCompra;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].peso = peso;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].categoria = cat;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].unidades = und;\n        }\n      });\n    };\n    \n    if (muellesInfo.muelle1) {\n      asignarCita('muelle1', muellesInfo.muelle1);\n    }\n    if (muellesInfo.muelle2) {\n      asignarCita('muelle2', muellesInfo.muelle2);\n    }\n  });\n}\n\n// -------------------------------------------------------------\n// 2) FUNCIONES PARA CONSULTAR LA MALLA\n// -------------------------------------------------------------\nfunction buscarFranjasDisponibles(categoria, duracionHoras) {\n  const muelle = \"muelle1\"; // Ajusta si usas \"categoria -> muelle\" real\n  \n  const franjasDisponibles = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const libres = [];\n    for (let i = 0; i <= mallaEstructurada.franjas.length - duracionHoras; i++) {\n      let disponible = true;\n      for (let h = 0; h < duracionHoras; h++) {\n        const idxF = i + h;\n        const horaAct = mallaEstructurada.franjas[idxF].hora;\n        if (\n          mallaEstructurada.dias[dia][muelle][horaAct].estado !== 'disponible'\n        ) {\n          disponible = false;\n          break;\n        }\n      }\n      if (disponible) {\n        libres.push({\n          horaInicio: mallaEstructurada.franjas[i].hora,\n          duracion: duracionHoras\n        });\n      }\n    }\n    if (libres.length > 0) {\n      franjasDisponibles.push({ dia, franjas: libres });\n    }\n  });\n  return franjasDisponibles;\n}\n\nfunction buscarCitasProveedor(nombreProveedor) {\n  const citas = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const muelle1 = mallaEstructurada.dias[dia].muelle1;\n    const muelle2 = mallaEstructurada.dias[dia].muelle2;\n    mallaEstructurada.franjas.forEach(f => {\n      const hora = f.hora;\n      // muelle1\n      if (normalizarTexto(muelle1[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 01\",\n          ordenCompra: muelle1[hora].ordenCompra,\n          peso: muelle1[hora].peso,\n          categoria: muelle1[hora].categoria,\n          unidades: muelle1[hora].unidades,\n          estado: muelle1[hora].estado\n        });\n      }\n      // muelle2\n      if (normalizarTexto(muelle2[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 02\",\n          ordenCompra: muelle2[hora].ordenCompra,\n          peso: muelle2[hora].peso,\n          categoria: muelle2[hora].categoria,\n          unidades: muelle2[hora].unidades,\n          estado: muelle2[hora].estado\n        });\n      }\n    });\n  });\n  return citas;\n}\n\nfunction consultarFranjasDisponibles(categoria, duracionHoras) {\n  return buscarFranjasDisponibles(categoria, duracionHoras);\n}\n\nfunction consultarCitasProveedor(nombreProveedor) {\n  return buscarCitasProveedor(nombreProveedor);\n}\n\nfunction obtenerInfoMalla() {\n  return {\n    titulo: mallaEstructurada.titulo,\n    año: mallaEstructurada.año,\n    semana: mallaEstructurada.semana,\n    rangoDias: mallaEstructurada.rangoDias,\n    franjas: mallaEstructurada.franjas.map(f => f.hora)\n  };\n}\n\nfunction estaDisponible(dia, hora, muelle) {\n  const info = mallaEstructurada.dias[dia]?.[muelle]?.[hora];\n  return info ? (info.estado === 'disponible') : false;\n}\n\nfunction obtenerCoordenadasCita(dia, hora, muelle) {\n  // Ajustar con tu mapeo de celdas en Excel\n  return {\n    proveedor: `${dia}_${hora}_${muelle}_proveedor`,\n    ordenCompra: `${dia}_${hora}_${muelle}_ordenCompra`,\n    peso: `${dia}_${hora}_${muelle}_peso`,\n    categoria: `${dia}_${hora}_${muelle}_categoria`,\n    unidades: `${dia}_${hora}_${muelle}_unidades`\n  };\n}\n\n// -------------------------------------------------------------\n// 3) EJECUTAR TODO Y RETORNAR\n// -------------------------------------------------------------\n// Procesar todos los datos\nconst malla = procesarDatos(excelData);\n\n// Aplicar el filtro de días válidos según la hora actual\nconst diasPermitidos = diasValidosSemanaActual(diaSemanaActual, pasoLimiteDia);\nObject.keys(malla.dias).forEach(dia => {\n  if (!diasPermitidos.includes(dia)) {\n    delete malla.dias[dia]; // eliminar días no válidos\n  }\n});\n\nconst resultado = {\n  datosMalla: malla,\n  funciones: {\n    consultarFranjasDisponibles,\n    consultarCitasProveedor,\n    obtenerInfoMalla,\n    estaDisponible,\n    obtenerCoordenadasCita\n  }\n};\n\nreturn [resultado];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -42688,
        -4448
      ],
      "id": "214deace-d16c-415f-bd8a-9d8de15b2bbc",
      "name": "Estructuración, Datos, Consulta, Citas4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -42368,
        -4352
      ],
      "id": "dbc2ea4d-e9a0-41d7-a6f7-37611d4d09fa",
      "name": "Merge datos Excel4"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    datosMalla: $items(\"Merge datos Excel4\")[0].json.datosMalla,\n    datosMallaProxSemana: $items(\"Merge datos Excel4\")[1].json.datosMallaProxSemana,\n    hojaSeleccionada: $items(\"Merge datos Excel4\")[0].json.datosMalla.semana\n  }\n}];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -42128,
        -4352
      ],
      "id": "3aebcf06-65a4-4c15-9efb-9839e65e15ed",
      "name": "Unificación y consistencia de datos5"
    },
    {
      "parameters": {
        "operation": "xlsx",
        "binaryPropertyName": "ExcelMallaRecibido2025",
        "options": {
          "sheetName": "={{    (function() {     const semanaActual = $('Unificación y consistencia de datos').item.json.hojaSeleccionada;     const numeroSemana = parseInt(semanaActual.replace(\"SEMANA \", \"\"));     return `SEMANA ${numeroSemana + 1}`;   })() }}"
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -42928,
        -4256
      ],
      "id": "fde3c1dd-c9fc-4535-94c4-63d782210949",
      "name": "Extract MALLA DE RECIBO Semana Siguiente4",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Si el nodo anterior no devolvió datos (por error al no existir la hoja), retornamos estructura vacía con mensaje\n// Obtener los datos del Excel\nconst excelData = $input.all();\n\n// Mejora en la detección de errores: verificar si hay error explícito o si los datos no son válidos\nconst hayError = excelData.some(item => item.json && item.json.error);\nconst datosInvalidos = !excelData || excelData.length === 0 || hayError;\n\nif (datosInvalidos) {\n  return [{\n    datosMallaProxSemana: {\n      titulo: \"⚠️ La malla de la próxima semana no existe en el archivo Excel o aún no ha sido creada.\",\n      año: \"\",\n      semana: \"\",\n      rangoDias: \"\",\n      franjas: [],\n      dias: {\n        lunes: { muelle1: {}, muelle2: {} },\n        martes: { muelle1: {}, muelle2: {} },\n        miércoles: { muelle1: {}, muelle2: {} },\n        jueves: { muelle1: {}, muelle2: {} },\n        viernes: { muelle1: {}, muelle2: {} }\n      }\n    },\n    funciones: {\n      consultarFranjasDisponibles: \"function not available\",\n      consultarCitasProveedor: \"function not available\",\n      obtenerInfoMalla: \"function not available\",\n      estaDisponible: \"function not available\",\n      obtenerCoordenadasCita: \"function not available\"\n    }\n  }];\n}\n\n// El resto del código permanece igual...\nconst hojaSeleccionada = $('Unificación y consistencia de datos').first().json.hojaSeleccionada;\n\n// Definir estructura de la semana y los días\nconst diasSemana = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes'];\n\n// Objeto para almacenar la malla estructurada\nconst mallaEstructurada = {\n  titulo: \"\",\n  año: \"\",\n  semana: \"\",\n  rangoDias: \"\",\n  franjas: [],\n  dias: {}\n};\n\n// Tabla de meses y días. Ajusta si necesitas contemplar bisiestos, etc.\nconst meses = {\n  \"enero\": 1,\n  \"febrero\": 2,\n  \"marzo\": 3,\n  \"abril\": 4,\n  \"mayo\": 5,\n  \"junio\": 6,\n  \"julio\": 7,\n  \"agosto\": 8,\n  \"septiembre\": 9,\n  \"octubre\": 10,\n  \"noviembre\": 11,\n  \"diciembre\": 12\n};\n\nconst nombreMes = {\n  1: \"enero\",\n  2: \"febrero\",\n  3: \"marzo\",\n  4: \"abril\",\n  5: \"mayo\",\n  6: \"junio\",\n  7: \"julio\",\n  8: \"agosto\",\n  9: \"septiembre\",\n  10: \"octubre\",\n  11: \"noviembre\",\n  12: \"diciembre\"\n};\n\n/**\n * Función para determinar si un año es bisiesto\n * Un año es bisiesto si es divisible por 4, excepto aquellos divisibles por 100 \n * que no son divisibles por 400\n */\nfunction esBisiesto(year) {\n  return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\n}\n\n/**\n * Función para obtener el número de días en un mes, considerando años bisiestos\n */\nfunction getDiasMes(mes, año) {\n  const diasPorMes = {\n    1: 31, // enero\n    2: esBisiesto(año) ? 29 : 28, // febrero - ajustado para año bisiesto\n    3: 31, // marzo\n    4: 30, // abril\n    5: 31, // mayo\n    6: 30, // junio\n    7: 31, // julio\n    8: 31, // agosto\n    9: 30, // septiembre\n    10: 31, // octubre\n    11: 30, // noviembre\n    12: 31  // diciembre\n  };\n  \n  return diasPorMes[mes];\n}\n\n/**\n * Función para eliminar acentos y pasar a minúsculas (para buscar palabras clave sin importar tildes ni mayúsculas).\n */\nfunction normalizarTexto(texto) {\n  if (typeof texto !== 'string') return \"\";\n  // Normaliza (NFD) y elimina diacríticos, luego pasa a minúsculas.\n  return texto\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\") // quita acentos\n    .toLowerCase();\n}\n\n/**\n * Dada la información de proveedor, ordenCompra, peso, categoría y unidades,\n * revisa si existe la palabra 'fuera de servicio', 'cancelado' o 'reagendado'\n * en cualquiera de esos campos. De ser así, retorna ese estado especial;\n * de lo contrario, retorna 'ocupado'.\n * \n * Se ignoran mayúsculas, minúsculas y tildes.\n */\nfunction determinarEstadoOcupado(proveedor, ordenCompra, peso, categoria, unidades) {\n  const conjunto = `${proveedor} ${ordenCompra} ${peso} ${categoria} ${unidades}`;\n  const texto = normalizarTexto(conjunto);\n\n  if (texto.includes(\"fuera de servicio\")) {\n    return \"fuera de servicio\";\n  }\n  if (texto.includes(\"cancelado\")) {\n    return \"cancelado\";\n  }\n  if (texto.includes(\"reagendado\")) {\n    return \"reagendado\";\n  }\n  return \"ocupado\";  \n}\n\n// -------------------------------------------------------------\n// 1) PROCESAR DATOS (Cabecera, Horas, Muelles, etc.)\n// -------------------------------------------------------------\nfunction procesarDatos(excelData) {\n  // Verificación adicional de datos válidos\n  if (!excelData || !Array.isArray(excelData) || excelData.length === 0) {\n    return {\n      titulo: \"⚠️ La malla de la próxima semana no existe en el archivo Excel o aún no ha sido creada.\",\n      año: \"\",\n      semana: \"\",\n      rangoDias: \"\",\n      franjas: [],\n      dias: {\n        lunes: { muelle1: {}, muelle2: {} },\n        martes: { muelle1: {}, muelle2: {} },\n        miércoles: { muelle1: {}, muelle2: {} },\n        jueves: { muelle1: {}, muelle2: {} },\n        viernes: { muelle1: {}, muelle2: {} }\n      }\n    };\n  }\n  \n  // Intentar mapear datos, con manejo de errores para cada item\n  const datos = excelData.map(item => {\n    try {\n      return item.json || {};\n    } catch (e) {\n      return {};\n    }\n  });\n  \n  // A) Cabecera (Título, Año, Rango)\n  datos.forEach((dato, index) => {\n    // Buscar título\n    if (dato.__EMPTY_2 === \"MALLA DE RECIBO CEDI KONFIE IA\") {\n      mallaEstructurada.titulo = dato.__EMPTY_2;\n      \n      // En la siguiente fila puede estar año, semana, rango\n      if (index + 1 < datos.length) {\n        const datoSiguiente = datos[index + 1];\n        if (datoSiguiente) {\n          // Año\n          if (datoSiguiente.__EMPTY_2 && !isNaN(datoSiguiente.__EMPTY_2)) {\n            mallaEstructurada.año = datoSiguiente.__EMPTY_2;\n          }\n          // Semana\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"SEMANA\")) {\n              mallaEstructurada.semana = v;\n            }\n          });\n          // Rango: p.ej. \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n          Object.entries(datoSiguiente).forEach(([k, v]) => {\n            if (typeof v === 'string' && v.includes(\"LUNES\") && v.includes(\"VIERNES\")) {\n              mallaEstructurada.rangoDias = v;\n            }\n          });\n        }\n      }\n    }\n  });\n  \n  // Si después de procesar no encontramos título, es que no hay malla válida\n  if (!mallaEstructurada.titulo) {\n    mallaEstructurada.titulo = \"⚠️ La malla de la próxima semana no existe en el archivo Excel o aún no ha sido creada.\";\n    return mallaEstructurada;\n  }\n  \n  // B) Detectar franjas horarias (.__EMPTY = fracción de día)\n  const franjasHorarias = [];\n  datos.forEach(dato => {\n    if (\n      dato.__EMPTY !== undefined &&\n      typeof dato.__EMPTY === 'number' &&\n      dato.__EMPTY > 0 &&\n      dato.__EMPTY < 1\n    ) {\n      const totalMin = Math.round(dato.__EMPTY * 24 * 60);\n      const hh = Math.floor(totalMin / 60);\n      const mm = totalMin % 60;\n      \n      let periodo = \"AM\";\n      let hora12 = hh;\n      if (hh >= 12) {\n        periodo = \"PM\";\n        hora12 = (hh === 12 ? 12 : hh - 12);\n      }\n      if (hh === 0) {\n        hora12 = 12;\n      }\n      \n      const horaStr = `${hora12}:${String(mm).padStart(2, '0')} ${periodo}`;\n      franjasHorarias.push({\n        hora: horaStr,\n        indice: datos.indexOf(dato) // fila base\n      });\n    }\n  });\n  franjasHorarias.sort((a, b) => a.indice - b.indice);\n  mallaEstructurada.franjas = franjasHorarias;\n  \n  // C) Detectar muelles (col)\n  const muellesInfo = {};\n  datos.forEach(dato => {\n    Object.entries(dato).forEach(([key, value]) => {\n      if (value === \"MUELLE 01\" || value === \"MUELLE 02\") {\n        const col = parseInt(key.replace(\"__EMPTY_\", \"\"), 10);\n        const muelleKey = (value === \"MUELLE 01\") ? 'muelle1' : 'muelle2';\n        if (!muellesInfo[muelleKey]) {\n          muellesInfo[muelleKey] = [];\n        }\n        muellesInfo[muelleKey].push(col);\n      }\n    });\n  });\n  if (muellesInfo.muelle1) muellesInfo.muelle1.sort((a, b) => a - b);\n  if (muellesInfo.muelle2) muellesInfo.muelle2.sort((a, b) => a - b);\n  \n  // D) Generar los 5 días (lunes-viernes) con su fecha\n  parsearRangoDias();\n  \n  // E) Extraer Citas\n  extraerCitas(datos, muellesInfo);\n  \n  return mallaEstructurada;\n}\n\n/**\n * Parsea la cadena \"LUNES 31 AL VIERNES 4 DE ABRIL\"\n * (o \"LUNES 31 AL VIERNES 04 DE ABRIL\") y maneja el cruce de mes.\n * Ej.: si dayStart=31 y dayEnd=4, la 1ª fecha es 31 de MARZO,\n * luego 1,2,3,4 de ABRIL, en vez de 32,33, etc.\n */\nfunction parsearRangoDias() {\n  const texto = mallaEstructurada.rangoDias;\n  // Regex simple: p.ej. \"31 AL ... 4 DE ABRIL\"\n  // Captura: dayStart, dayEnd, mesFin\n  // Ojo: si dice \"LUNES 31 DE MARZO AL VIERNES 4 DE ABRIL\",\n  // quedará: dayStart=31, dayEnd=4, month=ABRIL (al final).\n  const regex = /(\\d+)\\s+AL\\s+\\D+(\\d+)\\s+DE\\s+(\\w+)/i;\n  const match = regex.exec(texto);\n  \n  // Por defecto, creamos 5 días vacíos sin fecha\n  diasSemana.forEach(d => {\n    mallaEstructurada.dias[d] = {\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  if (!match) {\n    // Sin coincidencia, dejamos los días sin fecha\n    return;\n  }\n  \n  const dayStart = parseInt(match[1], 10); // 31\n  const dayEnd   = parseInt(match[2], 10); // 4\n  const finalMonthName = match[3].toLowerCase(); // \"abril\"\n  \n  // Convertimos a número\n  const finalMonth = meses[finalMonthName] || 3; // fallback marzo\n  const yearNum = parseInt(mallaEstructurada.año, 10) || 2025;\n  \n  // Función para obtener la fecha formateada\n  function fechaFormateada(d, m, y) {\n    return `${d} de ${nombreMes[m]} de ${y}`;\n  }\n  \n  // Comprobamos cuántos días tiene el mes final, considerando bisiestos\n  const diasMesFinal = getDiasMes(finalMonth, yearNum);\n  // y del mes previo\n  const monthPrev = (finalMonth === 1) ? 12 : finalMonth - 1;\n  const yearPrev = (finalMonth === 1) ? yearNum - 1 : yearNum;\n  \n  // Arreglo final con 5 fechas\n  const fechasDias = [];\n  \n  if (dayStart <= dayEnd) {\n    // Caso \"normal\": todo en el mismo mes\n    let d = dayStart;\n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: finalMonth,\n        yearNum: yearNum\n      });\n      d++;\n      if (d > diasMesFinal) {\n        d = 1;\n        const nextMonth = finalMonth % 12 + 1;\n        const nextYear = (nextMonth === 1) ? yearNum + 1 : yearNum;\n        fechasDias[fechasDias.length - 1].mesNum = nextMonth;\n        fechasDias[fechasDias.length - 1].yearNum = nextYear;\n      }\n    }\n  } else {\n    // Caso \"cruza de mes\": dayStart > dayEnd\n    let d = dayStart;\n    let m = monthPrev;\n    let y = yearPrev;\n    \n    for (let i = 0; i < 5; i++) {\n      fechasDias.push({\n        diaSem: diasSemana[i],\n        diaNum: d,\n        mesNum: m,\n        yearNum: y\n      });\n      d++;\n      if (d > getDiasMes(m, y)) {\n        d = 1;\n        m = m % 12 + 1;\n        if (m === 1) {\n          y++;\n        }\n      }\n    }\n  }\n  \n  // Ahora volcamos esas 5 fechas en la estructura\n  fechasDias.forEach(fd => {\n    const { diaSem, diaNum, mesNum, yearNum } = fd;\n    mallaEstructurada.dias[diaSem] = {\n      fechaDia: fechaFormateada(diaNum, mesNum, yearNum),\n      muelle1: {},\n      muelle2: {}\n    };\n  });\n  \n  // Inicializamos las franjas a 'disponible'\n  if (mallaEstructurada.franjas.length > 0) {\n    diasSemana.forEach(d => {\n      mallaEstructurada.franjas.forEach(f => {\n        mallaEstructurada.dias[d].muelle1[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n        mallaEstructurada.dias[d].muelle2[f.hora] = {\n          estado: \"disponible\",\n          proveedor: \"\",\n          ordenCompra: \"\",\n          peso: \"\",\n          categoria: \"\",\n          unidades: \"\"\n        };\n      });\n    });\n  }\n}\n\n/**\n * Función auxiliar: decide a qué día pertenece una columna,\n * corrigiendo 2 columnas de offset (porque 'Extract from XLSX'\n * deja todo desplazado).\n */\nfunction getDayForColumn(colNumber) {\n  // Ajuste de offset +2\n  const realCol = colNumber + 2;\n\n  // Rangos:\n  //  Lunes:      3..8\n  //  Martes:     9..14\n  //  Miércoles: 15..20\n  //  Jueves:    21..26\n  //  Viernes:   27..32\n  if (realCol >= 3 && realCol <= 8) {\n    return \"lunes\";\n  }\n  if (realCol >= 9 && realCol <= 14) {\n    return \"martes\";\n  }\n  if (realCol >= 15 && realCol <= 20) {\n    return \"miércoles\";\n  }\n  if (realCol >= 21 && realCol <= 26) {\n    return \"jueves\";\n  }\n  if (realCol >= 27 && realCol <= 32) {\n    return \"viernes\";\n  }\n  // Si nada coincide, devolvemos null\n  return null;\n}\n\n/**\n * Extraer las citas para cada franja:\n * - Para cada franja, miramos 3 filas:\n *    - Fila base => proveedor\n *    - Fila base+1 => orden\n *    - Fila base+2 => peso, categoría, unidades\n */\nfunction extraerCitas(datos, muellesInfo) {\n  mallaEstructurada.franjas.forEach(franja => {\n    const indiceBase = franja.indice;\n    if (indiceBase < 0 || indiceBase + 2 >= datos.length) {\n      return; // no hay suficientes filas\n    }\n    \n    // Recorremos muelle1, muelle2 y sus columnas\n    const asignarCita = (muelleKey, cols) => {\n      cols.forEach(col => {\n        const provKey = `__EMPTY_${col}`;\n        const filaProv = datos[indiceBase];\n        \n        // Si en esta fila hay un proveedor o algún texto\n        if (\n          filaProv &&\n          typeof filaProv[provKey] === 'string' &&\n          filaProv[provKey].length > 2\n        ) {\n          // Determinar el día real\n          const diaOk = getDayForColumn(col);\n          if (!diaOk || !mallaEstructurada.dias[diaOk]) {\n            return; // si no coincide con ninguno, saltamos\n          }\n          \n          // Recuperar valores para proveedor, ordenCompra y demás\n          const filaOrden = datos[indiceBase + 1];\n          const filaDet = datos[indiceBase + 2];\n          \n          const proveedor = filaProv[provKey] || \"\";\n          const ordenCompra = filaOrden && filaOrden[provKey] ? filaOrden[provKey] : \"\";\n          const peso = filaDet && filaDet[provKey] ? filaDet[provKey] : \"\";\n          const cat  = filaDet && filaDet[`__EMPTY_${col + 1}`] ? filaDet[`__EMPTY_${col + 1}`] : \"\";\n          const und  = filaDet && filaDet[`__EMPTY_${col + 2}`] ? filaDet[`__EMPTY_${col + 2}`] : \"\";\n          \n          // Antes poníamos estado=\"ocupado\" directamente\n          // Ahora verificamos si el texto contiene \"reagendado\", \"cancelado\" o \"fuera de servicio\".\n          const nuevoEstado = determinarEstadoOcupado(proveedor, ordenCompra, peso, cat, und);\n          \n          // Asignamos los datos\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].estado = nuevoEstado;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].proveedor = proveedor;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].ordenCompra = ordenCompra;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].peso = peso;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].categoria = cat;\n          mallaEstructurada.dias[diaOk][muelleKey][franja.hora].unidades = und;\n        }\n      });\n    };\n    \n    if (muellesInfo.muelle1) {\n      asignarCita('muelle1', muellesInfo.muelle1);\n    }\n    if (muellesInfo.muelle2) {\n      asignarCita('muelle2', muellesInfo.muelle2);\n    }\n  });\n}\n\n// -------------------------------------------------------------\n// 2) FUNCIONES PARA CONSULTAR LA MALLA\n// -------------------------------------------------------------\nfunction buscarFranjasDisponibles(categoria, duracionHoras) {\n  const muelle = \"muelle1\"; // Ajusta si usas \"categoria -> muelle\" real\n  \n  const franjasDisponibles = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const libres = [];\n    for (let i = 0; i <= mallaEstructurada.franjas.length - duracionHoras; i++) {\n      let disponible = true;\n      for (let h = 0; h < duracionHoras; h++) {\n        const idxF = i + h;\n        const horaAct = mallaEstructurada.franjas[idxF].hora;\n        if (\n          mallaEstructurada.dias[dia][muelle][horaAct].estado !== 'disponible'\n        ) {\n          disponible = false;\n          break;\n        }\n      }\n      if (disponible) {\n        libres.push({\n          horaInicio: mallaEstructurada.franjas[i].hora,\n          duracion: duracionHoras\n        });\n      }\n    }\n    if (libres.length > 0) {\n      franjasDisponibles.push({ dia, franjas: libres });\n    }\n  });\n  return franjasDisponibles;\n}\n\nfunction buscarCitasProveedor(nombreProveedor) {\n  const citas = [];\n  Object.keys(mallaEstructurada.dias).forEach(dia => {\n    const muelle1 = mallaEstructurada.dias[dia].muelle1;\n    const muelle2 = mallaEstructurada.dias[dia].muelle2;\n    mallaEstructurada.franjas.forEach(f => {\n      const hora = f.hora;\n      // muelle1\n      if (normalizarTexto(muelle1[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 01\",\n          ordenCompra: muelle1[hora].ordenCompra,\n          peso: muelle1[hora].peso,\n          categoria: muelle1[hora].categoria,\n          unidades: muelle1[hora].unidades,\n          estado: muelle1[hora].estado\n        });\n      }\n      // muelle2\n      if (normalizarTexto(muelle2[hora].proveedor) === normalizarTexto(nombreProveedor)) {\n        citas.push({\n          dia,\n          hora,\n          muelle: \"Muelle 02\",\n          ordenCompra: muelle2[hora].ordenCompra,\n          peso: muelle2[hora].peso,\n          categoria: muelle2[hora].categoria,\n          unidades: muelle2[hora].unidades,\n          estado: muelle2[hora].estado\n        });\n      }\n    });\n  });\n  return citas;\n}\n\nfunction consultarFranjasDisponibles(categoria, duracionHoras) {\n  return buscarFranjasDisponibles(categoria, duracionHoras);\n}\n\nfunction consultarCitasProveedor(nombreProveedor) {\n  return buscarCitasProveedor(nombreProveedor);\n}\n\nfunction obtenerInfoMalla() {\n  return {\n    titulo: mallaEstructurada.titulo,\n    año: mallaEstructurada.año,\n    semana: mallaEstructurada.semana,\n    rangoDias: mallaEstructurada.rangoDias,\n    franjas: mallaEstructurada.franjas.map(f => f.hora)\n  };\n}\n\nfunction estaDisponible(dia, hora, muelle) {\n  const info = mallaEstructurada.dias[dia]?.[muelle]?.[hora];\n  return info ? (info.estado === 'disponible') : false;\n}\n\nfunction obtenerCoordenadasCita(dia, hora, muelle) {\n  // Ajustar con tu mapeo de celdas en Excel\n  return {\n    proveedor: `${dia}_${hora}_${muelle}_proveedor`,\n    ordenCompra: `${dia}_${hora}_${muelle}_ordenCompra`,\n    peso: `${dia}_${hora}_${muelle}_peso`,\n    categoria: `${dia}_${hora}_${muelle}_categoria`,\n    unidades: `${dia}_${hora}_${muelle}_unidades`\n  };\n}\n\n// -------------------------------------------------------------\n// 3) EJECUTAR TODO Y RETORNAR\n// -------------------------------------------------------------\nconst malla = procesarDatos(excelData);\n\nconst resultado = {\n  datosMallaProxSemana: malla,\n  funciones: {\n    consultarFranjasDisponibles,\n    consultarCitasProveedor,\n    obtenerInfoMalla,\n    estaDisponible,\n    obtenerCoordenadasCita\n  }\n};\n\nreturn [resultado];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -42688,
        -4256
      ],
      "id": "20db669b-a787-44c6-96eb-f36acdd7ffd0",
      "name": "Estructuración, Datos, Consulta, Citas Proxima Semana4"
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos de la cita desde la consulta SQL\nconst citaBD = $('Microsoft SQL Obtener Cita para Cancelar').first().json;\n\n// Obtener los datos de las mallas\nconst datosMalla = $('Unificación y consistencia de datos5').first().json;\nconst mallaActual = datosMalla.datosMalla;\nconst mallaProxSemana = datosMalla.datosMallaProxSemana;\n\n// Función para normalizar texto (quitar espacios, convertir a minúsculas)\nfunction normalizarTexto(texto) {\n  if (!texto) return \"\";\n  return texto.toString().trim().toLowerCase();\n}\n\n// Función para buscar cita en una malla específica\nfunction buscarCitaEnMalla(malla, citaBuscar) {\n  const diasSemana = ['lunes', 'martes', 'miércoles', 'jueves', 'viernes'];\n  const muelles = ['muelle1', 'muelle2'];\n  \n  for (const dia of diasSemana) {\n    if (!malla.dias[dia]) continue;\n    \n    for (const muelle of muelles) {\n      if (!malla.dias[dia][muelle]) continue;\n      \n      // Revisar todas las franjas horarias\n      for (const [hora, citaMalla] of Object.entries(malla.dias[dia][muelle])) {\n        // Solo revisar citas ocupadas\n        if (citaMalla.estado !== 'ocupado') continue;\n        \n        // Comparar campos clave\n        const proveedorCoincide = normalizarTexto(citaMalla.proveedor) === normalizarTexto(citaBuscar.nombre);\n        const ordenCoincide = normalizarTexto(citaMalla.ordenCompra) === normalizarTexto(citaBuscar.orden_compra);\n        \n        // Verificar peso (puede ser number o string)\n        let pesoCoincide = false;\n        const pesoBD = parseFloat(citaBuscar.peso) || 0;\n        const pesoMalla = parseFloat(citaMalla.peso) || 0;\n        pesoCoincide = Math.abs(pesoBD - pesoMalla) < 0.01; // tolerancia para decimales\n        \n        // Verificar unidades\n        let unidadesCoincide = false;\n        const unidadesBD = parseFloat(citaBuscar.unidades) || 0;\n        const unidadesMalla = parseFloat(citaMalla.unidades) || 0;\n        unidadesCoincide = Math.abs(unidadesBD - unidadesMalla) < 0.01;\n        \n        // Si coinciden los campos principales, es la misma cita\n        if (proveedorCoincide && ordenCoincide && pesoCoincide && unidadesCoincide) {\n          return {\n            encontrada: true,\n            ubicacion: {\n              malla: malla.semana,\n              dia: dia,\n              hora: hora,\n              muelle: muelle,\n              fechaDia: malla.dias[dia].fechaDia || \"Fecha no disponible\"\n            },\n            detalles: citaMalla\n          };\n        }\n      }\n    }\n  }\n  \n  return { encontrada: false };\n}\n\n// Buscar la cita en ambas mallas\nlet citaEncontrada = null;\nlet ubicacionEncontrada = null;\n\n// Primero buscar en la malla actual\nconst resultadoMallaActual = buscarCitaEnMalla(mallaActual, citaBD);\nif (resultadoMallaActual.encontrada) {\n  citaEncontrada = resultadoMallaActual.detalles;\n  ubicacionEncontrada = resultadoMallaActual.ubicacion;\n}\n\n// Si no se encontró en la malla actual, buscar en la próxima semana\nif (!citaEncontrada) {\n  const resultadoMallaProxima = buscarCitaEnMalla(mallaProxSemana, citaBD);\n  if (resultadoMallaProxima.encontrada) {\n    citaEncontrada = resultadoMallaProxima.detalles;\n    ubicacionEncontrada = resultadoMallaProxima.ubicacion;\n  }\n}\n\n// Generar respuesta basada en si se encontró o no la cita\nif (citaEncontrada) {\n  // Cita encontrada - continuar con el proceso de cancelación\n  return [{\n    validacionExitosa: true,\n    citaEncontrada: true,\n    datosValidacion: {\n      citaBD: {\n        id: citaBD.id,\n        nombre: citaBD.nombre,\n        ordenCompra: citaBD.orden_compra,\n        peso: citaBD.peso,\n        unidades: citaBD.unidades,\n        fechaCita: citaBD.fecha_cita,\n        estado: citaBD.estado\n      },\n      citaMalla: citaEncontrada,\n      ubicacion: ubicacionEncontrada\n    },\n    mensaje: `✅ **Validación exitosa**\\n\\n` +\n             `Se ha verificado que la cita 🔖 **${citaBD.id}** con orden de compra **${citaBD.orden_compra}** ` +\n             `se encuentra correctamente registrada en la malla de la ${ubicacionEncontrada.malla}.\\n\\n` +\n             `📍 **Ubicación en malla:**\\n` +\n             `• **Día:** ${ubicacionEncontrada.dia} (${ubicacionEncontrada.fechaDia})\\n` +\n             `• **Hora:** ${ubicacionEncontrada.hora}\\n` +\n             `• **Muelle:** ${ubicacionEncontrada.muelle.replace('muelle', 'Muelle ')}\\n` +\n             `• **Proveedor:** ${citaEncontrada.proveedor}\\n\\n` +\n             `Procediendo con la cancelación de la cita...`\n  }];\n} else {\n  // Cita NO encontrada - generar error\n  return [{\n    validacionExitosa: false,\n    citaEncontrada: false,\n    error: true,\n    datosValidacion: {\n      citaBD: {\n        id: citaBD.id,\n        nombre: citaBD.nombre,\n        ordenCompra: citaBD.orden_compra,\n        peso: citaBD.peso,\n        unidades: citaBD.unidades,\n        fechaCita: citaBD.fecha_cita,\n        estado: citaBD.estado\n      },\n      mallaRevisada: {\n        semanaActual: mallaActual.semana,\n        rangoActual: mallaActual.rangoDias,\n        semanaProxima: mallaProxSemana.semana,\n        rangoProximo: mallaProxSemana.rangoDias\n      }\n    },\n    mensaje: `❌ **Error de validación de malla**\\n\\n` +\n             `La cita 🔖 **${citaBD.id}** con orden de compra **${citaBD.orden_compra}** ` +\n             `se encuentra registrada en la base de datos como **PROGRAMADA**, pero ` +\n             `**NO coincide** con ninguna cita ocupada en la malla de horarios.\\n\\n` +\n             `📊 **Datos de la cita en BD:**\\n` +\n             `• **Proveedor:** ${citaBD.nombre}\\n` +\n             `• **Orden de compra:** ${citaBD.orden_compra}\\n` +\n             `• **Peso:** ${citaBD.peso} kg\\n` +\n             `• **Unidades:** ${citaBD.unidades}\\n` +\n             `• **Fecha programada:** ${citaBD.fecha_cita}\\n\\n` +\n             `🔍 **Mallas revisadas:**\\n` +\n             `• ${mallaActual.semana}: ${mallaActual.rangoDias}\\n` +\n             `• ${mallaProxSemana.semana}: ${mallaProxSemana.rangoDias}\\n\\n` +\n             `⚠️ **Acción requerida:**\\n` +\n             `Por favor comuníquese con el **área de bodega** para verificar qué sucedió con esta cita. ` +\n             `Es posible que haya una inconsistencia entre la base de datos y la malla de horarios.\\n\\n` +\n             `📞 **Contacto:** Extensión 1234 - Coordinación de Bodega\\n\\n` +\n             `🔄 **Esta conversación será eliminada** para mantener la trazabilidad del historial.`,\n    codigoError: \"CITA_NO_ENCONTRADA_EN_MALLA\",\n    accionRequerida: \"CONTACTAR_BODEGA\"\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -41840,
        -4352
      ],
      "id": "37af4e68-70c7-4436-875e-53a240a9cdc2",
      "name": "Code validación de cita en malla"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "64a1bea0-f03e-4e93-8f05-f2e606167be0",
              "leftValue": "={{ $json.citaEncontrada }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -41568,
        -4352
      ],
      "id": "9d8dfcff-18ff-4d56-90ad-6ff7109ca7d9",
      "name": "If validar cita existe"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('Code validación de cita en malla').first().json.mensaje.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -41120,
        -3968
      ],
      "id": "334a8aca-a9b5-48e9-8b5f-4873128493fe",
      "name": "Validación de longitud de caracteres14"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Code validación de cita en malla').first().json.mensaje }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Code validación de cita en malla').first().json.mensaje.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -40848,
        -3904
      ],
      "id": "722a1dd7-2860-45ab-ae29-ec4f5cbc00d3",
      "name": "Organiza variables del mensaje14"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -40672,
        -4112
      ],
      "id": "fc54f4bb-a969-4c50-994b-7d6cc848aa9d",
      "name": "No Operation, do nothing18"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -40848,
        -4112
      ],
      "id": "ce03ae6a-b109-49f7-81b5-ffa8ca3daa27",
      "name": "HTTP Request Enviar Mensaje por WhatsApp17"
    },
    {
      "parameters": {
        "jsCode": "// Código adaptado para CANCELACIÓN de citas\nconst datosValidacion = $('Code validación de cita en malla').first().json.datosValidacion;\nconst citaBD = datosValidacion.citaBD;\nconst ubicacionCita = datosValidacion.ubicacion;\n// Usar la fecha de la cita para determinar qué malla usar\nconst mallaActual = $('Unificación y consistencia de datos5').first().json.datosMalla;\nconst mallaProxima = $('Unificación y consistencia de datos5').first().json.datosMallaProxSemana;\n\nconst fechaCita = new Date(citaBD.fechaCita);\n\n// Función para verificar si una fecha está en un rango de malla\nfunction fechaEnMalla(fecha, malla) {\n  if (!malla.dias) return false;\n  \n  const fechaBuscada = fecha.toLocaleDateString('es-ES', { \n    day: 'numeric', \n    month: 'long', \n    year: 'numeric' \n  });\n  \n  for (const dia of Object.keys(malla.dias)) {\n    const diaData = malla.dias[dia];\n    if (diaData.fechaDia && diaData.fechaDia === fechaBuscada) {\n      console.log(`Fecha encontrada en día ${dia}: ${diaData.fechaDia}`);\n      return true;\n    }\n  }\n  return false;\n}\n\nlet datosMalla;\nif (fechaEnMalla(fechaCita, mallaActual)) {\n  datosMalla = mallaActual;\n  console.log(\"Usando malla actual para fecha:\", fechaCita.toDateString());\n} else if (fechaEnMalla(fechaCita, mallaProxima)) {\n  datosMalla = mallaProxima;\n  console.log(\"Usando malla próxima para fecha:\", fechaCita.toDateString());\n} else {\n  console.log(\"Fecha no encontrada en ninguna malla\");\n  return {\n    json: {\n      error: true,\n      mensaje: `No se encontró la fecha ${fechaCita.toDateString()} en ninguna malla`,\n      datosValidacion\n    }\n  };\n}\n\nconsole.log(\"=== ESTRUCTURA DATOS MALLA ===\");\nconsole.log(\"Claves disponibles en datosMalla:\", Object.keys(datosMalla || {}));\nconsole.log(\"Claves en datosMalla.dias:\", Object.keys(datosMalla?.dias || {}));\nconsole.log(\"Estructura completa dias:\", datosMalla?.dias);\n\nconsole.log(`Preparando cancelación de cita ID ${citaBD.id} ubicada en: ${ubicacionCita.dia} ${ubicacionCita.hora} ${ubicacionCita.muelle}`);\n\n// Función para calcular las franjas ocupadas por la cita\nfunction calcularFranjasOcupadas() {\n  const franjas = [];\n  \n  console.log(\"=== DEBUG CANCELACIÓN ===\");\n  console.log(\"Ubicación cita:\", ubicacionCita);\n  console.log(\"Datos cita BD:\", citaBD);\n  \n  // Encontrar la franja de inicio\n  const franjasOrdenadas = [...datosMalla.franjas].sort((a, b) => {\n    function horaAMinutos(hora) {\n      const match = hora.match(/(\\\\d+):(\\\\d+)\\\\s*([AP]M)/i);\n      if (!match) return 0;\n      \n      let horas = parseInt(match[1], 10);\n      const minutos = parseInt(match[2], 10);\n      const periodo = match[3].toUpperCase();\n      \n      if (periodo === 'PM' && horas !== 12) {\n        horas += 12;\n      } else if (periodo === 'AM' && horas === 12) {\n        horas = 0;\n      }\n      \n      return horas * 60 + minutos;\n    }\n    \n    return horaAMinutos(a.hora) - horaAMinutos(b.hora);\n  });\n  \n  console.log(\"Franjas ordenadas:\", franjasOrdenadas.map(f => f.hora));\n  \n  // Encontrar el índice de la franja actual\n  const indiceInicio = franjasOrdenadas.findIndex(f => \n    f.hora.trim().toLowerCase() === ubicacionCita.hora.trim().toLowerCase()\n  );\n  \n  console.log(`Buscando hora: \"${ubicacionCita.hora}\" - Índice encontrado: ${indiceInicio}`);\n  \n  if (indiceInicio === -1) {\n    console.log(`No se encontró la franja ${ubicacionCita.hora} en la malla`);\n    return [];\n  }\n  \n  const muelleKey = ubicacionCita.muelle.toLowerCase().includes(\"1\") ? \"muelle1\" : \"muelle2\";\n  const diaData = datosMalla.dias[ubicacionCita.dia];\n  \n  console.log(`Día: ${ubicacionCita.dia}, Muelle: ${muelleKey}`);\n  console.log(\"Datos del día:\", Object.keys(diaData || {}));\n  console.log(\"Datos del muelle:\", Object.keys(diaData?.[muelleKey] || {}));\n  \n  if (!diaData || !diaData[muelleKey]) {\n    console.log(`No se encontraron datos para ${ubicacionCita.dia} ${muelleKey}`);\n    return [];\n  }\n  \n  // Buscar franjas consecutivas con los mismos datos de la cita\n  for (let i = indiceInicio; i < franjasOrdenadas.length; i++) {\n    const franja = franjasOrdenadas[i];\n    const datosFramja = diaData[muelleKey][franja.hora];\n    \n    console.log(`\\n--- Evaluando franja ${franja.hora} ---`);\n    console.log(\"Datos franja:\", datosFramja);\n    \n    if (!datosFramja) {\n      console.log(\"No hay datos para esta franja\");\n      break;\n    }\n    \n    // Comparaciones individuales para debug\n    const estadoOK = datosFramja.estado === 'ocupado';\n    const proveedorOK = datosFramja.proveedor && citaBD.nombre && \n      String(datosFramja.proveedor).trim().toLowerCase() === String(citaBD.nombre).trim().toLowerCase();\n    const ordenOK = String(datosFramja.ordenCompra) === String(citaBD.ordenCompra);\n    \n    console.log(`Estado OK: ${estadoOK} (${datosFramja.estado} === 'ocupado')`);\n    console.log(`Proveedor OK: ${proveedorOK} (\"${datosFramja.proveedor}\" === \"${citaBD.nombre}\")`);\n    console.log(`Orden OK: ${ordenOK} (${datosFramja.ordenCompra} === ${citaBD.ordenCompra})`);\n    \n    const mismaCita = datosFramja && estadoOK && proveedorOK && ordenOK;\n    \n    if (mismaCita) {\n      const filaBase = calcularFilaExcel(franja.hora, franjasOrdenadas);\n      if (filaBase) {\n        franjas.push({\n          hora: franja.hora,\n          fila: filaBase,\n          datos: {\n            proveedor: \"\",\n            ordenCompra: \"\",\n            peso: \"\",\n            categoria: \"\",\n            unidades: \"\"\n          }\n        });\n        console.log(`✅ Franja añadida: ${franja.hora}`);\n      }\n    } else {\n      console.log(`❌ No es la misma cita, deteniendo búsqueda`);\n      break;\n    }\n  }\n  \n  console.log(`=== RESULTADO: ${franjas.length} franjas encontradas ===`);\n  return franjas;\n}\n\n// Funciones auxiliares (mantener las mismas del nodo original)\nfunction calcularFilaExcel(hora, franjas) {\n  const franjasOrdenadas = [...franjas].sort((a, b) => {\n    function horaAMinutos(hora) {\n      const match = hora.match(/(\\\\d+):(\\\\d+)\\\\s*([AP]M)/i);\n      if (!match) return 0;\n      \n      let horas = parseInt(match[1], 10);\n      const minutos = parseInt(match[2], 10);\n      const periodo = match[3].toUpperCase();\n      \n      if (periodo === 'PM' && horas !== 12) {\n        horas += 12;\n      } else if (periodo === 'AM' && horas === 12) {\n        horas = 0;\n      }\n      \n      return horas * 60 + minutos;\n    }\n    \n    return horaAMinutos(a.hora) - horaAMinutos(b.hora);\n  });\n  \n  const posicion = franjasOrdenadas.findIndex(f => \n    f.hora.trim().toLowerCase() === hora.trim().toLowerCase()\n  );\n  \n  if (posicion === -1) {\n    console.log(`No se encontró la posición para la hora ${hora}`);\n    return null;\n  }\n  \n  const FILA_PRIMERA_FRANJA = 12;\n  const INCREMENTO_ESTANDAR = 3;\n  \n  if (posicion === 3) {\n    return 21;\n  } else if (posicion === 4) {\n    return 24;\n  } else if (posicion === 5) {\n    return 27;\n  } else if (posicion < 3) {\n    return FILA_PRIMERA_FRANJA + (posicion * INCREMENTO_ESTANDAR);\n  } else {\n    return 27 + ((posicion - 5) * INCREMENTO_ESTANDAR);\n  }\n}\n\nfunction procesarFranjas(franjas, nombreHoja) {\n  let actualizaciones = [];\n  \n  const diaSemana = ubicacionCita.dia;\n  const muelleKey = ubicacionCita.muelle.toLowerCase().includes(\"1\") ? \"muelle1\" : \"muelle2\";\n  \n  const mapeoColumnas = {\n    'lunes': { 'muelle1': 'C', 'muelle2': 'F' },\n    'martes': { 'muelle1': 'I', 'muelle2': 'L' },\n    'miércoles': { 'muelle1': 'O', 'muelle2': 'R' },\n    'jueves': { 'muelle1': 'U', 'muelle2': 'X' },\n    'viernes': { 'muelle1': 'AA', 'muelle2': 'AD' }\n  };\n  \n  if (!mapeoColumnas[diaSemana] || !mapeoColumnas[diaSemana][muelleKey]) {\n    console.log(`No hay mapeo para: día=${diaSemana}, muelle=${muelleKey}`);\n    return [];\n  }\n  \n  const columnaBase = mapeoColumnas[diaSemana][muelleKey];\n  \n  function siguienteColumna(columna) {\n    if (columna.length === 1) {\n      return String.fromCharCode(columna.charCodeAt(0) + 1);\n    } else {\n      const primerChar = columna.charAt(0);\n      const segundoChar = columna.charAt(1);\n      \n      if (segundoChar === 'Z') {\n        return String.fromCharCode(primerChar.charCodeAt(0) + 1) + 'A';\n      } else {\n        return primerChar + String.fromCharCode(segundoChar.charCodeAt(0) + 1);\n      }\n    }\n  }\n  \n  franjas.forEach((franja, index) => {\n    const filaBase = franja.fila;\n    const columnaLineas = siguienteColumna(columnaBase);\n    const columnaUnd = siguienteColumna(columnaLineas);\n    \n    const rangoCeldas = {\n      proveedor: `${columnaBase}${filaBase}`,\n      ordenCompra: `${columnaBase}${filaBase + 1}`,\n      peso: `${columnaBase}${filaBase + 2}`,\n      categoria: `${columnaLineas}${filaBase + 2}`,\n      unidades: `${columnaUnd}${filaBase + 2}`\n    };\n    \n    console.log(`Limpiando franja ${index + 1}: ${franja.hora} - Celdas: ${JSON.stringify(rangoCeldas)}`);\n    \n    // Para cancelación, todos los valores son vacíos\n    actualizaciones.push(\n      { celda: rangoCeldas.proveedor, valor: \"\", nombreHoja },\n      { celda: rangoCeldas.ordenCompra, valor: \"\", nombreHoja },\n      { celda: rangoCeldas.peso, valor: \"\", nombreHoja },\n      { celda: rangoCeldas.categoria, valor: \"\", nombreHoja },\n      { celda: rangoCeldas.unidades, valor: \"\", nombreHoja }\n    );\n  });\n  \n  return actualizaciones;\n}\n\n// Ejecutar la lógica de cancelación\nconst franjasACancelar = calcularFranjasOcupadas();\n\nif (franjasACancelar.length === 0) {\n  return {\n    json: {\n      error: true,\n      mensaje: \"No se pudieron identificar las franjas de la cita para cancelar\",\n      datosValidacion\n    }\n  };\n}\n\n// Usar la semana de la ubicación encontrada\nconst nombreHojaActual = ubicacionCita.malla;\n\n// Procesar las franjas para cancelación (limpieza)\nconst actualizacionesCancelacion = procesarFranjas(franjasACancelar, nombreHojaActual);\n\n// Preparar el formato para Microsoft Graph\nconst actualizacionesGraph = actualizacionesCancelacion.map(act => ({\n  address: act.celda,\n  values: [[act.valor]], // Valores vacíos para cancelación\n  nombreHoja: act.nombreHoja\n}));\n\n// Preparar el resultado\nreturn {\n  json: {\n    success: true,\n    accion: \"CANCELACION\",\n    mensaje: `Preparadas ${actualizacionesCancelacion.length} operaciones de limpieza para cancelar la cita ID ${citaBD.id}`,\n    nombreHoja: nombreHojaActual,\n    citaCancelada: {\n      id: citaBD.id,\n      proveedor: citaBD.nombre,\n      ordenCompra: citaBD.ordenCompra,\n      ubicacion: ubicacionCita\n    },\n    graphRequestData: {\n      updates: actualizacionesGraph\n    },\n    detalles: {\n      actualizacionesDetalladas: actualizacionesCancelacion,\n      franjasLimpiadas: franjasACancelar.length,\n      informacionCita: {\n        id: citaBD.id,\n        dia: ubicacionCita.dia,\n        hora: ubicacionCita.hora,\n        muelle: ubicacionCita.muelle,\n        proveedor: citaBD.nombre,\n        ordenCompra: citaBD.ordenCompra\n      }\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40864,
        -5296
      ],
      "id": "fa80aac7-08e2-49bc-a634-2a6b0966efd7",
      "name": "Code (Preparar Cuerpo de Petición)2"
    },
    {
      "parameters": {
        "jsCode": "// Código modificado para \"Code Agrupar Franjas3\" - CANCELACIÓN\n// Ahora devuelve los valores individuales igual que en crear cita\nconst input = $input.first().json;\n\n// Verificar que tenemos la estructura esperada\nif (!input || !input.graphRequestData || !input.graphRequestData.updates) {\n  console.log('Estructura de datos de entrada no válida');\n  return {\n    json: {\n      error: \"FORMATO_INVALIDO\",\n      mensaje: \"La estructura de datos de entrada no es válida\"\n    }\n  };\n}\n\nconst updates = input.graphRequestData.updates;\nconst resultados = [];\n\n// Recorremos cada actualización y creamos un item individual\nupdates.forEach((update, index) => {\n  // Para cancelación, el valor siempre es vacío\n  resultados.push({\n    json: {\n      valor: \"\", // Siempre vacío para cancelación\n      indice: Math.floor(index / 5) + 1, // Agrupar cada 5 items como una franja\n      nombreHoja: input.nombreHoja,\n      address: update.address,\n      informacionCita: input.detalles?.informacionCita || {},\n      accion: \"CANCELACION\"\n    }\n  });\n});\n\nconsole.log(`Se prepararon ${resultados.length} operaciones de limpieza para cancelación`);\nreturn resultados;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40672,
        -5296
      ],
      "id": "ff7044d7-2b4a-4535-a55d-2b7db6937df7",
      "name": "Code Agrupar Franjas3"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -40368,
        -5296
      ],
      "id": "2b5a69f1-0ca9-44f7-8629-686a937e27e4",
      "name": "Loop Over Uno a Uno2"
    },
    {
      "parameters": {
        "jsCode": "// Código para preparar cada limpieza (cancelación) para Microsoft Graph API\nconst input = $input.first().json;\n\n// Constantes para los IDs de SharePoint/OneDrive\nconst siteId = \"gexpresscargo.sharepoint.com,a592f886-4560-4e62-9646-1eee7add7abe,8b514073-41ae-4619-8f76-724bd912bc65\";\nconst driveId = \"b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8\";\nconst itemId = \"01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME\";\n\n// Verificar que tenemos la estructura esperada (igual que en crear cita)\nif (!input || input.valor === undefined || !input.address || !input.nombreHoja) {\n  console.log('Estructura de datos de entrada no válida para la cancelación');\n  return {\n    json: {\n      error: \"FORMATO_INVALIDO\",\n      mensaje: \"La estructura de datos de entrada no es válida para la cancelación\"\n    }\n  };\n}\n\n// Para cancelación, siempre usamos valor vacío\nconst valorFormateado = [[\"\"]];\n\n// Generar un ID único para esta solicitud\nconst requestId = `cancelacion_${input.address}_${input.indice}_${Date.now()}`;\n\n// Crear la estructura de solicitud para Microsoft Graph $batch\nconst requestBody = {\n  requests: [\n    {\n      id: requestId,\n      method: \"PATCH\",\n      url: `/sites/${siteId}/drives/${driveId}/items/${itemId}/workbook/worksheets/${encodeURIComponent(input.nombreHoja)}/range(address='${input.address}')`,\n      body: {\n        values: valorFormateado // Siempre [[\"\"]] para limpiar\n      },\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  ],\n  _metadata: {\n    celda: input.address,\n    valor: \"\", // Vacío para cancelación\n    indice: input.indice,\n    accion: input.accion || \"CANCELACION\",\n    informacionCita: input.informacionCita || {}\n  }\n};\n\nconsole.log(`Preparada solicitud ${requestId} para limpiar celda ${input.address} en la hoja \"${input.nombreHoja}\"`);\n\n// Retornar el objeto request listo para ser enviado a Microsoft Graph $batch\nreturn {\n  json: requestBody\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40112,
        -5184
      ],
      "id": "7449a60b-74b8-4d4d-b693-3d5e4b734a86",
      "name": "Code Preparar cada Insercion2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.microsoft.com/v1.0/$batch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -39872,
        -5184
      ],
      "id": "41d9f3a4-8a0b-4580-8fe6-c69e26411460",
      "name": "HTTP Request Actualizar Excel2",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Código para verificar si la limpieza fue exitosa (cancelación)\nconst input = $input.first().json;\n\n// Verificar que tenemos la estructura esperada en la respuesta\nif (!input || !input.responses || !Array.isArray(input.responses) || input.responses.length === 0) {\n  console.log('Estructura de datos de respuesta no válida');\n  return {\n    json: {\n      error: \"RESPUESTA_INVALIDA\",\n      mensaje: \"La estructura de datos de la respuesta no es válida\",\n      exito: false\n    }\n  };\n}\n\n// Obtener la primera respuesta\nconst response = input.responses[0];\n\n// Extraer información de la solicitud original del ID\nconst idPartes = response.id.split('_');\nconst tipoOperacion = idPartes[0]; // \"cancelacion\"\nconst celdaOriginal = idPartes[1];\nconst indice = idPartes[2];\n\n// Verificar que la respuesta tiene un cuerpo\nif (!response.body || !response.body.address) {\n  console.log(`Error: La respuesta no contiene información sobre la dirección de celda`);\n  return {\n    json: {\n      error: \"RESPUESTA_SIN_DIRECCION\",\n      mensaje: \"La respuesta no incluye información sobre la dirección de celda\",\n      requestId: response.id,\n      status: response.status,\n      celdaOriginal: celdaOriginal,\n      exito: false\n    }\n  };\n}\n\n// Extraer la dirección de celda de la respuesta\nlet direccionRespuesta = \"\";\nif (response.body && response.body.address) {\n  const partesDireccion = response.body.address.split('!');\n  if (partesDireccion.length > 1) {\n    direccionRespuesta = partesDireccion[1];\n  }\n}\n\n// Obtener el valor de la respuesta (debe ser vacío para cancelación)\nconst valorRespuesta = response.body.values && response.body.values[0] && response.body.values[0][0];\n\n// Verificar si la operación se realizó en la celda correcta\nconst celdaCorrecta = direccionRespuesta === celdaOriginal;\n\n// Verificar el código de estado HTTP\nconst estadoExitoso = response.status >= 200 && response.status < 300;\n\n// Para cancelación, también verificamos que el valor sea vacío\nconst valorCorrecto = tipoOperacion === \"cancelacion\" ? valorRespuesta === \"\" : true;\n\n// Crear objeto para almacenar el resultado de la verificación\nconst resultado = {\n  exito: celdaCorrecta && estadoExitoso && valorCorrecto,\n  tipoOperacion: tipoOperacion,\n  celdaOriginal: celdaOriginal,\n  celdaInsertada: direccionRespuesta,\n  valorInsertado: valorRespuesta,\n  statusCode: response.status,\n  requestId: response.id,\n  indice: indice,\n  celdasDiferentes: !celdaCorrecta && estadoExitoso,\n  falloEstado: !estadoExitoso,\n  falloValor: !valorCorrecto\n};\n\nconst chatId = $('Organiza el Mensaje').first().json.infoMensaje.chat_id;\n\nif (!resultado.exito) {\n  console.log(`Error en ${tipoOperacion}: celda=${celdaOriginal}, insertada=${direccionRespuesta}, status=${response.status}, valor=\"${valorRespuesta}\"`);\n} else {\n  console.log(`${tipoOperacion} exitosa en celda ${celdaOriginal}`);\n}\n\n// Incluir la respuesta original para tener toda la información\nresultado.respuestaOriginal = response;\n\n// Retornar el resultado de la verificación\nreturn {\n  json: resultado,\n  chat_id: chatId\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39632,
        -5184
      ],
      "id": "c5c825af-cf5b-431f-acf7-456afbe963b1",
      "name": "Code Verificar Inserción2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fb1eda05-eb5e-4683-8556-1cf2b5b8e4d5",
              "leftValue": "={{ $json.exito }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -39392,
        -5136
      ],
      "id": "93dbb7bb-efd9-4d49-8f83-317ee8d7c078",
      "name": "If Verificar Inserción2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "15a95144-dd82-4ea5-b9ba-9eb924d2ae5c",
              "leftValue": "={{ $json.celdasDiferentes }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -39168,
        -5056
      ],
      "id": "d22dbeb5-421a-4b5a-bfce-a0ab1f149a6b",
      "name": "If Diferente Caso2"
    },
    {
      "parameters": {
        "jsCode": "// Código para limpiar una celda donde se insertó incorrectamente un valor\n// Actualizado para manejar la nueva estructura con operaciones de inserción y eliminación\nconst input = $input.first().json;\n\n// Constantes para los IDs de SharePoint/OneDrive\nconst siteId = \"gexpresscargo.sharepoint.com,a592f886-4560-4e62-9646-1eee7add7abe,8b514073-41ae-4619-8f76-724bd912bc65\";\nconst driveId = \"b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8\";\nconst itemId = \"01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME\";\n\n// Verificar que tenemos la información necesaria\nif (!input || (!input.operaciones && !input.celdaInsertada)) {\n  console.log('Información insuficiente para limpiar la celda incorrecta');\n  return {\n    json: {\n      error: \"INFORMACION_INSUFICIENTE\",\n      mensaje: \"No hay suficiente información para limpiar la celda incorrecta\"\n    }\n  };\n}\n\n// Determinar qué celdas necesitan limpieza\nconst celdasALimpiar = [];\n\n// Verificar si estamos usando la nueva estructura con operaciones\nif (input.operaciones) {\n  // Nueva estructura: usar información de las operaciones\n  const { insercion, eliminacion } = input.operaciones;\n  \n  // Si la inserción falló, agregarla para limpieza\n  if (insercion && !insercion.exito && insercion.celdaRespuesta) {\n    celdasALimpiar.push({\n      celda: insercion.celdaRespuesta,\n      hoja: insercion.hoja || \"\"\n    });\n  }\n  \n  // Si la eliminación falló, agregarla para limpieza\n  if (eliminacion && !eliminacion.exito && eliminacion.celdaRespuesta) {\n    celdasALimpiar.push({\n      celda: eliminacion.celdaRespuesta,\n      hoja: eliminacion.hoja || \"\"\n    });\n  }\n} else {\n  // Estructura anterior: solo tenemos información de inserción\n  // Obtener la celda a limpiar y la información de la hoja\n  const celdaALimpiar = input.celdaInsertada;\n  let hojaExcel = input.nombreHoja || \"\"; // Usar el nombreHoja del input\n  \n  // Intentar extraer el nombre de la hoja de la dirección en la respuesta si no está disponible\n  if ((!hojaExcel || hojaExcel === \"\") && input.respuestaOriginal?.body?.address) {\n    const direccionCompleta = input.respuestaOriginal.body.address;\n    hojaExcel = direccionCompleta.split('!')[0].replace(/'/g, '');\n  }\n  \n  celdasALimpiar.push({\n    celda: celdaALimpiar,\n    hoja: hojaExcel\n  });\n}\n\n// Si no hay celdas para limpiar, devolver error\nif (celdasALimpiar.length === 0) {\n  console.log('No se identificaron celdas para limpiar');\n  return {\n    json: {\n      error: \"NO_HAY_CELDAS\",\n      mensaje: \"No se identificaron celdas que necesiten limpieza\",\n      input: input\n    }\n  };\n}\n\n// Crear solicitudes para limpiar cada celda identificada\nconst solicitudes = celdasALimpiar.map((info, index) => {\n  console.log(`Limpiando celda incorrecta ${info.celda} en hoja ${info.hoja}`);\n  \n  return {\n    id: `Limpiar_${info.celda}_${Date.now()}_${index}`,\n    method: \"PATCH\",\n    url: `/sites/${siteId}/drives/${driveId}/items/${itemId}/workbook/worksheets/${encodeURIComponent(info.hoja)}/range(address='${info.celda}')`,\n    body: {\n      values: [[\"\"]] // Valor vacío para limpiar la celda\n    },\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n});\n\n// Crear la solicitud para limpiar las celdas\nconst requestBody = {\n  requests: solicitudes,\n  _metadata: {\n    accion: \"limpiar\",\n    celdasLimpiadas: celdasALimpiar,\n    datoOriginal: input\n  }\n};\n\n// Retornar el request para limpiar la celda\nreturn {\n  json: requestBody\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -38864,
        -5232
      ],
      "id": "2b1e4e0f-c760-45d3-a426-839d2ec11519",
      "name": "Code Limpiar Celda Incorrecta2",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.microsoft.com/v1.0/$batch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -38640,
        -5232
      ],
      "id": "1675770a-3692-45cc-b08f-f814074e64e7",
      "name": "HTTP Request Limpiar Celda2",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e570827e-13d0-4d6f-b23e-184ca2d3368c",
              "leftValue": "={{ $json.falloEstado }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -38704,
        -4848
      ],
      "id": "b67b1801-706b-4b20-b6dc-6304cf0966de",
      "name": "If fallo Estado2"
    },
    {
      "parameters": {
        "jsCode": "// Código para reintentar la inserción en la celda correcta\n// Actualizado para manejar la nueva estructura con operaciones de inserción y eliminación\nconst input = $input.first().json;\n\n// Constantes para los IDs de SharePoint/OneDrive\nconst siteId = \"gexpresscargo.sharepoint.com,a592f886-4560-4e62-9646-1eee7add7abe,8b514073-41ae-4619-8f76-724bd912bc65\";\nconst driveId = \"b!hviSpWBFYk6WRh7uet16vnNAUYuuQRlGj3ZyS9kSvGVZ4DSg6c5MRqYYm2MdAER8\";\nconst itemId = \"01PPLUUYXY5E2GK3SJ25EZLJPUYJ43H3ME\";\n\n// Si el input viene del nodo anterior de limpiar celda, extraer el dato original\nconst datoOriginal = input._metadata?.datoOriginal || input;\n\n// Verificar que tenemos la información necesaria\nif (!datoOriginal) {\n  console.log('Información insuficiente para reintentar la inserción/eliminación');\n  return {\n    json: {\n      error: \"INFORMACION_INSUFICIENTE\",\n      mensaje: \"No hay suficiente información para reintentar las operaciones\"\n    }\n  };\n}\n\n// Operaciones a reintentar\nconst operacionesAReintentar = [];\n\n// Determinar qué operaciones necesitan reintento\nif (datoOriginal.operaciones) {\n  // Nueva estructura: evaluar inserción y eliminación\n  const { insercion, eliminacion } = datoOriginal.operaciones;\n  \n  // Verificar si la inserción necesita reintento\n  if (insercion && !insercion.exito) {\n    operacionesAReintentar.push({\n      tipo: \"insercion\",\n      celda: insercion.celda,\n      valor: insercion.valor,\n      hoja: insercion.hoja || datoOriginal.resultadoDetallado?.operaciones?.insercion?.hoja || \"\"\n    });\n  }\n  \n  // Verificar si la eliminación necesita reintento\n  if (eliminacion && !eliminacion.exito) {\n    operacionesAReintentar.push({\n      tipo: \"eliminacion\",\n      celda: eliminacion.celda,\n      valor: \"\", // Para eliminación, siempre usamos valor vacío\n      hoja: eliminacion.hoja || datoOriginal.resultadoDetallado?.operaciones?.eliminacion?.hoja || \"\"\n    });\n  }\n} else {\n  // Estructura anterior: solo tenemos información de inserción\n  // Obtener la celda correcta donde insertar y el valor a insertar\n  const celdaCorrecta = datoOriginal.celdaOriginal;\n  \n  // Intentar obtener el valor correcto a insertar\n  let valorAInsertar;\n  \n  // Primero, verificar si tenemos el valor de la respuesta original\n  if (datoOriginal.valorInsertado !== undefined) {\n    valorAInsertar = datoOriginal.valorInsertado;\n  } \n  // Si no, intentar obtenerlo del body de la respuesta\n  else if (datoOriginal.respuestaOriginal?.body?.values?.[0]?.[0] !== undefined) {\n    valorAInsertar = datoOriginal.respuestaOriginal.body.values[0][0];\n  } \n  // Como último recurso, usar un valor vacío\n  else {\n    valorAInsertar = \"\";\n    console.log('No se pudo determinar el valor a insertar, usando valor vacío');\n  }\n  \n  // Obtener la hoja de Excel - primero del dato original\n  let hojaExcel = datoOriginal.nombreHoja || \"\"; \n  \n  // Si no está disponible en el objeto principal, intentar obtenerlo de otros lugares\n  if (!hojaExcel || hojaExcel === \"\") {\n    // Verificar si está en el _metadata\n    hojaExcel = input._metadata?.hoja || \"\";\n    \n    // Como último recurso, extraer de la dirección en la respuesta\n    if ((!hojaExcel || hojaExcel === \"\") && datoOriginal.respuestaOriginal?.body?.address) {\n      const direccionCompleta = datoOriginal.respuestaOriginal.body.address;\n      hojaExcel = direccionCompleta.split('!')[0].replace(/'/g, '');\n    }\n  }\n  \n  operacionesAReintentar.push({\n    tipo: \"insercion\",\n    celda: celdaCorrecta,\n    valor: valorAInsertar,\n    hoja: hojaExcel\n  });\n}\n\n// Si no hay operaciones para reintentar, devolver error\nif (operacionesAReintentar.length === 0) {\n  console.log('No se identificaron operaciones para reintentar');\n  return {\n    json: {\n      error: \"NO_HAY_OPERACIONES\",\n      mensaje: \"No se identificaron operaciones que necesiten reintento\",\n      input: datoOriginal\n    }\n  };\n}\n\n// Crear solicitudes para cada operación a reintentar\nconst solicitudes = operacionesAReintentar.map((op, index) => {\n  // Determinar el tipo de valor y formatearlo adecuadamente\n  let valorFormateado;\n  if (typeof op.valor === 'number') {\n    valorFormateado = [[op.valor]]; // Mantener el tipo numérico\n  } else {\n    valorFormateado = [[op.valor.toString()]]; // Convertir a string para otros tipos\n  }\n  \n  console.log(`Reintentando ${op.tipo} en celda ${op.celda} de la hoja ${op.hoja} con valor \"${op.valor}\"`);\n  \n  return {\n    id: `Reintento_${op.tipo}_${op.celda}_${Date.now()}_${index}`,\n    method: \"PATCH\",\n    url: `/sites/${siteId}/drives/${driveId}/items/${itemId}/workbook/worksheets/${encodeURIComponent(op.hoja)}/range(address='${op.celda}')`,\n    body: {\n      values: valorFormateado\n    },\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n});\n\n// Crear la solicitud para reintentar las operaciones\nconst requestBody = {\n  requests: solicitudes,\n  _metadata: {\n    accion: \"reintentar\",\n    operaciones: operacionesAReintentar,\n    datoOriginal: datoOriginal,\n    intentos: (datoOriginal._metadata?.intentos || 0) + 1\n  }\n};\n\n// Retornar el request para reintentar las operaciones\nreturn {\n  json: requestBody\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -38368,
        -5168
      ],
      "id": "66f947ec-61f3-443f-9f5c-85728a0678cd",
      "name": "Code Reintentar Inserción2",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.microsoft.com/v1.0/$batch",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -38128,
        -5056
      ],
      "id": "203192e9-3794-4908-9bf3-6d649f26d7a1",
      "name": "HTTP Request Reintentar Inserción2",
      "credentials": {
        "microsoftOAuth2Api": {
          "id": "mh8Z8hxFvd7LDO8D",
          "name": "CuentaMy SharePoint App Desarrollador1 Konfie "
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Código para verificar si la inserción y eliminación fueron exitosas\n// Actualizado para manejar la nueva estructura\nconst input = $input.first().json;\n\n// Verificar que tenemos la estructura esperada en la respuesta\nif (!input || !input.responses || !Array.isArray(input.responses)) {\n  console.log('Estructura de datos de respuesta no válida');\n  return {\n    json: {\n      error: \"RESPUESTA_INVALIDA\",\n      mensaje: \"La estructura de datos de la respuesta no es válida\",\n      exito: false\n    }\n  };\n}\n\n// Si no hay respuestas, devolver error\nif (input.responses.length === 0) {\n  console.log('No se recibieron respuestas del servidor');\n  return {\n    json: {\n      error: \"SIN_RESPUESTAS\",\n      mensaje: \"No se recibieron respuestas del servidor\",\n      exito: false\n    }\n  };\n}\n\n// Analizar las respuestas para determinar a qué operación corresponde cada una\nconst respuestas = input.responses.map(response => {\n  // Extraer información del ID de la respuesta\n  const idPartes = response.id.split('_');\n  const tipoOperacion = idPartes[0].toLowerCase(); // \"reintento\", \"limpiar\", etc.\n  const tipoEntidad = idPartes[1]?.toLowerCase(); // \"insercion\", \"eliminacion\", etc.\n  const celda = idPartes[2] || \"\"; // La celda como I21, K23, etc.\n  \n  // Extraer información de la dirección en la respuesta\n  let direccionRespuesta = \"\";\n  let hojaExcel = \"\";\n  \n  if (response.body && response.body.address) {\n    const direccionCompleta = response.body.address;\n    const partesDireccion = direccionCompleta.split('!');\n    \n    if (partesDireccion.length > 1) {\n      // Quitar las comillas simples del nombre de la hoja\n      hojaExcel = partesDireccion[0].replace(/'/g, '');\n      direccionRespuesta = partesDireccion[1];\n    }\n  }\n  \n  // Obtener el valor de la respuesta\n  const valor = response.body?.values?.[0]?.[0];\n  \n  // Verificar si la operación fue exitosa (código 200-299)\n  const estadoExitoso = response.status >= 200 && response.status < 300;\n  \n  // Verificar si la celda en la respuesta coincide con la esperada\n  const celdaCorrecta = direccionRespuesta === celda;\n  \n  return {\n    id: response.id,\n    tipoOperacion,\n    tipoEntidad,\n    celda,\n    direccionRespuesta,\n    hoja: hojaExcel,\n    valor,\n    estadoExitoso,\n    celdaCorrecta,\n    statusCode: response.status,\n    respuesta: response\n  };\n});\n\n// Separar las respuestas por tipo de operación\nconst respuestasInsercion = respuestas.filter(r => \n  r.tipoEntidad === \"insercion\" || \n  (r.tipoOperacion === \"reintento\" && input._metadata?.operaciones?.[0]?.tipo === \"insercion\")\n);\n\nconst respuestasEliminacion = respuestas.filter(r => \n  r.tipoEntidad === \"eliminacion\" || \n  (r.tipoOperacion === \"reintento\" && input._metadata?.operaciones?.[0]?.tipo === \"eliminacion\")\n);\n\n// Determinar éxito por tipo de operación\nconst insercionExitosa = respuestasInsercion.length > 0 && \n                        respuestasInsercion.every(r => r.estadoExitoso && r.celdaCorrecta);\n\nconst eliminacionExitosa = respuestasEliminacion.length > 0 && \n                          respuestasEliminacion.every(r => r.estadoExitoso && r.celdaCorrecta);\n\n// Determinar éxito global basado en las operaciones presentes\nlet exitoGlobal;\n\nif (respuestasInsercion.length > 0 && respuestasEliminacion.length > 0) {\n  // Si hay ambas operaciones, ambas deben ser exitosas\n  exitoGlobal = insercionExitosa && eliminacionExitosa;\n} else if (respuestasInsercion.length > 0) {\n  // Si solo hay inserción, solo esa debe ser exitosa\n  exitoGlobal = insercionExitosa;\n} else if (respuestasEliminacion.length > 0) {\n  // Si solo hay eliminación, solo esa debe ser exitosa\n  exitoGlobal = eliminacionExitosa;\n} else {\n  // Si no hay operaciones identificables, considerar como no exitoso\n  exitoGlobal = false;\n}\n\n// Obtener la información más relevante para cada tipo de operación\nconst infoInsercion = respuestasInsercion.length > 0 ? respuestasInsercion[0] : null;\nconst infoEliminacion = respuestasEliminacion.length > 0 ? respuestasEliminacion[0] : null;\n\n// Crear el resultado detallado\nconst resultadoDetallado = {\n  exito: exitoGlobal,\n  operaciones: {\n    insercion: infoInsercion ? {\n      exito: infoInsercion.estadoExitoso && infoInsercion.celdaCorrecta,\n      celda: infoInsercion.celda,\n      direccionRespuesta: infoInsercion.direccionRespuesta,\n      hoja: infoInsercion.hoja,\n      valor: infoInsercion.valor,\n      statusCode: infoInsercion.statusCode\n    } : null,\n    eliminacion: infoEliminacion ? {\n      exito: infoEliminacion.estadoExitoso && infoEliminacion.celdaCorrecta,\n      celda: infoEliminacion.celda,\n      direccionRespuesta: infoEliminacion.direccionRespuesta,\n      hoja: infoEliminacion.hoja,\n      valor: infoEliminacion.valor,\n      statusCode: infoEliminacion.statusCode\n    } : null\n  },\n  mensaje: exitoGlobal ? \n    \"Todas las operaciones se completaron exitosamente\" : \n    \"Hubo problemas con una o más operaciones\",\n  respuestasCompletas: respuestas\n};\n\n// Crear el resultado compatible con el formato anterior\nconst resultadoCompatible = {\n  exito: exitoGlobal,\n  // Usar la primera respuesta para compatibilidad\n  celdaOriginal: infoInsercion?.celda || infoEliminacion?.celda || \"\",\n  celdaInsertada: infoInsercion?.direccionRespuesta || infoEliminacion?.direccionRespuesta || \"\",\n  valorInsertado: infoInsercion?.valor || infoEliminacion?.valor || \"\",\n  statusCode: infoInsercion?.statusCode || infoEliminacion?.statusCode || 0,\n  requestId: infoInsercion?.id || infoEliminacion?.id || \"\",\n  indice: infoInsercion?.celda || infoEliminacion?.celda || \"\",\n  celdasDiferentes: (infoInsercion && infoInsercion.celda !== infoInsercion.direccionRespuesta) ||\n                   (infoEliminacion && infoEliminacion.celda !== infoEliminacion.direccionRespuesta),\n  falloEstado: !exitoGlobal,\n  // Información adicional para la versión mejorada\n  resultadoDetallado: resultadoDetallado\n};\n\n// Registrar el resultado en consola\nif (exitoGlobal) {\n  console.log(\"Operaciones completadas exitosamente:\");\n  if (infoInsercion) {\n    console.log(`- Inserción en hoja ${infoInsercion.hoja}, celda ${infoInsercion.celda}, valor: \"${infoInsercion.valor}\"`);\n  }\n  if (infoEliminacion) {\n    console.log(`- Eliminación en hoja ${infoEliminacion.hoja}, celda ${infoEliminacion.celda}`);\n  }\n} else {\n  console.log(\"Problemas detectados en las operaciones:\");\n  if (infoInsercion && (!infoInsercion.estadoExitoso || !infoInsercion.celdaCorrecta)) {\n    console.log(`- Fallo en inserción: celda=${infoInsercion.celda}, dirección respuesta=${infoInsercion.direccionRespuesta}, status=${infoInsercion.statusCode}`);\n  }\n  if (infoEliminacion && (!infoEliminacion.estadoExitoso || !infoEliminacion.celdaCorrecta)) {\n    console.log(`- Fallo en eliminación: celda=${infoEliminacion.celda}, dirección respuesta=${infoEliminacion.direccionRespuesta}, status=${infoEliminacion.statusCode}`);\n  }\n}\n\n// Retornar el resultado\nreturn {\n  json: resultadoCompatible\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -37904,
        -5056
      ],
      "id": "fd8d9aec-7d9d-4d0c-a8a3-afcd24b69913",
      "name": "Code Volver a validar Inserción2",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f7205e4e-147c-4e77-8fa8-08d082980b48",
              "leftValue": "={{ $json.exito }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -37680,
        -5056
      ],
      "id": "1ec7ccbf-561d-42f5-ae8f-5c9f6a3b38aa",
      "name": "If Verificar Inserción 1"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -38784,
        -5056
      ],
      "id": "4cff27b1-e4f9-4d9c-ae3e-2a3ada2bd406",
      "name": "Wait6",
      "webhookId": "a4bbf2b1-ea0c-4b02-af2c-64b29f2bdb5c"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -37392,
        -4864
      ],
      "id": "8a67076b-8ee2-4c36-9b00-f250c3906744",
      "name": "Wait7",
      "webhookId": "9d944db7-9c4f-439e-9990-d9937f2fb18e"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -36944,
        -4512
      ],
      "id": "2a328526-2f36-4110-9695-902c9973d1d0",
      "name": "OpenAI Chat Model18",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=Eres un asistente de un sistema de agendamiento de citas para la entrega de mercancía en bodega. Debes notificar al cliente que ha ocurrido un error en el sistema durante el proceso de cancelación de la cita.\n\nGenera un mensaje directo aplicando estos principios de UX para WhatsApp:\n\n**FORMATO Y ESTRUCTURA:**\n1. Usa *negritas* para información crítica como tiempo límite y acciones urgentes\n2. Usa emojis estratégicos: 🚨 (urgente), ⚠️ (error), ⏰ (tiempo límite), 📞 (contacto), 🛠️ (técnico), 🚫 (cancelación)\n3. Estructura la información de forma jerárquica y visual\n4. Destaca el tiempo límite de *5 minutos* con formato apropiado\n\n**CONTENIDO REQUERIDO:**\n1. 🚨 Comunica claramente que ocurrió un *error técnico* al cancelar la cita\n2. ⏰ Indica urgentemente que se comunique con el área de bodega en los próximos *5 minutos*\n3. 🚫 Solicita que cancelen la cita *manualmente* por este inconveniente\n4. 🛠️ Aclara que es una situación *poco común* por inconveniente técnico\n5. 🙏 Pide disculpas y agradece la comprensión\n\n**TONO:** Urgente pero profesional, enfatizando acción inmediata para completar la cancelación.\n\n**EJEMPLO DE ESTRUCTURA ESPERADA:**\n🚨 *Error técnico en cancelación*\n\n⚠️ No pudimos cancelar tu cita debido a un *inconveniente técnico* en el sistema.\n\n⏰ *URGENTE:* Comunícate con el área de bodega en los próximos *5 minutos* para que puedan *cancelar tu cita manualmente*.\n\n🛠️ Esta situación es *poco común* y se debe a un inconveniente técnico...\n\n🙏 Disculpas por los inconvenientes...\n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -36864,
        -4736
      ],
      "id": "1229d188-a62b-4f86-9f98-ccd8887d647a",
      "name": "Basic LLM Notificar No Disponibilidad4",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('Basic LLM Notificar No Disponibilidad4').item.json.text.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -36464,
        -4544
      ],
      "id": "eb7c7c7a-382b-47c3-b73b-10b59b6a9b17",
      "name": "Validación de longitud de caracteres16"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Basic LLM Notificar No Disponibilidad4').item.json.text }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Basic LLM Notificar No Disponibilidad4').item.json.text.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -36160,
        -4528
      ],
      "id": "96ec147f-c142-4ad6-90e0-47cfc68b384b",
      "name": "Organiza variables del mensaje15"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -35984,
        -4752
      ],
      "id": "743d8b9c-e5b4-4bbf-a4c8-f25e59e616e2",
      "name": "No Operation, do nothing20"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -36160,
        -4752
      ],
      "id": "46929248-459e-4ac3-aee5-df490b31552e",
      "name": "HTTP Request Enviar Mensaje por WhatsApp19"
    },
    {
      "parameters": {
        "jsCode": "/*\n===========================================================\n  Nodo Code - VALIDAR INSERCIONES EN EXCEL (n8n)\n  • Analiza la salida del “Loop Over Uno a Uno”.\n  • Agrupa los ítems por franja (campo `indice` si existe;\n    de lo contrario, cada bloque de 5 ítems forma una franja).\n  • Verifica que cada inserción tenga:\n        exito === true\n        statusCode === 200\n        falloEstado === false\n  • Devuelve un único objeto JSON con:\n        – Resumen global.\n        – Detalle por franja (éxitos / fallos y celdas con error).\n===========================================================\n*/\n\n// 1) Obtener todos los ítems que llegan al nodo\nconst items = $input.all();\n\n// 2) Función auxiliar para determinar el identificador de la franja\nfunction obtenerIdFranja(item, idx) {\n  // Si existe 'indice', úsalo; de lo contrario agrupa cada 5 ítems\n  if (item.json && item.json.indice !== undefined && item.json.indice !== null) {\n    return String(item.json.indice).trim();\n  }\n  // +1 para que las franjas queden 1-basadas\n  return String(Math.floor(idx / 5) + 1);\n}\n\n// 3) Agrupar ítems por franja\nconst franjas = {};\nitems.forEach((item, idx) => {\n  const idFranja = obtenerIdFranja(item, idx);\n  if (!franjas[idFranja]) {\n    franjas[idFranja] = { id: idFranja, items: [] };\n  }\n  franjas[idFranja].items.push(item.json);\n});\n\n// 4) Analizar cada franja y construir el detalle\nconst detallesPorFranja = Object.values(franjas).map(franja => {\n  const totalOps   = franja.items.length;\n  const exitosas   = franja.items.filter(i =>\n    i.exito === true &&\n    i.statusCode === 200 &&\n    i.falloEstado === false\n  ).length;\n\n  const fallidas   = totalOps - exitosas;\n  const exitoTotal = fallidas === 0;\n\n  // Celdas con error para un diagnóstico claro\n  const celdasFallidas = franja.items\n    .filter(i => !(i.exito && i.statusCode === 200 && !i.falloEstado))\n    .map(i => ({\n      celdaOriginal   : i.celdaOriginal,\n      celdaInsertada  : i.celdaInsertada,\n      statusCode      : i.statusCode,\n      falloEstado     : i.falloEstado,\n      celdasDiferentes: i.celdasDiferentes,\n      mensaje         : 'Inserción fallida'\n    }));\n\n  return {\n    idFranja                : franja.id,\n    exitoFranja             : exitoTotal,\n    operacionesTotales      : totalOps,\n    operacionesExitosas     : exitosas,\n    operacionesFallidas     : fallidas,\n    porcentajeExitosas      : ((exitosas / totalOps) * 100).toFixed(2) + '%',\n    celdasFallidas\n  };\n});\n\n// 5) Resumen global\nconst operacionesTotales   = items.length;\nconst operacionesExitosas  = detallesPorFranja.reduce((sum, f) => sum + f.operacionesExitosas, 0);\nconst operacionesFallidas  = operacionesTotales - operacionesExitosas;\n\nconst franjasTotales   = detallesPorFranja.length;\nconst franjasExitosas  = detallesPorFranja.filter(f => f.exitoFranja).length;\nconst franjasFallidas  = franjasTotales - franjasExitosas;\n\n\nconst resumen = {\n  estadoGeneral              : franjasFallidas === 0 ? 'ÉXITO_COMPLETO' : 'ÉXITO_PARCIAL',\n  franjasTotales,\n  franjasExitosas,\n  franjasFallidas,\n  porcentajeFranjasExitosas  : ((franjasExitosas / franjasTotales) * 100).toFixed(2) + '%',\n  operacionesTotales,\n  operacionesExitosas,\n  operacionesFallidas,\n  porcentajeOperacionesExitosas : ((operacionesExitosas / operacionesTotales) * 100).toFixed(2) + '%',\n  detallesPorFranja\n};\n\n// 6) Devolver un único ítem con el resumen\nreturn [\n  {\n    json: resumen\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39984,
        -5392
      ],
      "id": "4a50c0b1-9d95-4b03-b79a-34d93e6226d1",
      "name": "Code Validar inserciones2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8c501d95-bdf3-4635-a037-224926c2528d",
              "leftValue": "={{ $json.estadoGeneral }}",
              "rightValue": "ÉXITO_COMPLETO",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -39568,
        -5392
      ],
      "id": "ce5c729c-3e20-4d73-b830-8b12fdce870e",
      "name": "If Validar inserciones2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -39088,
        -5472
      ],
      "id": "b334ef9a-dcce-419c-a4f9-c778aedaf031",
      "name": "Merge6"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -36512,
        -5072
      ],
      "id": "875351c8-7d5a-405a-a5d3-2f939b98863f",
      "name": "Merge7"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -36192,
        -4976
      ],
      "id": "d0aed0fb-2d9e-4294-bf07-623b5655dd61",
      "name": "OpenAI Chat Model19",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4bfbecb3-9d4f-4425-aa76-a92abc7708fb",
              "leftValue": "={{ $('Basic LLM Notificar Cancelar Cita').item.json.text.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -35648,
        -5008
      ],
      "id": "b95a5775-9d4c-47c2-8806-2229de4f861c",
      "name": "Validación de longitud de caracteres17"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Basic LLM Notificar Cancelar Cita').item.json.text }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Basic LLM Notificar Cancelar Cita').item.json.text.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -35344,
        -4896
      ],
      "id": "f88f0e9b-c886-4314-9e20-74b6b9a06b03",
      "name": "Organiza variables del mensaje16"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -35184,
        -5104
      ],
      "id": "95733277-5bc2-49da-8261-024bfc760ebe",
      "name": "No Operation, do nothing21"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code Respuesta Faltantes').item.json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -35360,
        -5104
      ],
      "id": "e610f008-9624-4d3f-b4a1-892c24a4f811",
      "name": "HTTP Request Enviar Mensaje por WhatsApp20"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "BEGIN TRANSACTION;\n\nDELETE FROM MensajesWhatsApp\nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n   OR (chat_id = 'agenteAI'\n       AND message_id IN (\n           SELECT message_id \n           FROM MensajesWhatsApp\n           WHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n       )\n   );\n\nDELETE FROM FranjasDisponiblesTemp \nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}';\n\n-- Resetear estado conversacional a INICIAL después de cancelación exitosa\nUPDATE EstadoConversacional \nSET estado_actual = 'INICIAL', \n    contexto_proceso = '{\"descripcion\": \"Cita cancelada exitosamente, conversación reiniciada\", \"ultima_accion\": \"cita_cancelada\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n    contador_fuera_contexto = 0,\n    ultimo_mensaje_fuera_contexto = NULL,\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}';\n\n-- Si no existe el registro, crear uno en estado INICIAL\nIF @@ROWCOUNT = 0\nBEGIN\n    INSERT INTO EstadoConversacional (chat_id, estado_actual, contexto_proceso, fecha_creacion, fecha_actualizacion)\n    VALUES (\n        '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}', \n        'INICIAL', \n        '{\"descripcion\": \"Cita cancelada exitosamente, conversación reiniciada\", \"ultima_accion\": \"cita_cancelada\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n        GETDATE(),\n        GETDATE()\n    );\nEND\n\nCOMMIT;\n"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -37072,
        -4848
      ],
      "id": "3a8e69d2-5cf4-4b00-a715-80dc1193ff20",
      "name": "Microsoft SQL Eliminar Mensajes5",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @id           INT = {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.id }};\nDECLARE @nowBogota    DATETIME;\n\n/* Obtener fecha/hora actual en Bogotá */\nSET @nowBogota = CONVERT(DATETIME, SYSDATETIMEOFFSET() AT TIME ZONE 'SA Pacific Standard Time');\n\n/* UPDATE para CANCELACIÓN */\nUPDATE dbo.CitasRecepcion\nSET estado = N'CANCELADA',\n    fecha_modificacion = @nowBogota\nWHERE id = @id;\n\n/* Devolver la fila modificada */\nSELECT *\nFROM dbo.CitasRecepcion\nWHERE id = @id;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -37440,
        -5312
      ],
      "id": "f9d79530-bb8d-4660-8b1b-abf037438e85",
      "name": "Microsoft SQLUpdate Cita Anterior1",
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Código para preparar datos de CANCELACIÓN\nconst datosValidacion = $('Code validación de cita en malla').first().json.datosValidacion;\nconst citaBD = datosValidacion.citaBD;\nconst chatId = $('Organiza el Mensaje').first().json.infoMensaje.chat_id;\nconst historialMensajes = $('Unificación y consistencia de datos').first().json.infoMensaje.historialMensajes;\n\nconsole.log(`Preparando datos para cancelación de cita ID ${citaBD.id}`);\n\nconst datosCancelacion = {\n  // Datos identificadores\n  id: citaBD.id,\n  chat_id: chatId,\n  \n  // Datos de la cita cancelada\n  proveedor: citaBD.nombre,\n  orden_compra: citaBD.ordenCompra,\n  peso: citaBD.peso,\n  unidades: citaBD.unidades,\n  fecha_cita_original: citaBD.fechaCita,\n  \n  // Estado y auditoría\n  estado_anterior: \"PROGRAMADA\",\n  estado_nuevo: \"CANCELADA\",\n  chat_historial: historialMensajes,\n  fecha_cancelacion: new Date().toISOString(),\n  \n  // Información adicional\n  ubicacion_malla: datosValidacion.ubicacion,\n  accion: \"CANCELACION\",\n  motivo: \"cancelacion_por_proveedor\"\n};\n\nconsole.log(`Cancelación preparada: ${datosCancelacion.proveedor} - O/C: ${datosCancelacion.orden_compra}`);\n\nreturn {\n  json: datosCancelacion\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -39984,
        -5616
      ],
      "id": "788bde05-4ff0-44fe-93e1-575b520b0ab0",
      "name": "Code Datos Cancelar Cita"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=-- Actualizar estado a CANCELANDO_CITA cuando se está procesando la cancelación\nUPDATE EstadoConversacional \nSET estado_actual = 'CANCELANDO_CITA', \n    contexto_proceso = '{\"descripcion\": \"Procesando cancelación de cita\", \"id_cita_cancelando\": \"{{ $json.id }}\", \"proveedor\": \"{{ $json.proveedor }}\", \"orden_compra\": \"{{ $json.orden_compra }}\", \"fecha_cita_original\": \"{{ $json.fecha_cita_original }}\", \"accion\": \"cancelacion_en_proceso\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $json.chat_id }}';\n\n-- Si no existe el registro, crear uno nuevo\nIF @@ROWCOUNT = 0\nBEGIN\n    INSERT INTO EstadoConversacional (chat_id, estado_actual, contexto_proceso, fecha_creacion, fecha_actualizacion)\n    VALUES (\n        '{{ $json.chat_id }}', \n        'CANCELANDO_CITA', \n        '{\"descripcion\": \"Procesando cancelación de cita\", \"id_cita_cancelando\": \"{{ $json.id }}\", \"proveedor\": \"{{ $json.proveedor }}\", \"orden_compra\": \"{{ $json.orden_compra }}\", \"fecha_cita_original\": \"{{ $json.fecha_cita_original }}\", \"accion\": \"cancelacion_en_proceso\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n        GETDATE(),\n        GETDATE()\n    );\nEND\n\n-- Confirmar actualización\nSELECT \n  'CANCELANDO_CITA' as nuevo_estado,\n  'CANCELACION_EN_PROCESO' as tipo_actualizacion,\n  '{{ $json.chat_id }}' as chat_id,\n  '{{ $json.id }}' as id_cita,\n  GETDATE() as timestamp_actualizacion;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -37056,
        -5312
      ],
      "id": "fa96304e-8fe8-4ec5-81dd-befc9e5da70d",
      "name": "Estado SQL - CANCELANDO_CITA",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=# Rol\nEres el asistente virtual de **Konfíe Logistics**.  \nTu objetivo es notificar al proveedor que su cita se **canceló exitosamente**.\n\n# Datos disponibles  \n- idCita           = {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.id }}  \n- ordenCompra      = {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.ordenCompra }}\n- proveedor        = {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.nombre }}\n- peso             = {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.peso }}\n- unidades         = {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.unidades }}\n- fechaCita        = {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.fechaCita }}\n- ubicacionMalla   = {{ $('Code validación de cita en malla').first().json.datosValidacion.ubicacion }}\n\n# Instrucciones de redacción\n1. Mantén un tono profesional, comprensivo y servicial.  \n2. Empieza confirmando la cancelación exitosa (ej: \"✅ Cancelación confirmada\" o \"🚫 Cita cancelada exitosamente\").  \n3. Muestra los **detalles de la cita cancelada** con emojis:  \n   • 🔖 **Cita cancelada:** {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.id }}\n   • 👤 **Proveedor:** {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.nombre }}\n   • 🏷️ **O/C:** {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.ordenCompra }}\n   • 📅 **Fecha programada:** {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.fechaCita }}\n   • ⚖️ **Peso:** {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.peso }} kg\n   • 📦 **Unidades:** {{ $('Code validación de cita en malla').first().json.datosValidacion.citaBD.unidades }}\n4. Informa que si necesita **agendar una nueva cita**, puede iniciar una nueva conversación.\n5. Agradece por haber notificado la cancelación con anticipación.\n6. Devuelve **solo** el mensaje final, sin encabezados.\n\n# Salida esperada (ejemplo de estilo)\n\n✅ *¡Cancelación exitosa!* 🚫\n\n📋 *Datos de la cita cancelada:*\n🆔 *Número de cita:* ```12345```\n👤 *Proveedor:* SPB COLOMBIA S.A.S\n🏷️ *Orden de Compra:* ARGM47896\n📅 *Fecha programada:* 10 de junio de 2025\n⚖️ *Peso:* 300 kg\n📊 *Unidades:* 600\n\n🔄 *¿Necesitas una nueva cita?*\nPuedes iniciar una nueva conversación cuando gustes.\n\n🙏 *¡Gracias por avisar con anticipación!* Esto nos ayuda a optimizar nuestros horarios."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -36080,
        -5152
      ],
      "id": "8741e12c-0f91-4ce4-9ffa-773fe32c66ef",
      "name": "Basic LLM Notificar Cancelar Cita",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -43344,
        -1504
      ],
      "id": "8f7d2e08-52d1-426a-a109-12df99458793",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "AD8kPcNVReuclASd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b2110549-dd58-46b3-9707-dbbe0a5004f2",
              "leftValue": "={{ $('Estructuración, de datos').item.json.mensajeParaEnviar.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -42224,
        -1712
      ],
      "id": "6caa53bb-57cc-48c1-bd3e-29c994b48b31",
      "name": "Validación de longitud de caracteres15"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -41760,
        -1856
      ],
      "id": "95b05e8f-8a71-44d9-aae1-2d17fcb7041e",
      "name": "No Operation, do nothing19"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Estructuración, de datos').item.json.mensajeParaEnviar }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -41952,
        -1856
      ],
      "id": "5d0ee488-8fd1-4081-ba3b-58bd32c0d126",
      "name": "HTTP Request Enviar Mensaje por WhatsApp18"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Estructuración, de datos').item.json.mensajeParaEnviar }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Estructuración, de datos').item.json.mensajeParaEnviar.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -37712,
        -1728
      ],
      "id": "7bf78eac-08cd-4368-80d8-94ebdd02c04c",
      "name": "Organiza variables del mensaje17"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=# ASISTENTE DE INFORMACIÓN GENERAL - KONFIE IA LOGISTICS\n\nEres un asistente especializado en proporcionar información general sobre Konfie IA Logistics, una empresa pionera en logística inteligente en Colombia.\n\n## CONTEXTO IMPORTANTE DEL CHAT\n**PROPÓSITO ESPECÍFICO:** Este chat de WhatsApp está diseñado EXCLUSIVAMENTE para que los proveedores de Konfie IA Logistics puedan gestionar citas de entrega de mercancía en la bodega de la empresa. No está autorizado ni programado para otras gestiones comerciales, ventas, contrataciones o servicios generales.\n\n**AUDIENCIA:** Proveedores que necesitan agendar, consultar, modificar o cancelar citas de descargue de mercancía.\n\n## INFORMACIÓN DE LA EMPRESA\n\n### Acerca de Konfie IA Logistics\n**Misión:** Redefinir los límites de lo posible en logística a través de la transparencia y la innovación.\n**Visión:** Transformar la logística en una experiencia sin precedentes.\n**Especialidad:** Logística inteligente con tecnología de inteligencia artificial y sistemas GPS de última generación.\n\n### Servicios Principales\n1. **Transporte Impo y Expo**\n   - Operaciones de transporte de carga contenerizada desde y hacia los puertos\n   - Servicios FTL (Full Truck Load), LTL (Less Than Truck Load), ITR\n\n2. **Carga Masiva Nacional**\n   - Transporte masivo nacional\n   - Servicios urbanos y nacionales\n   - Multientregas con rutas lógicas\n   - Diferentes tipos de vehículos\n\n3. **Distribución Multientrega**\n   - Transporte a múltiples destinos\n   - Seguimiento en tiempo real\n   - Información detallada de cada entrega por separado\n\n4. **Almacenamiento**\n   - Administración, control y seguridad de mercancía\n   - Gestión integral de inventarios\n\n5. **Última Milla**\n   - Distribución a cliente final\n   - Desde centros de distribución o almacenamiento\n   - Cualquier tipo de vehículo requerido\n   - Servicio de urgencias\n\n6. **ITR (Inland Terminal Rail)**\n   - Operación de patios en puertos\n   - Cargue y descargue de vehículos\n   - Consolidación de mercancías\n\n7. **Flotas Dedicadas**\n   - Ajuste a especificaciones técnicas específicas\n   - Flotas personalizadas según tipo de vehículo requerido\n\n### Tecnología e Innovación\n- **Inteligencia Artificial:** Optimización de rutas y procesos\n- **Sistemas GPS:** Tecnología de última generación para seguimiento\n- **Seguimiento en tiempo real:** Información oportuna y veraz\n- **Sostenibilidad:** Prácticas responsables con el medio ambiente\n\n### Cobertura\n- **País principal:** Colombia\n- **Alcance:** Envíos en toda Colombia\n- **Experiencia:** Años de trayectoria en el mercado logístico\n\n### Sitio Web\n- **URL:** https://www.konfie.com/es_CO\n- **Redes sociales:** Facebook - Konfie IA Logistics\n\n## INSTRUCCIONES PARA RESPONDER\n\n1. **SIEMPRE mencionar el propósito del chat:** En cada respuesta, recuerda al usuario que este chat está destinado exclusivamente para gestión de citas de entrega de mercancía en la bodega\n2. **Respuestas claras y concisas:** Proporciona información directa y útil sobre la empresa\n3. **Tono profesional y amigable:** Mantén un tono cordial pero profesional\n4. **Información específica:** Cuando sea posible, proporciona detalles específicos sobre servicios de la empresa\n5. **Redirección apropiada:** Siempre orienta hacia el propósito principal del chat (gestión de citas)\n6. **Respuestas completas:** Asegúrate de abordar la consulta pero contextualizar el propósito del chat\n\n## TIPOS DE PREGUNTAS QUE PUEDES RESPONDER\n- Información sobre servicios y capacidades de Konfie IA Logistics\n- Ubicación y cobertura geográfica de la empresa\n- Tecnología y diferenciadores de la empresa\n- Proceso general de trabajo de la empresa\n- Información corporativa de Konfie IA Logistics\n- Preguntas sobre sostenibilidad y responsabilidad ambiental de la empresa\n\n**IMPORTANTE:** Independientemente del tipo de pregunta, SIEMPRE debes contextualizar que este chat es para gestión de citas de entrega de mercancía.\n\n## MANEJO DE CONSULTAS NO RELACIONADAS CON LA EMPRESA\n\n### Si la pregunta NO tiene relación con Konfie IA Logistics:\n**Ejemplo de respuesta:**\n\"Hola, espero que estés bien. Este chat pertenece a **Konfie IA Logistics**, una empresa especializada en logística inteligente que ofrece servicios como transporte de carga, distribución, almacenamiento y última milla en Colombia. \n\nEspecíficamente, este chat está diseñado para que nuestros **proveedores puedan gestionar citas de entrega de mercancía en nuestra bodega** (agendar, consultar, modificar o cancelar citas de descargue).\n\nSi necesitas más información sobre nuestra empresa, puedes visitar: https://www.konfie.com/es_CO\n\n¿En qué puedo ayudarte con la gestión de tu cita de entrega?\"\n\n### Si la pregunta SÍ está relacionada con Konfie pero NO con citas de entrega:\n**Ejemplo de respuesta:**\n\"Te comparto la información sobre [responder la pregunta específica sobre la empresa]. \n\nEs importante mencionar que este chat está específicamente diseñado para que nuestros **proveedores gestionen citas de entrega de mercancía en nuestra bodega**. Para consultas comerciales, contrataciones o otros servicios, te recomiendo contactar directamente a través de nuestro sitio web: https://www.konfie.com/es_CO\n\n¿Necesitas ayuda con alguna gestión de cita de entrega de mercancía?\"\n\n## LIMITACIONES\n- **NO proporciones información de precios específicos** (solicita que contacten directamente)\n- **NO hagas promesas sobre tiempos de entrega específicos** sin conocer detalles\n- **NO proporciones información de contacto específica** que no tengas confirmada\n- **NO gestiones consultas comerciales, ventas o contrataciones** (este chat es solo para citas de entrega)\n- **SIEMPRE contextualiza** que este chat es para gestión de citas de entrega de mercancía en la bodega\n\n---\n\n## DATOS DEL MENSAJE ACTUAL\n**Pregunta del usuario:**\n```\n{{ $json.infoMensaje.mensajeActual }}\n```\n\n**Historial de conversación:**\n```\n{{ $json.infoMensaje.historialMensajes }}\n```\n\n**Fecha:** {{ $json.infoMensaje.fechaMensajeActual }}\n**Hora:** {{ $json.infoMensaje.horaMensajeActual }}\n\n---\n\n### INSTRUCCIONES FINALES\n1. Analiza la pregunta del usuario en el contexto del historial\n2. **SIEMPRE menciona** que este chat está diseñado para gestión de citas de entrega de mercancía por parte de proveedores\n3. Proporciona información útil y completa sobre Konfie IA Logistics cuando sea relevante\n4. Si la pregunta no está relacionada con la empresa, explica qué es Konfie IA Logistics y redirige al propósito del chat\n5. Si la pregunta está relacionada con la empresa pero no con citas de entrega, proporciona la información pero contextualiza el propósito específico del chat\n6. Mantén un tono profesional pero cercano\n7. Si necesitan información muy específica (precios, cotizaciones, servicios comerciales), invítalos a contactar directamente a través del sitio web\n8. **SIEMPRE finaliza** preguntando si necesitan ayuda con gestión de citas de entrega\n\n**FORMATO DE RESPUESTA:**\n- Responde la consulta de manera útil\n- Contextualiza el propósito específico del chat (gestión de citas de entrega de mercancía)\n- Proporciona el sitio web si es necesario: https://www.konfie.com/es_CO\n- Pregunta si necesitan ayuda con citas de entrega\n\n**EJEMPLOS DE CIERRE:**\n- \"¿Necesitas ayuda con alguna gestión de cita de entrega de mercancía?\"\n- \"¿En qué puedo ayudarte con la gestión de tu cita de entrega?\"\n- \"¿Requieres agendar, consultar o modificar alguna cita de entrega en nuestra bodega?\""
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -43264,
        -1712
      ],
      "id": "e7d1950b-eede-4c08-a4a7-37093c313d05",
      "name": "Basic LLM CONVERSACIÓN GENERAL"
    },
    {
      "parameters": {
        "jsCode": "const items = $node[\"Basic LLM CONVERSACIÓN GENERAL\"].all();\nconst output = [];\n\nfor (const item of items) {\n  try {\n    // Para PREGUNTA_GENERAL, el LLM devuelve texto plano, no JSON\n    let respuestaTexto = item.json.text ? item.json.text.trim() : \"\";\n    \n    // Verificar que hay contenido\n    if (!respuestaTexto) {\n      throw new Error(\"Respuesta vacía del modelo LLM\");\n    }\n    \n    // Estructurar la salida para PREGUNTA_GENERAL\n    output.push({\n      json: {\n        mensajeParaEnviar: respuestaTexto,\n        tipo: \"informacion_general\",\n        accion: \"respuesta_informativa\", \n        origen: \"intencionPreguntaGeneral\"\n      }\n    });\n    \n  } catch (error) {\n    output.push({\n      json: {\n        error: true,\n        mensaje: \"Error al interpretar la respuesta del modelo LLM\",\n        detalle: error.message,\n        contenidoOriginal: item.json.text || \"No hay contenido\",\n        tipo: \"error\",\n        accion: \"error_procesamiento\",\n        origen: \"intencionPreguntaGeneral\"\n      }\n    });\n  }\n}\n\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -42560,
        -1712
      ],
      "id": "04575609-c47f-417d-a69f-31bd8f5c6392",
      "name": "Estructuración, de datos"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b2110549-dd58-46b3-9707-dbbe0a5004f2",
              "leftValue": "={{ $('Estructuración, de datos1').item.json.message.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -42512,
        -672
      ],
      "id": "4c37cc22-ca62-4551-8b6c-cb1a9e3c36ec",
      "name": "Validación de longitud de caracteres18"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -41968,
        -816
      ],
      "id": "698842e3-efde-47b1-8987-37aeda7376e9",
      "name": "No Operation, do nothing22"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Estructuración, de datos1').item.json.mensajeParaEnviar }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -42144,
        -816
      ],
      "id": "83016df9-7ea1-4e0e-8f48-108362901cac",
      "name": "HTTP Request Enviar Mensaje por WhatsApp21"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Estructuración, de datos1').item.json.message }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Estructuración, de datos1').item.json.message.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -37680,
        -688
      ],
      "id": "9c13b625-416d-4142-bf1b-5c7bae5edd93",
      "name": "Organiza variables del mensaje18"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      message: `✅ **ELIMINACIÓN DE CONVERSACIÓN EXITOSA**\n\nLa eliminación de mensajes en la base de datos se ha completado correctamente.\n\n🔄 **Puedes empezar una nueva conversación**\nAhora puedes iniciar una conversación completamente limpia con el asistente.\n\n📅 **Tus citas están seguras**\nSi tenías citas programadas, no te preocupes - las citas NO se han eliminado. Solo se eliminó el historial de conversación para hacer limpieza del sistema.\n\n💬 **Conversación limpia lista**\nPuedes comenzar de nuevo y tener una experiencia fresca con el asistente. Todos tus datos importantes permanecen intactos.\n\n¡Escribe tu mensaje para empezar una nueva conversación!`,\n      success: true,\n      timestamp: new Date().toISOString()\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -43264,
        -976
      ],
      "id": "c488dfdc-5ac6-436b-94b2-bbb4f5e567a9",
      "name": "Estructuración, de datos1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "BEGIN TRANSACTION;\n\nDELETE FROM MensajesWhatsApp\nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n   OR (chat_id = 'agenteAI'\n       AND message_id IN (\n           SELECT message_id \n           FROM MensajesWhatsApp\n           WHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}'\n       )\n   );\n\nDELETE FROM FranjasDisponiblesTemp \nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}';\n\n  DELETE FROM EstadoConversacional \nWHERE chat_id = '{{ $('Unificación y consistencia de datos').first().json.infoMensaje.chat_id }}';\n\nCOMMIT;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -44224,
        -544
      ],
      "id": "ad7a8293-0722-4a60-a9c5-45813978385f",
      "name": "Microsoft SQL Eliminación Mensajes",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "40ef08c9-6248-4a94-a661-1638e344db90",
              "leftValue": "={{ $json.mensaje_especial.length }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -42336,
        240
      ],
      "id": "a7708e93-4aac-4f96-b52f-e25a2c2c0995",
      "name": "Validación de longitud de caracteres19"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -41776,
        96
      ],
      "id": "99819839-7cd4-4709-bcc1-33f4fd559f22",
      "name": "No Operation, do nothing23"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://evolutionapi-evolution-api.cpyock.easypanel.host/message/sendText/{{ $('Mensaje Entrada').first().json.body.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Mensaje Entrada').first().json.body.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Mensaje Entrada').first().json.body.data.key.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Estructuración, de datos2').item.json.mensajeParaEnviar }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -41968,
        96
      ],
      "id": "0f1e0842-f849-47ba-93c0-121f948e5081",
      "name": "HTTP Request Enviar Mensaje por WhatsApp22"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d9c2ff70-4fd1-4b93-8571-6d0ac5a0093e",
              "name": "mensaje.ia",
              "value": "={{ $('Validación de longitud de caracteres19').item.json.mensaje_especial }}",
              "type": "string"
            },
            {
              "id": "ac8a03be-0292-4735-9580-39a385945c47",
              "name": "mensaje.longitud",
              "value": "={{ $('Validación de longitud de caracteres19').item.json.mensaje_especial.length }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -37504,
        224
      ],
      "id": "131fe70f-8343-40ab-bed2-06660ca69b6e",
      "name": "Organiza variables del mensaje19"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      // --- CAMBIO REALIZADO AQUÍ ---\n      mensaje_especial: `❌ **ERROR EN ELIMINACIÓN DE CONVERSACIÓN**\n\nLamentamos informarte que ha ocurrido un error durante la eliminación automática de la conversación en nuestro sistema.\n\n🔧 **Acción requerida**\nPor favor, comunícate directamente con el **área de Bodega de Konfíe** para que validen manualmente qué sucedió con la eliminación de datos en el sistema.\n\n📞 **Contacto necesario**\nEl equipo de Bodega deberá revisar y procesar manualmente la eliminación de tu conversación para garantizar que se complete correctamente.\n\n⚠️ **Situación excepcional**\nTe pedimos disculpas por este inconveniente. Este tipo de errores son muy poco frecuentes en nuestro sistema, pero requieren atención manual para resolverse adecuadamente.\n\n🙏 **Disculpas por las molestias**\nSentimos mucho las molestias causadas por esta situación técnica. El equipo de Bodega te ayudará a resolver esto lo antes posible.\n\nPor favor contacta a Bodega de Konfíe para continuar con el proceso.`,\n      // -----------------------------\n      success: false,\n      error: true,\n      timestamp: new Date().toISOString(),\n      action_required: \"contact_bodega\"\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -43088,
        -112
      ],
      "id": "aac3bbee-de44-4b20-b440-2a3caf167aef",
      "name": "Estructuración, de datos2"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=### SISTEMA\n\nEres un asistente especializado en logística de bodegas para **Konfíe IA Logistics**. \n\nEl usuario ha enviado un mensaje que **NO está relacionado con el contexto de nuestro negocio** (logística, citas, entregas, horarios, etc.).\n\n### TU TAREA:\n\nGenera un mensaje aplicando estos principios de UX para WhatsApp:\n\n**FORMATO Y ESTRUCTURA:**\n1. Usa *negritas* para destacar información importante como servicios disponibles\n2. Usa emojis estratégicos: ℹ️ (información), 🏢 (empresa), 📋 (servicios), ⚠️ (advertencia), 🔄 (reinicio)\n3. Estructura la información de forma jerárquica y clara\n4. Usa viñetas con emojis para listar servicios disponibles\n\n**CONTENIDO REQUERIDO:**\n1. 🏢 Responder de manera *amable pero firme* que el mensaje no está relacionado con el servicio\n2. 📋 Redirigir hacia los servicios que *sí puedes ofrecer* con lista clara\n3. ⚠️ Advertir *suavemente* sobre posible reinicio si continúa fuera de contexto\n4. ❓ Invitar a usar los servicios relacionados con bodega\n\n**SERVICIOS A MENCIONAR:**\n📅 Agendar nuevas citas de entrega\n🔍 Consultar disponibilidad de horarios  \n✏️ Editar citas existentes\n🚫 Cancelar entregas programadas\n\n**TONO:** Profesional pero cordial, firme pero no rudo, redirigiendo de manera constructiva.\n\n### MENSAJE DEL USUARIO:\n{{ $('Unificación y consistencia de datos').first().json.infoMensaje.mensajeActual }}\n\n### HISTORIAL DE CONVERSACIÓN:\n{{ $node[\"Unificación y consistencia de datos\"].json[\"infoMensaje\"][\"historialMensajes\"] }}\n\n### FORMATO DE RESPUESTA (JSON válido):\n```json\n{\n  \"mensajeSistema\": \"ℹ️ Entiendo tu mensaje, pero soy un asistente especializado en *gestión de citas de bodega* para **Konfíe IA Logistics**. No puedo ayudarte con temas fuera de este contexto.\\n\\n📋 *Servicios disponibles:*\\n📅 Agendar nuevas citas de entrega\\n🔍 Consultar disponibilidad de horarios\\n✏️ Modificar citas existentes\\n🚫 Cancelar entregas programadas\\n\\n⚠️ Si continúas enviando mensajes no relacionados con nuestro servicio, tendré que *reiniciar nuestra conversación*.\\n\\n❓ ¿Te gustaría que te ayude con alguna *gestión de cita de entrega*?\"\n}\n```"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -49568,
        -5072
      ],
      "id": "e96eb719-1822-4c6e-9f95-2a1152f36c3d",
      "name": "Basic LLM MANEJO FUERA CONTEXTO"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=-- Consultar estado conversacional actual\nSELECT \n  ISNULL(estado_actual, 'INICIAL') as estado_actual,\n  ISNULL(contexto_proceso, '{\"descripcion\": \"Estado inicial\"}') as contexto_proceso,\n  ISNULL(contador_fuera_contexto, 0) as contador_fuera_contexto,\n  ultimo_mensaje_fuera_contexto\nFROM EstadoConversacional \nWHERE chat_id = '{{ $('Parametrización').first().json.message.chat.id }}'\n\nUNION ALL\n\n-- Si no existe registro, devolver valores por defecto\nSELECT \n  'INICIAL' as estado_actual,\n  '{\"descripcion\": \"Estado inicial\"}' as contexto_proceso,\n  0 as contador_fuera_contexto,\n  NULL as ultimo_mensaje_fuera_contexto\nWHERE NOT EXISTS (\n  SELECT 1 FROM EstadoConversacional \n  WHERE chat_id = '{{ $('Parametrización').first().json.message.chat.id }}'\n);"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -54864,
        -6736
      ],
      "id": "31e4303f-6329-432e-99a8-4bd0f5aaf90e",
      "name": "Consultar Estado Conversacional",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=-- Actualizar estado conversacional basado en intención detectada\nMERGE EstadoConversacional AS target\nUSING (\n  SELECT \n    '{{ $('Parametrización').first().json.message.chat.id }}' AS chat_id,\n    CASE \n      WHEN '{{ $json.intencionDetectada }}' = 'CREAR_CITA' THEN 'SOLICITANDO_DATOS_CREAR'\n      WHEN '{{ $json.intencionDetectada }}' = 'EDITAR_CITA' THEN 'SOLICITANDO_DATOS_EDITAR'\n      WHEN '{{ $json.intencionDetectada }}' = 'CANCELAR_CITA' THEN 'CONFIRMANDO_CANCELACION'\n      WHEN '{{ $json.intencionDetectada }}' = 'CONSULTAR_MALLA' THEN 'CONSULTANDO_DISPONIBILIDAD'\n      WHEN '{{ $json.intencionDetectada }}' = 'CONFIRMACION_CITA' THEN 'CONFIRMANDO_FRANJA'\n      WHEN '{{ $json.intencionDetectada }}' = 'SALUDO' THEN 'SALUDANDO'\n      WHEN '{{ $json.intencionDetectada }}' = 'PREGUNTA_GENERAL' THEN 'RESPONDIENDO_PREGUNTA'\n      WHEN '{{ $json.intencionDetectada }}' = 'RESPUESTA_FUERA_CONTEXTO' THEN 'FUERA_CONTEXTO'\n      WHEN '{{ $json.intencionDetectada }}' = 'ELIMINAR_MENSAJES' THEN 'ELIMINANDO_MENSAJES'\n      ELSE 'INICIAL'\n    END AS estado_actual,\n    CASE \n      WHEN '{{ $json.intencionDetectada }}' = 'RESPUESTA_FUERA_CONTEXTO' THEN \n        '{\"intencion_detectada\": \"{{ $json.intencionDetectada }}\", \"timestamp\": \"{{ new Date().toISOString() }}\", \"accion\": \"incrementar_contador\"}'\n      ELSE \n        '{\"intencion_detectada\": \"{{ $json.intencionDetectada }}\", \"timestamp\": \"{{ new Date().toISOString() }}\", \"accion\": \"cambio_estado\"}'\n    END AS contexto_proceso\n) AS source ON (target.chat_id = source.chat_id)\nWHEN MATCHED THEN\n    UPDATE SET \n      estado_actual = source.estado_actual, \n      contexto_proceso = source.contexto_proceso, \n      fecha_actualizacion = GETDATE(),\n      contador_fuera_contexto = CASE \n        WHEN '{{ $json.intencionDetectada }}' = 'RESPUESTA_FUERA_CONTEXTO' THEN contador_fuera_contexto + 1\n        ELSE CASE WHEN '{{ $json.intencionDetectada }}' != 'RESPUESTA_FUERA_CONTEXTO' THEN 0 ELSE contador_fuera_contexto END\n      END,\n      ultimo_mensaje_fuera_contexto = CASE \n        WHEN '{{ $json.intencionDetectada }}' = 'RESPUESTA_FUERA_CONTEXTO' THEN GETDATE()\n        ELSE ultimo_mensaje_fuera_contexto\n      END\nWHEN NOT MATCHED THEN\n    INSERT (chat_id, estado_actual, contexto_proceso, contador_fuera_contexto, ultimo_mensaje_fuera_contexto) \n    VALUES (\n      source.chat_id, \n      source.estado_actual, \n      source.contexto_proceso,\n      CASE WHEN '{{ $json.intencionDetectada }}' = 'RESPUESTA_FUERA_CONTEXTO' THEN 1 ELSE 0 END,\n      CASE WHEN '{{ $json.intencionDetectada }}' = 'RESPUESTA_FUERA_CONTEXTO' THEN GETDATE() ELSE NULL END\n    );\n\n-- Devolver la intención para el siguiente nodo\nSELECT '{{ $json.intencionDetectada }}' as intencionDetectada, \n       '{{ $('Parametrización').first().json.message.chat.id }}' as chat_id,\n       GETDATE() as timestamp_actualizacion;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -51072,
        -6528
      ],
      "id": "c02b38a6-6216-4df5-9b20-530fdb275e33",
      "name": "Actualizar Estado por Intención",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "SALUDO",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "2a4110a6-abce-4bf4-88e0-942700219980"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "SALUDO"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "12844e18-8e96-4137-8cc9-92ffc859122d",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "CREAR_CITA",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CREAR_CITA"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "ee404726-165f-4392-8bd7-1c760f06c7f8",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "CONFIRMACION_CITA",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CONFIRMACION_CITA"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "3efa4dc0-5ed7-49b6-a886-6166ffad4b2d",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "EDITAR_CITA",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "EDITAR_CITA"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "f9627527-88c2-4004-81c7-f0b6ea67b200",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "CANCELAR_CITA",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CANCELAR_CITA"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "57ed6e86-2535-45be-acd4-cbfa654001d0",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "CONSULTAR_MALLA",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CONSULTAR_MALLA"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "c4a8f2d0-aa7f-40a9-a5e2-4d54a1a433b6",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "PREGUNTA_GENERAL",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PREGUNTA_GENERAL"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "8192b61d-956c-4f8c-a8eb-77d456c3ec1d",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "ELIMINAR_MENSAJES",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ELIMINAR_MENSAJES"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "7b80f0f8-3cf9-4951-9d47-6a1eb40e6a06",
                    "leftValue": "={{ $json.intencionDetectada }}",
                    "rightValue": "RESPUESTA_FUERA_CONTEXTO",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "RESPUESTA_FUERA_CONTEXTO"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -50848,
        -6640
      ],
      "id": "9c63be6e-cc3c-4e4c-8ef9-c596525f918e",
      "name": "Switch Redistribución por Intención"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Verificar si necesita reinicio automático por exceso de mensajes fuera de contexto\nSELECT \n  chat_id,\n  estado_actual,\n  contador_fuera_contexto,\n  CASE \n    WHEN contador_fuera_contexto >= 3 THEN 'REINICIAR_CONVERSACION'\n    WHEN contador_fuera_contexto = 2 THEN 'ADVERTENCIA_FINAL'\n    WHEN contador_fuera_contexto = 1 THEN 'PRIMERA_ADVERTENCIA'\n    ELSE 'NORMAL'\n  END as accion_requerida,\n  CASE \n    WHEN contador_fuera_contexto >= 3 THEN 'Has enviado varios mensajes que no están relacionados con nuestro servicio de gestión de citas. Para poder ayudarte mejor, voy a reiniciar nuestra conversación. Por favor, cuéntame en qué puedo asistirte con el servicio de bodega.'\n    WHEN contador_fuera_contexto = 2 THEN 'Te recuerdo que soy un asistente especializado en gestión de citas de bodega. Si continúas con mensajes no relacionados, tendré que reiniciar nuestra conversación. ¿Hay algo sobre el servicio de bodega en lo que pueda ayudarte?'\n    ELSE COALESCE('{{ $(\"Basic LLM MANEJO FUERA CONTEXTO\").first().json.text }}', '')\n  END as mensaje_especial\nFROM EstadoConversacional \nWHERE chat_id = '{{ $('Parametrización').first().json.message.chat.id }}';\n\n-- Si el contador es >= 3, reiniciar automáticamente\nUPDATE EstadoConversacional \nSET estado_actual = 'INICIAL', \n    contexto_proceso = '{\"descripcion\": \"Conversación reiniciada automáticamente por exceso de mensajes fuera de contexto\", \"reinicio_automatico\": true}',\n    contador_fuera_contexto = 0,\n    ultimo_mensaje_fuera_contexto = NULL,\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $('Parametrización').first().json.message.chat.id }}'\n  AND contador_fuera_contexto >= 3;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -45600,
        -64
      ],
      "id": "a488795a-acbc-4e84-9566-1b48fe6ba49b",
      "name": "Verificar Reinicio Fuera Contexto",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Resetear estado a INICIAL después de operación exitosa\nUPDATE EstadoConversacional \nSET estado_actual = 'INICIAL', \n    contexto_proceso = '{\"descripcion\": \"Operación completada exitosamente\", \"ultima_accion\": \"cita_creada\", \"timestamp\": \"{{ new Date().toISOString() }}\"}',\n    contador_fuera_contexto = 0,\n    ultimo_mensaje_fuera_contexto = NULL,\n    fecha_actualizacion = GETDATE()\nWHERE chat_id = '{{ $('Parametrización').first().json.message.chat.id }}';\n\n-- Confirmar actualización\nSELECT \n  'INICIAL' as nuevo_estado,\n  'OPERACION_EXITOSA' as tipo_reseteo,\n  '{{ $('Parametrización').first().json.message.chat.id }}' as chat_id,\n  GETDATE() as timestamp_reseteo;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -35200,
        -8800
      ],
      "id": "992a878d-8b49-40d7-8dee-797743069e08",
      "name": "Resetear Estado - Cita Exitosa",
      "alwaysOutputData": true,
      "credentials": {
        "microsoftSql": {
          "id": "UNJs1wxs3vPQMTeN",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bcf1d355-87f6-41d6-bb8e-c69b5d663ee1",
              "leftValue": "={{ $json.contador_fuera_contexto }}",
              "rightValue": 3,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -44960,
        -64
      ],
      "id": "a642e332-817d-4903-97e0-ffbad9e2c1c5",
      "name": "If contador_fuera_contexto"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -42640,
        240
      ],
      "id": "f10b3002-6355-42ef-b607-a6daf1831ee2",
      "name": "Merge8"
    }
  ],
  "pinData": {},
  "connections": {
    "Mensaje Entrada": {
      "main": [
        [
          {
            "node": "Parametrización",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parametrización": {
      "main": [
        [
          {
            "node": "Guarda el mensaje en SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guarda el mensaje en SQL": {
      "main": [
        [
          {
            "node": "Recupera todos los mensajes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recupera todos los mensajes": {
      "main": [
        [
          {
            "node": "Consultar Estado Conversacional",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Count y Tiempo Último Mensaje": {
      "main": [
        [
          {
            "node": "If (Salida 0 - No hacer nada)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If (Salida 0 - No hacer nada)": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If (Salida 1 - Esperar)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If (Salida 1 - Esperar)": {
      "main": [
        [
          {
            "node": "Espera X segundos",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If (Salida 2 - Seguir)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Espera X segundos": {
      "main": [
        [
          {
            "node": "Recupera todos los mensajes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If (Salida 2 - Seguir)": {
      "main": [
        [
          {
            "node": "Merge de Datos",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organización y estructuracion de mensajes": {
      "main": [
        [
          {
            "node": "Organiza el Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza el Mensaje": {
      "main": [
        [
          {
            "node": "Merge de Datos para session ID",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Recuperar historial Citas": {
      "main": [
        [
          {
            "node": "Remueve registros de citas duplicados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge de Datos": {
      "main": [
        [
          {
            "node": "Organización y estructuracion de mensajes",
            "type": "main",
            "index": 0
          },
          {
            "node": "Recuperar historial Citas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remueve registros de citas duplicados": {
      "main": [
        [
          {
            "node": "Organización y estructuracion historial citas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organización y estructuracion historial citas": {
      "main": [
        [
          {
            "node": "Organiza el historial de citas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza el historial de citas": {
      "main": [
        [
          {
            "node": "Merge de Datos para session ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge de Datos para session ID": {
      "main": [
        [
          {
            "node": "Unificación y consistencia de datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unificación y consistencia de datos": {
      "main": [
        [
          {
            "node": "Basic LLM CLASIFICADOR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request MALLA DE RECIBO 2025": {
      "main": [
        [
          {
            "node": "Extract MALLA DE RECIBO 2025",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract MALLA DE RECIBO Semana Siguiente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract MALLA DE RECIBO 2025": {
      "main": [
        [
          {
            "node": "Estructuración, Datos, Consulta, Citas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Malla Fija": {
      "main": [
        [
          {
            "node": "Extract Datos Proveedor",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract from Categorias",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Datos Proveedor": {
      "main": [
        [
          {
            "node": "Estructuración, Consulta, Datos Proveedor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, Datos, Consulta, Citas": {
      "main": [
        [
          {
            "node": "Merge datos Excel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, Consulta, Datos Proveedor": {
      "main": [
        [
          {
            "node": "Merge datos Excel",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge datos Excel": {
      "main": [
        [
          {
            "node": "Unificación y consistencia de datos1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Categorias": {
      "main": [
        [
          {
            "node": "Estructuración, Consulta, Datos Categorias",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, Consulta, Datos Categorias": {
      "main": [
        [
          {
            "node": "Merge datos Excel",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Unificación y consistencia de datos1": {
      "main": [
        [
          {
            "node": "Basic LLM Chain RECOLECCIÓN1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM CLASIFICADOR",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM CLASIFICADOR": {
      "main": [
        [
          {
            "node": "Almacenar la intención detectada",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM CONVERSACIÓN (SALUDO)",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Basic LLM MANEJO FUERA CONTEXTO",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch basado en intención": {
      "main": [
        [
          {
            "node": "Actualizar Estado por Intención",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Actualizar Estado por Intención",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Actualizar Estado por Intención",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Actualizar Estado por Intención",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Actualizar Estado por Intención",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Actualizar Estado por Intención",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Actualizar Estado por Intención",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Actualizar Estado por Intención",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Actualizar Estado por Intención",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Almacenar la intención detectada": {
      "main": [
        [
          {
            "node": "Switch basado en intención",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain RECOLECCIÓN",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain RECOLECCIÓN": {
      "main": [
        [
          {
            "node": "Code (Formatear JSON RECOLECCIÓN)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code (Formatear JSON RECOLECCIÓN)": {
      "main": [
        [
          {
            "node": "IF Datos Completos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Datos Completos": {
      "main": [
        [
          {
            "node": "Basic LLM Chain EXTRACCIÓN_DATOS_CITA",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Estado SQL - SOLICITANDO_DATOS_CREAR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estado SQL - SOLICITANDO_DATOS_CREAR": {
      "main": [
        [
          {
            "node": "Code Respuesta Faltantes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Respuesta Faltantes": {
      "main": [
        [
          {
            "node": "Setear estado conversacional",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setear estado conversacional": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp": {
      "main": [
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Separación de Mensaje": {
      "main": [
        [
          {
            "node": "Split Out Separa el Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out Separa el Mensaje": {
      "main": [
        [
          {
            "node": "Loop Over Items Recorre las Partes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items Recorre las Partes": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Recuento de Caracteres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recuento de Caracteres": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp1": {
      "main": [
        [
          {
            "node": "Microsoft SQL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp2": {
      "main": [
        [
          {
            "node": "Microsoft SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp3": {
      "main": [
        [
          {
            "node": "Microsoft SQL2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL2": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items Recorre las Partes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract MALLA DE RECIBO Semana Siguiente": {
      "main": [
        [
          {
            "node": "Estructuración, Datos, Consulta, Citas Proxima Semana",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, Datos, Consulta, Citas Proxima Semana": {
      "main": [
        [
          {
            "node": "Merge datos Excel",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "OpenAI Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM CONSULTAR MALLA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Malla Fija1": {
      "main": [
        [
          {
            "node": "Extract from Categorias1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Categorias1": {
      "main": [
        [
          {
            "node": "Estructuración, Consulta, Datos Categorias1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, Consulta, Datos Categorias1": {
      "main": [
        [
          {
            "node": "Basic LLM CONSULTAR MALLA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM CONSULTAR MALLA": {
      "main": [
        [
          {
            "node": "Estado SQL - CONSULTANDO_DISPONIBILIDAD",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estado SQL - CONSULTANDO_DISPONIBILIDAD": {
      "main": [
        [
          {
            "node": "Consistencia de datos, intención consultar malla",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consistencia de datos, intención consultar malla": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp4": {
      "main": [
        [
          {
            "node": "No Operation, do nothing3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres1": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje1": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM CONVERSACIÓN (SALUDO)": {
      "main": [
        [
          {
            "node": "Estado SQL - SALUDANDO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estado SQL - SALUDANDO": {
      "main": [
        [
          {
            "node": "Estructuración, Consulta, Datos Categorias2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres2": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp5": {
      "main": [
        [
          {
            "node": "No Operation, do nothing4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, Consulta, Datos Categorias2": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje2": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain MOSTRAR_FRANJAS",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain EXTRACCIÓN_DATOS_CITA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain EXTRACCIÓN_DATOS_CITA": {
      "main": [
        [
          {
            "node": "Microsoft SQL Guardar EXTRACCIÓN_DATOS_CITA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain EXTRACCIÓN_DATOS_CITA",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain MOSTRAR_FRANJAS": {
      "main": [
        [
          {
            "node": "Code estandarizar respuestas MOSTRAR_FRANJAS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Guardar EXTRACCIÓN_DATOS_CITA": {
      "main": [
        [
          {
            "node": "Code MOSTRAR_FRANJAS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code estandarizar respuestas MOSTRAR_FRANJAS": {
      "main": [
        [
          {
            "node": "Microsoft SQL Guardar MOSTRAR_FRANJAS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code MOSTRAR_FRANJAS": {
      "main": [
        [
          {
            "node": "Basic LLM Chain MOSTRAR_FRANJAS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code RECOLECCIÓN": {
      "main": [
        [
          {
            "node": "Basic LLM Chain RECOLECCIÓN",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres3": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp6": {
      "main": [
        [
          {
            "node": "No Operation, do nothing5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Guardar MOSTRAR_FRANJAS": {
      "main": [
        [
          {
            "node": "IF Disponibilidad Confirmada",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Disponibilidad Confirmada": {
      "main": [
        [
          {
            "node": "Estado SQL - ESPERANDO_CONFIRMACION_CREAR",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validación de longitud de caracteres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estado SQL - ESPERANDO_CONFIRMACION_CREAR": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje3": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Obtener Alternativas": {
      "main": [
        [
          {
            "node": "Estado SQL - CONFIRMANDO_FRANJA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estado SQL - CONFIRMANDO_FRANJA": {
      "main": [
        [
          {
            "node": "Code Verificar Tiempo Transcurrido",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Verificar Tiempo Transcurrido": {
      "main": [
        [
          {
            "node": "If Verificar Expiración",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Notificar No Disponibilidad",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If Verificar Expiración": {
      "main": [
        [
          {
            "node": "Basic LLM Notificar No Disponibilidad",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request MALLA DE RECIBO ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request MALLA DE RECIBO ": {
      "main": [
        [
          {
            "node": "Extract MALLA DE RECIBO ",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract MALLA DE RECIBO Semana Siguiente1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract MALLA DE RECIBO ": {
      "main": [
        [
          {
            "node": "Estructuración, Datos, Consulta, Citas1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, Datos, Consulta, Citas1": {
      "main": [
        [
          {
            "node": "Merge datos Excel1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge datos Excel1": {
      "main": [
        [
          {
            "node": "Unificación y consistencia de datos2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract MALLA DE RECIBO Semana Siguiente1": {
      "main": [
        [
          {
            "node": "Estructuración, Datos, Consulta, Citas Proxima Semana1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, Datos, Consulta, Citas Proxima Semana1": {
      "main": [
        [
          {
            "node": "Merge datos Excel1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Unificación y consistencia de datos2": {
      "main": [
        [
          {
            "node": "Basic LLM Validar selección alternativa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code VALIDACIÓN DE CITA EN CRONOGRAMA": {
      "main": [
        [
          {
            "node": "If CREACION DE CITA EN CRONOGRAMA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If CREACION DE CITA EN CRONOGRAMA": {
      "main": [
        [
          {
            "node": "Code (Preparar Cuerpo de Petición)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM Notificar No Disponibilidad1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Notificar No Disponibilidad1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres4": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp7": {
      "main": [
        [
          {
            "node": "No Operation, do nothing6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Notificar No Disponibilidad": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje4": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres5": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp8": {
      "main": [
        [
          {
            "node": "No Operation, do nothing7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Notificar No Disponibilidad1": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje5": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model11": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Validar selección alternativa",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Validar selección alternativa": {
      "main": [
        [
          {
            "node": "Code VALIDACIÓN DE CITA EN CRONOGRAMA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Validar selección alternativa",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code (Preparar Cuerpo de Petición)": {
      "main": [
        [
          {
            "node": "Code Agrupar Franjas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Agrupar Franjas": {
      "main": [
        [
          {
            "node": "Loop Over Uno a Uno",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code Datos Insert Cita",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Uno a Uno": {
      "main": [
        [
          {
            "node": "Code Validar inserciones",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code Preparar cada Insercion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Preparar cada Insercion": {
      "main": [
        [
          {
            "node": "HTTP Request Actualizar Excel1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Actualizar Excel1": {
      "main": [
        [
          {
            "node": "Code Verificar Inserción",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Verificar Inserción": {
      "main": [
        [
          {
            "node": "If Verificar Inserción",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Verificar Inserción": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Diferente Caso",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Diferente Caso": {
      "main": [
        [
          {
            "node": "Code Limpiar Celda Incorrecta",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If fallo Estado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Limpiar Celda Incorrecta": {
      "main": [
        [
          {
            "node": "HTTP Request Limpiar Celda",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If fallo Estado": {
      "main": [
        [
          {
            "node": "Code Reintentar Inserción",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "HTTP Request Limpiar Celda": {
      "main": [
        [
          {
            "node": "Code Reintentar Inserción",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Reintentar Inserción": {
      "main": [
        [
          {
            "node": "HTTP Request Reintentar Inserción",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Reintentar Inserción": {
      "main": [
        [
          {
            "node": "Code Volver a validar Inserción",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Volver a validar Inserción": {
      "main": [
        [
          {
            "node": "If Verificar Inserción 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Loop Over Uno a Uno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Verificar Inserción 2": {
      "main": [
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Loop Over Uno a Uno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model12": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Notificar No Disponibilidad2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres6": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp9": {
      "main": [
        [
          {
            "node": "No Operation, do nothing8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Notificar No Disponibilidad2": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje6": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain RECOLECCIÓN1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain RECOLECCIÓN1": {
      "main": [
        [
          {
            "node": "Code RECOLECCIÓN",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain RECOLECCIÓN1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code Datos Insert Cita": {
      "main": [
        [
          {
            "node": "Microsoft SQL Franjas Temporales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Validar inserciones": {
      "main": [
        [
          {
            "node": "If Validar inserciones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Franjas Temporales": {
      "main": [
        [
          {
            "node": "Code Estructuración de franjas temporales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Validar inserciones": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Estado SQL - CREANDO_CITA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estado SQL - CREANDO_CITA": {
      "main": [
        [
          {
            "node": "Microsoft SQL Insertar Cita",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Estructuración de franjas temporales": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Microsoft SQL Eliminar Mensajes2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Insertar Cita": {
      "main": [
        [
          {
            "node": "Basic LLM Notificar Cita Exitosa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model13": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Notificar Cita Exitosa",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres7": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp10": {
      "main": [
        [
          {
            "node": "No Operation, do nothing9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Notificar Cita Exitosa": {
      "main": [
        [
          {
            "node": "Resetear Estado - Cita Exitosa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Eliminar Mensajes": {
      "main": [
        [
          {
            "node": "No Operation, do nothing10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje7": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Eliminar Mensajes2": {
      "main": [
        [
          {
            "node": "Basic LLM Notificar No Disponibilidad2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model14": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Extracción y Validacion de Datos Editar Cita",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser4": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Extracción y Validacion de Datos Editar Cita",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Extracción y Validacion de Datos Editar Cita": {
      "main": [
        [
          {
            "node": "Estado SQL - SOLICITANDO_DATOS_EDITAR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estado SQL - SOLICITANDO_DATOS_EDITAR": {
      "main": [
        [
          {
            "node": "Code Validación de datos para reprogramación de citas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Validar si la operación es posible (todoCorrecto)": {
      "main": [
        [
          {
            "node": "Microsoft SQL Obtener Cita",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Verificar si se intenta modificar datos no permitidos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Verificar si se intenta modificar datos no permitidos": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Verificar si es un rechazo por motivos temporales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Verificar si es un rechazo por motivos temporales": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Verificar si faltan datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Verificar si faltan datos": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code Mensaje Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres8": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp11",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp11": {
      "main": [
        [
          {
            "node": "No Operation, do nothing11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Mensaje Error": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres8",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje8": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Obtener Cita": {
      "main": [
        [
          {
            "node": "If existe cita",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If existe cita": {
      "main": [
        [
          {
            "node": "HTTP Request MALLA DE RECIBO 2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code Mensaje Error1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Mensaje Error1": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres8",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Recupera todos los mensajes1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code integracion de mensajes": {
      "main": [
        [
          {
            "node": "Microsoft SQL Actualiza la Cita",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recupera todos los mensajes1": {
      "main": [
        [
          {
            "node": "Code integracion de mensajes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Actualiza la Cita": {
      "main": [
        [
          {
            "node": "Microsoft SQL Eliminar Mensajes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Validación de datos para reprogramación de citas": {
      "main": [
        [
          {
            "node": "Estado SQL - ESPERANDO_CONFIRMACION_EDITAR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estado SQL - ESPERANDO_CONFIRMACION_EDITAR": {
      "main": [
        [
          {
            "node": "If Validar si la operación es posible (todoCorrecto)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Microsoft SQL Eliminar Mensajes3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Eliminar Mensajes3": {
      "main": [
        [
          {
            "node": "No Operation, do nothing12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request MALLA DE RECIBO 2": {
      "main": [
        [
          {
            "node": "Extract MALLA DE RECIBO 2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract MALLA DE RECIBO Semana Siguiente3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract MALLA DE RECIBO 2": {
      "main": [
        [
          {
            "node": "Estructuración, Datos, Consulta, Citas3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, Datos, Consulta, Citas3": {
      "main": [
        [
          {
            "node": "Merge datos Excel3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge datos Excel3": {
      "main": [
        [
          {
            "node": "Unificación y consistencia de datos4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract MALLA DE RECIBO Semana Siguiente3": {
      "main": [
        [
          {
            "node": "Estructuración, Datos, Consulta, Citas Proxima Semana3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, Datos, Consulta, Citas Proxima Semana3": {
      "main": [
        [
          {
            "node": "Merge datos Excel3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Unificación y consistencia de datos4": {
      "main": [
        [
          {
            "node": "Code Validacion de Cita en cronograma para reprogramación",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Validacion de Cita en cronograma para reprogramación": {
      "main": [
        [
          {
            "node": "If validacion de reprogramacion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If validacion de reprogramacion": {
      "main": [
        [
          {
            "node": "Code (Preparar Cuerpo de Petición)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validación de longitud de caracteres9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres9": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp12",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp12": {
      "main": [
        [
          {
            "node": "No Operation, do nothing13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje9": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code (Preparar Cuerpo de Petición)1": {
      "main": [
        [
          {
            "node": "Code Agrupar Franjas2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Agrupar Franjas2": {
      "main": [
        [
          {
            "node": "Loop Over Uno a Uno1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code Datos Insert Cita1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Uno a Uno1": {
      "main": [
        [
          {
            "node": "Code Validar inserciones1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code Preparar cada Insercion1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Preparar cada Insercion1": {
      "main": [
        [
          {
            "node": "HTTP Request Actualizar Excel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Actualizar Excel": {
      "main": [
        [
          {
            "node": "Code Verificar Inserción1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Verificar Inserción1": {
      "main": [
        [
          {
            "node": "If Verificar Inserción1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Verificar Inserción1": {
      "main": [
        [
          {
            "node": "Wait4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Diferente Caso1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Diferente Caso1": {
      "main": [
        [
          {
            "node": "Code Limpiar Celda Incorrecta1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If fallo Estado1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Limpiar Celda Incorrecta1": {
      "main": [
        [
          {
            "node": "HTTP Request Limpiar Celda1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Limpiar Celda1": {
      "main": [
        [
          {
            "node": "Code Reintentar Inserción1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If fallo Estado1": {
      "main": [
        [
          {
            "node": "Code Reintentar Inserción1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Code Reintentar Inserción1": {
      "main": [
        [
          {
            "node": "HTTP Request Reintentar Inserción1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Reintentar Inserción1": {
      "main": [
        [
          {
            "node": "Code Volver a validar Inserción1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Volver a validar Inserción1": {
      "main": [
        [
          {
            "node": "If Verificar Inserción ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Verificar Inserción ": {
      "main": [
        [
          {
            "node": "Wait5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Wait4": {
      "main": [
        [
          {
            "node": "Loop Over Uno a Uno1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait5": {
      "main": [
        [
          {
            "node": "Loop Over Uno a Uno1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model15": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Notificar No Disponibilidad3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Notificar No Disponibilidad3": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres10": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp13",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp13": {
      "main": [
        [
          {
            "node": "No Operation, do nothing14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Validar inserciones1": {
      "main": [
        [
          {
            "node": "If Validar inserciones1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Datos Insert Cita1": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Validar inserciones1": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Estado SQL - EDITANDO_CITA",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estado SQL - EDITANDO_CITA": {
      "main": [
        [
          {
            "node": "Microsoft SQLUpdate Cita Anterior",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Microsoft SQL Eliminar Mensajes4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Insertar Cita1": {
      "main": [
        [
          {
            "node": "Basic LLM Notificar Cita Exitosa1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model16": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Notificar Cita Exitosa1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres11": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp14",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp14": {
      "main": [
        [
          {
            "node": "No Operation, do nothing15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Notificar Cita Exitosa1": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Eliminar Mensajes4": {
      "main": [
        [
          {
            "node": "Basic LLM Notificar No Disponibilidad3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQLUpdate Cita Anterior": {
      "main": [
        [
          {
            "node": "Microsoft SQL Insertar Cita1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje11": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje10": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model17": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Extracción Datos Cancelar Cita",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser5": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Extracción Datos Cancelar Cita",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Extracción Datos Cancelar Cita": {
      "main": [
        [
          {
            "node": "Code Validación datos para cancelación de citas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Validación datos para cancelación de citas": {
      "main": [
        [
          {
            "node": "If Validar si los datos están completos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Validar si los datos están completos": {
      "main": [
        [
          {
            "node": "Microsoft SQL Obtener Cita para Cancelar",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validación de longitud de caracteres12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres12": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp15",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp15": {
      "main": [
        [
          {
            "node": "No Operation, do nothing16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje12": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Obtener Cita para Cancelar": {
      "main": [
        [
          {
            "node": "If cita para cancelar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If cita para cancelar": {
      "main": [
        [
          {
            "node": "HTTP Request MALLA DE RECIBO 3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code respuesta cita no programada",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres13": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp16",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp16": {
      "main": [
        [
          {
            "node": "No Operation, do nothing17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code respuesta cita no programada": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres13",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje13": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request MALLA DE RECIBO 3": {
      "main": [
        [
          {
            "node": "Extract MALLA DE RECIBO 3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract MALLA DE RECIBO Semana Siguiente4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract MALLA DE RECIBO 3": {
      "main": [
        [
          {
            "node": "Estructuración, Datos, Consulta, Citas4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, Datos, Consulta, Citas4": {
      "main": [
        [
          {
            "node": "Merge datos Excel4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge datos Excel4": {
      "main": [
        [
          {
            "node": "Unificación y consistencia de datos5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract MALLA DE RECIBO Semana Siguiente4": {
      "main": [
        [
          {
            "node": "Estructuración, Datos, Consulta, Citas Proxima Semana4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, Datos, Consulta, Citas Proxima Semana4": {
      "main": [
        [
          {
            "node": "Merge datos Excel4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Unificación y consistencia de datos5": {
      "main": [
        [
          {
            "node": "Code validación de cita en malla",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code validación de cita en malla": {
      "main": [
        [
          {
            "node": "If validar cita existe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres14": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp17",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp17": {
      "main": [
        [
          {
            "node": "No Operation, do nothing18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If validar cita existe": {
      "main": [
        [
          {
            "node": "Code (Preparar Cuerpo de Petición)2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validación de longitud de caracteres14",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje14": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code (Preparar Cuerpo de Petición)2": {
      "main": [
        [
          {
            "node": "Code Agrupar Franjas3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Agrupar Franjas3": {
      "main": [
        [
          {
            "node": "Loop Over Uno a Uno2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code Datos Cancelar Cita",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Uno a Uno2": {
      "main": [
        [
          {
            "node": "Code Validar inserciones2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code Preparar cada Insercion2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Preparar cada Insercion2": {
      "main": [
        [
          {
            "node": "HTTP Request Actualizar Excel2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Actualizar Excel2": {
      "main": [
        [
          {
            "node": "Code Verificar Inserción2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Verificar Inserción2": {
      "main": [
        [
          {
            "node": "If Verificar Inserción2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Verificar Inserción2": {
      "main": [
        [
          {
            "node": "Wait6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If Diferente Caso2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Diferente Caso2": {
      "main": [
        [
          {
            "node": "Code Limpiar Celda Incorrecta2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If fallo Estado2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Limpiar Celda Incorrecta2": {
      "main": [
        [
          {
            "node": "HTTP Request Limpiar Celda2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Limpiar Celda2": {
      "main": [
        [
          {
            "node": "Code Reintentar Inserción2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If fallo Estado2": {
      "main": [
        [
          {
            "node": "Code Reintentar Inserción2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Code Reintentar Inserción2": {
      "main": [
        [
          {
            "node": "HTTP Request Reintentar Inserción2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Reintentar Inserción2": {
      "main": [
        [
          {
            "node": "Code Volver a validar Inserción2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Volver a validar Inserción2": {
      "main": [
        [
          {
            "node": "If Verificar Inserción 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Verificar Inserción 1": {
      "main": [
        [
          {
            "node": "Wait7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Wait6": {
      "main": [
        [
          {
            "node": "Loop Over Uno a Uno2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait7": {
      "main": [
        [
          {
            "node": "Loop Over Uno a Uno2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model18": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Notificar No Disponibilidad4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Notificar No Disponibilidad4": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres16": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp19",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp19": {
      "main": [
        [
          {
            "node": "No Operation, do nothing20",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Validar inserciones2": {
      "main": [
        [
          {
            "node": "If Validar inserciones2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Validar inserciones2": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge6": {
      "main": [
        [
          {
            "node": "Microsoft SQLUpdate Cita Anterior1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge7": {
      "main": [
        [
          {
            "node": "Microsoft SQL Eliminar Mensajes5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model19": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Notificar Cancelar Cita",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres17": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp20",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp20": {
      "main": [
        [
          {
            "node": "No Operation, do nothing21",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Eliminar Mensajes5": {
      "main": [
        [
          {
            "node": "Basic LLM Notificar No Disponibilidad4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQLUpdate Cita Anterior1": {
      "main": [
        [
          {
            "node": "Estado SQL - CANCELANDO_CITA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estado SQL - CANCELANDO_CITA": {
      "main": [
        [
          {
            "node": "Basic LLM Notificar Cancelar Cita",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code Datos Cancelar Cita": {
      "main": [
        [
          {
            "node": "Estado SQL - CONFIRMANDO_CANCELACION",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estado SQL - CONFIRMANDO_CANCELACION": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Notificar Cancelar Cita": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje15": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje16": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM CONVERSACIÓN GENERAL",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres15": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp18",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp18": {
      "main": [
        [
          {
            "node": "No Operation, do nothing19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM CONVERSACIÓN GENERAL": {
      "main": [
        [
          {
            "node": "Estado SQL - RESPONDIENDO_PREGUNTA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estado SQL - RESPONDIENDO_PREGUNTA": {
      "main": [
        [
          {
            "node": "Estructuración, de datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, de datos": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje17": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres18": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp21",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp21": {
      "main": [
        [
          {
            "node": "No Operation, do nothing22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, de datos1": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres18",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL Eliminación Mensajes": {
      "main": [
        [
          {
            "node": "Estructuración, de datos1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Estructuración, de datos2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje18": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación de longitud de caracteres19": {
      "main": [
        [
          {
            "node": "HTTP Request Enviar Mensaje por WhatsApp22",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Organiza variables del mensaje19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Enviar Mensaje por WhatsApp22": {
      "main": [
        [
          {
            "node": "No Operation, do nothing23",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Estructuración, de datos2": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Organiza variables del mensaje19": {
      "main": [
        [
          {
            "node": "Basic LLM Separación de Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM MANEJO FUERA CONTEXTO": {
      "main": [
        [
          {
            "node": "Verificar Reinicio Fuera Contexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consultar Estado Conversacional": {
      "main": [
        [
          {
            "node": "Merge de Datos",
            "type": "main",
            "index": 0
          },
          {
            "node": "Count y Tiempo Último Mensaje",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Actualizar Estado por Intención": {
      "main": [
        [
          {
            "node": "Switch Redistribución por Intención",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Redistribución por Intención": {
      "main": [
        [
          {
            "node": "Basic LLM CONVERSACIÓN (SALUDO)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request MALLA DE RECIBO 2025",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request Malla Fija",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Microsoft SQL Obtener Alternativas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM Extracción y Validacion de Datos Editar Cita",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM Extracción Datos Cancelar Cita",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request Malla Fija1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM CONVERSACIÓN GENERAL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Microsoft SQL Eliminación Mensajes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM MANEJO FUERA CONTEXTO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Reinicio Fuera Contexto": {
      "main": [
        [
          {
            "node": "If contador_fuera_contexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resetear Estado - Cita Exitosa": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If contador_fuera_contexto": {
      "main": [
        [
          {
            "node": "Microsoft SQL Eliminación Mensajes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge8",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge8": {
      "main": [
        [
          {
            "node": "Validación de longitud de caracteres19",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "55bb74e1-af21-48f6-90ea-c44a6dfe8a2c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1eb0088037a07ba7867394f235324ea67bbb89bb030f5b44da808ec979ca0c6d"
  },
  "id": "NUOSkgdmXeUwNDBX",
  "tags": []
}